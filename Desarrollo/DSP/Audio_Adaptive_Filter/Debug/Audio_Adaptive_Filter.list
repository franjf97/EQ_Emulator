
Audio_Adaptive_Filter.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009894  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000424  08009a28  08009a28  00019a28  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009e4c  08009e4c  000201e0  2**0
                  CONTENTS
  4 .ARM          00000008  08009e4c  08009e4c  00019e4c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009e54  08009e54  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009e54  08009e54  00019e54  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009e58  08009e58  00019e58  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  08009e5c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000201e0  2**0
                  CONTENTS
 10 .bss          0000a27c  200001e0  200001e0  000201e0  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000a45c  2000a45c  000201e0  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000dce1  00000000  00000000  00020210  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002a2d  00000000  00000000  0002def1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000c00  00000000  00000000  00030920  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000ae0  00000000  00000000  00031520  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00021f35  00000000  00000000  00032000  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000f2b9  00000000  00000000  00053f35  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c77fa  00000000  00000000  000631ee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      000000c0  00000000  00000000  0012a9e8  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000415c  00000000  00000000  0012aaa8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_loc    00001cd7  00000000  00000000  0012ec04  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001e0 	.word	0x200001e0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08009a0c 	.word	0x08009a0c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001e4 	.word	0x200001e4
 80001cc:	08009a0c 	.word	0x08009a0c

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr

080001e4 <strlen>:
 80001e4:	4603      	mov	r3, r0
 80001e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ea:	2a00      	cmp	r2, #0
 80001ec:	d1fb      	bne.n	80001e6 <strlen+0x2>
 80001ee:	1a18      	subs	r0, r3, r0
 80001f0:	3801      	subs	r0, #1
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	; 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_uldivmod>:
 8000bc8:	b953      	cbnz	r3, 8000be0 <__aeabi_uldivmod+0x18>
 8000bca:	b94a      	cbnz	r2, 8000be0 <__aeabi_uldivmod+0x18>
 8000bcc:	2900      	cmp	r1, #0
 8000bce:	bf08      	it	eq
 8000bd0:	2800      	cmpeq	r0, #0
 8000bd2:	bf1c      	itt	ne
 8000bd4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bd8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bdc:	f000 b974 	b.w	8000ec8 <__aeabi_idiv0>
 8000be0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000be4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000be8:	f000 f806 	bl	8000bf8 <__udivmoddi4>
 8000bec:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bf0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bf4:	b004      	add	sp, #16
 8000bf6:	4770      	bx	lr

08000bf8 <__udivmoddi4>:
 8000bf8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bfc:	9d08      	ldr	r5, [sp, #32]
 8000bfe:	4604      	mov	r4, r0
 8000c00:	468e      	mov	lr, r1
 8000c02:	2b00      	cmp	r3, #0
 8000c04:	d14d      	bne.n	8000ca2 <__udivmoddi4+0xaa>
 8000c06:	428a      	cmp	r2, r1
 8000c08:	4694      	mov	ip, r2
 8000c0a:	d969      	bls.n	8000ce0 <__udivmoddi4+0xe8>
 8000c0c:	fab2 f282 	clz	r2, r2
 8000c10:	b152      	cbz	r2, 8000c28 <__udivmoddi4+0x30>
 8000c12:	fa01 f302 	lsl.w	r3, r1, r2
 8000c16:	f1c2 0120 	rsb	r1, r2, #32
 8000c1a:	fa20 f101 	lsr.w	r1, r0, r1
 8000c1e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c22:	ea41 0e03 	orr.w	lr, r1, r3
 8000c26:	4094      	lsls	r4, r2
 8000c28:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c2c:	0c21      	lsrs	r1, r4, #16
 8000c2e:	fbbe f6f8 	udiv	r6, lr, r8
 8000c32:	fa1f f78c 	uxth.w	r7, ip
 8000c36:	fb08 e316 	mls	r3, r8, r6, lr
 8000c3a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000c3e:	fb06 f107 	mul.w	r1, r6, r7
 8000c42:	4299      	cmp	r1, r3
 8000c44:	d90a      	bls.n	8000c5c <__udivmoddi4+0x64>
 8000c46:	eb1c 0303 	adds.w	r3, ip, r3
 8000c4a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c4e:	f080 811f 	bcs.w	8000e90 <__udivmoddi4+0x298>
 8000c52:	4299      	cmp	r1, r3
 8000c54:	f240 811c 	bls.w	8000e90 <__udivmoddi4+0x298>
 8000c58:	3e02      	subs	r6, #2
 8000c5a:	4463      	add	r3, ip
 8000c5c:	1a5b      	subs	r3, r3, r1
 8000c5e:	b2a4      	uxth	r4, r4
 8000c60:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c64:	fb08 3310 	mls	r3, r8, r0, r3
 8000c68:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c6c:	fb00 f707 	mul.w	r7, r0, r7
 8000c70:	42a7      	cmp	r7, r4
 8000c72:	d90a      	bls.n	8000c8a <__udivmoddi4+0x92>
 8000c74:	eb1c 0404 	adds.w	r4, ip, r4
 8000c78:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c7c:	f080 810a 	bcs.w	8000e94 <__udivmoddi4+0x29c>
 8000c80:	42a7      	cmp	r7, r4
 8000c82:	f240 8107 	bls.w	8000e94 <__udivmoddi4+0x29c>
 8000c86:	4464      	add	r4, ip
 8000c88:	3802      	subs	r0, #2
 8000c8a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c8e:	1be4      	subs	r4, r4, r7
 8000c90:	2600      	movs	r6, #0
 8000c92:	b11d      	cbz	r5, 8000c9c <__udivmoddi4+0xa4>
 8000c94:	40d4      	lsrs	r4, r2
 8000c96:	2300      	movs	r3, #0
 8000c98:	e9c5 4300 	strd	r4, r3, [r5]
 8000c9c:	4631      	mov	r1, r6
 8000c9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ca2:	428b      	cmp	r3, r1
 8000ca4:	d909      	bls.n	8000cba <__udivmoddi4+0xc2>
 8000ca6:	2d00      	cmp	r5, #0
 8000ca8:	f000 80ef 	beq.w	8000e8a <__udivmoddi4+0x292>
 8000cac:	2600      	movs	r6, #0
 8000cae:	e9c5 0100 	strd	r0, r1, [r5]
 8000cb2:	4630      	mov	r0, r6
 8000cb4:	4631      	mov	r1, r6
 8000cb6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cba:	fab3 f683 	clz	r6, r3
 8000cbe:	2e00      	cmp	r6, #0
 8000cc0:	d14a      	bne.n	8000d58 <__udivmoddi4+0x160>
 8000cc2:	428b      	cmp	r3, r1
 8000cc4:	d302      	bcc.n	8000ccc <__udivmoddi4+0xd4>
 8000cc6:	4282      	cmp	r2, r0
 8000cc8:	f200 80f9 	bhi.w	8000ebe <__udivmoddi4+0x2c6>
 8000ccc:	1a84      	subs	r4, r0, r2
 8000cce:	eb61 0303 	sbc.w	r3, r1, r3
 8000cd2:	2001      	movs	r0, #1
 8000cd4:	469e      	mov	lr, r3
 8000cd6:	2d00      	cmp	r5, #0
 8000cd8:	d0e0      	beq.n	8000c9c <__udivmoddi4+0xa4>
 8000cda:	e9c5 4e00 	strd	r4, lr, [r5]
 8000cde:	e7dd      	b.n	8000c9c <__udivmoddi4+0xa4>
 8000ce0:	b902      	cbnz	r2, 8000ce4 <__udivmoddi4+0xec>
 8000ce2:	deff      	udf	#255	; 0xff
 8000ce4:	fab2 f282 	clz	r2, r2
 8000ce8:	2a00      	cmp	r2, #0
 8000cea:	f040 8092 	bne.w	8000e12 <__udivmoddi4+0x21a>
 8000cee:	eba1 010c 	sub.w	r1, r1, ip
 8000cf2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cf6:	fa1f fe8c 	uxth.w	lr, ip
 8000cfa:	2601      	movs	r6, #1
 8000cfc:	0c20      	lsrs	r0, r4, #16
 8000cfe:	fbb1 f3f7 	udiv	r3, r1, r7
 8000d02:	fb07 1113 	mls	r1, r7, r3, r1
 8000d06:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d0a:	fb0e f003 	mul.w	r0, lr, r3
 8000d0e:	4288      	cmp	r0, r1
 8000d10:	d908      	bls.n	8000d24 <__udivmoddi4+0x12c>
 8000d12:	eb1c 0101 	adds.w	r1, ip, r1
 8000d16:	f103 38ff 	add.w	r8, r3, #4294967295
 8000d1a:	d202      	bcs.n	8000d22 <__udivmoddi4+0x12a>
 8000d1c:	4288      	cmp	r0, r1
 8000d1e:	f200 80cb 	bhi.w	8000eb8 <__udivmoddi4+0x2c0>
 8000d22:	4643      	mov	r3, r8
 8000d24:	1a09      	subs	r1, r1, r0
 8000d26:	b2a4      	uxth	r4, r4
 8000d28:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d2c:	fb07 1110 	mls	r1, r7, r0, r1
 8000d30:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000d34:	fb0e fe00 	mul.w	lr, lr, r0
 8000d38:	45a6      	cmp	lr, r4
 8000d3a:	d908      	bls.n	8000d4e <__udivmoddi4+0x156>
 8000d3c:	eb1c 0404 	adds.w	r4, ip, r4
 8000d40:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d44:	d202      	bcs.n	8000d4c <__udivmoddi4+0x154>
 8000d46:	45a6      	cmp	lr, r4
 8000d48:	f200 80bb 	bhi.w	8000ec2 <__udivmoddi4+0x2ca>
 8000d4c:	4608      	mov	r0, r1
 8000d4e:	eba4 040e 	sub.w	r4, r4, lr
 8000d52:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000d56:	e79c      	b.n	8000c92 <__udivmoddi4+0x9a>
 8000d58:	f1c6 0720 	rsb	r7, r6, #32
 8000d5c:	40b3      	lsls	r3, r6
 8000d5e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d62:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d66:	fa20 f407 	lsr.w	r4, r0, r7
 8000d6a:	fa01 f306 	lsl.w	r3, r1, r6
 8000d6e:	431c      	orrs	r4, r3
 8000d70:	40f9      	lsrs	r1, r7
 8000d72:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d76:	fa00 f306 	lsl.w	r3, r0, r6
 8000d7a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000d7e:	0c20      	lsrs	r0, r4, #16
 8000d80:	fa1f fe8c 	uxth.w	lr, ip
 8000d84:	fb09 1118 	mls	r1, r9, r8, r1
 8000d88:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d8c:	fb08 f00e 	mul.w	r0, r8, lr
 8000d90:	4288      	cmp	r0, r1
 8000d92:	fa02 f206 	lsl.w	r2, r2, r6
 8000d96:	d90b      	bls.n	8000db0 <__udivmoddi4+0x1b8>
 8000d98:	eb1c 0101 	adds.w	r1, ip, r1
 8000d9c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000da0:	f080 8088 	bcs.w	8000eb4 <__udivmoddi4+0x2bc>
 8000da4:	4288      	cmp	r0, r1
 8000da6:	f240 8085 	bls.w	8000eb4 <__udivmoddi4+0x2bc>
 8000daa:	f1a8 0802 	sub.w	r8, r8, #2
 8000dae:	4461      	add	r1, ip
 8000db0:	1a09      	subs	r1, r1, r0
 8000db2:	b2a4      	uxth	r4, r4
 8000db4:	fbb1 f0f9 	udiv	r0, r1, r9
 8000db8:	fb09 1110 	mls	r1, r9, r0, r1
 8000dbc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000dc0:	fb00 fe0e 	mul.w	lr, r0, lr
 8000dc4:	458e      	cmp	lr, r1
 8000dc6:	d908      	bls.n	8000dda <__udivmoddi4+0x1e2>
 8000dc8:	eb1c 0101 	adds.w	r1, ip, r1
 8000dcc:	f100 34ff 	add.w	r4, r0, #4294967295
 8000dd0:	d26c      	bcs.n	8000eac <__udivmoddi4+0x2b4>
 8000dd2:	458e      	cmp	lr, r1
 8000dd4:	d96a      	bls.n	8000eac <__udivmoddi4+0x2b4>
 8000dd6:	3802      	subs	r0, #2
 8000dd8:	4461      	add	r1, ip
 8000dda:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000dde:	fba0 9402 	umull	r9, r4, r0, r2
 8000de2:	eba1 010e 	sub.w	r1, r1, lr
 8000de6:	42a1      	cmp	r1, r4
 8000de8:	46c8      	mov	r8, r9
 8000dea:	46a6      	mov	lr, r4
 8000dec:	d356      	bcc.n	8000e9c <__udivmoddi4+0x2a4>
 8000dee:	d053      	beq.n	8000e98 <__udivmoddi4+0x2a0>
 8000df0:	b15d      	cbz	r5, 8000e0a <__udivmoddi4+0x212>
 8000df2:	ebb3 0208 	subs.w	r2, r3, r8
 8000df6:	eb61 010e 	sbc.w	r1, r1, lr
 8000dfa:	fa01 f707 	lsl.w	r7, r1, r7
 8000dfe:	fa22 f306 	lsr.w	r3, r2, r6
 8000e02:	40f1      	lsrs	r1, r6
 8000e04:	431f      	orrs	r7, r3
 8000e06:	e9c5 7100 	strd	r7, r1, [r5]
 8000e0a:	2600      	movs	r6, #0
 8000e0c:	4631      	mov	r1, r6
 8000e0e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e12:	f1c2 0320 	rsb	r3, r2, #32
 8000e16:	40d8      	lsrs	r0, r3
 8000e18:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e1c:	fa21 f303 	lsr.w	r3, r1, r3
 8000e20:	4091      	lsls	r1, r2
 8000e22:	4301      	orrs	r1, r0
 8000e24:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e28:	fa1f fe8c 	uxth.w	lr, ip
 8000e2c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000e30:	fb07 3610 	mls	r6, r7, r0, r3
 8000e34:	0c0b      	lsrs	r3, r1, #16
 8000e36:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000e3a:	fb00 f60e 	mul.w	r6, r0, lr
 8000e3e:	429e      	cmp	r6, r3
 8000e40:	fa04 f402 	lsl.w	r4, r4, r2
 8000e44:	d908      	bls.n	8000e58 <__udivmoddi4+0x260>
 8000e46:	eb1c 0303 	adds.w	r3, ip, r3
 8000e4a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e4e:	d22f      	bcs.n	8000eb0 <__udivmoddi4+0x2b8>
 8000e50:	429e      	cmp	r6, r3
 8000e52:	d92d      	bls.n	8000eb0 <__udivmoddi4+0x2b8>
 8000e54:	3802      	subs	r0, #2
 8000e56:	4463      	add	r3, ip
 8000e58:	1b9b      	subs	r3, r3, r6
 8000e5a:	b289      	uxth	r1, r1
 8000e5c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000e60:	fb07 3316 	mls	r3, r7, r6, r3
 8000e64:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e68:	fb06 f30e 	mul.w	r3, r6, lr
 8000e6c:	428b      	cmp	r3, r1
 8000e6e:	d908      	bls.n	8000e82 <__udivmoddi4+0x28a>
 8000e70:	eb1c 0101 	adds.w	r1, ip, r1
 8000e74:	f106 38ff 	add.w	r8, r6, #4294967295
 8000e78:	d216      	bcs.n	8000ea8 <__udivmoddi4+0x2b0>
 8000e7a:	428b      	cmp	r3, r1
 8000e7c:	d914      	bls.n	8000ea8 <__udivmoddi4+0x2b0>
 8000e7e:	3e02      	subs	r6, #2
 8000e80:	4461      	add	r1, ip
 8000e82:	1ac9      	subs	r1, r1, r3
 8000e84:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000e88:	e738      	b.n	8000cfc <__udivmoddi4+0x104>
 8000e8a:	462e      	mov	r6, r5
 8000e8c:	4628      	mov	r0, r5
 8000e8e:	e705      	b.n	8000c9c <__udivmoddi4+0xa4>
 8000e90:	4606      	mov	r6, r0
 8000e92:	e6e3      	b.n	8000c5c <__udivmoddi4+0x64>
 8000e94:	4618      	mov	r0, r3
 8000e96:	e6f8      	b.n	8000c8a <__udivmoddi4+0x92>
 8000e98:	454b      	cmp	r3, r9
 8000e9a:	d2a9      	bcs.n	8000df0 <__udivmoddi4+0x1f8>
 8000e9c:	ebb9 0802 	subs.w	r8, r9, r2
 8000ea0:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000ea4:	3801      	subs	r0, #1
 8000ea6:	e7a3      	b.n	8000df0 <__udivmoddi4+0x1f8>
 8000ea8:	4646      	mov	r6, r8
 8000eaa:	e7ea      	b.n	8000e82 <__udivmoddi4+0x28a>
 8000eac:	4620      	mov	r0, r4
 8000eae:	e794      	b.n	8000dda <__udivmoddi4+0x1e2>
 8000eb0:	4640      	mov	r0, r8
 8000eb2:	e7d1      	b.n	8000e58 <__udivmoddi4+0x260>
 8000eb4:	46d0      	mov	r8, sl
 8000eb6:	e77b      	b.n	8000db0 <__udivmoddi4+0x1b8>
 8000eb8:	3b02      	subs	r3, #2
 8000eba:	4461      	add	r1, ip
 8000ebc:	e732      	b.n	8000d24 <__udivmoddi4+0x12c>
 8000ebe:	4630      	mov	r0, r6
 8000ec0:	e709      	b.n	8000cd6 <__udivmoddi4+0xde>
 8000ec2:	4464      	add	r4, ip
 8000ec4:	3802      	subs	r0, #2
 8000ec6:	e742      	b.n	8000d4e <__udivmoddi4+0x156>

08000ec8 <__aeabi_idiv0>:
 8000ec8:	4770      	bx	lr
 8000eca:	bf00      	nop

08000ecc <MY_FLASH_EraseSector>:
static uint8_t MY_SectorNum;

//functions definitions
//1. Erase Sector
static void MY_FLASH_EraseSector(void)
{
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	af00      	add	r7, sp, #0
	HAL_FLASH_Unlock();
 8000ed0:	f002 f8ca 	bl	8003068 <HAL_FLASH_Unlock>
	//Erase the required Flash sector
	FLASH_Erase_Sector(MY_SectorNum, FLASH_VOLTAGE_RANGE_3);
 8000ed4:	4b04      	ldr	r3, [pc, #16]	; (8000ee8 <MY_FLASH_EraseSector+0x1c>)
 8000ed6:	781b      	ldrb	r3, [r3, #0]
 8000ed8:	2102      	movs	r1, #2
 8000eda:	4618      	mov	r0, r3
 8000edc:	f002 fa26 	bl	800332c <FLASH_Erase_Sector>
	HAL_FLASH_Lock();
 8000ee0:	f002 f8e4 	bl	80030ac <HAL_FLASH_Lock>
}
 8000ee4:	bf00      	nop
 8000ee6:	bd80      	pop	{r7, pc}
 8000ee8:	20000200 	.word	0x20000200

08000eec <MY_FLASH_SetSectorAddrs>:

//2. Set Sector Adress
void MY_FLASH_SetSectorAddrs(uint8_t sector, uint32_t addrs)
{
 8000eec:	b480      	push	{r7}
 8000eee:	b083      	sub	sp, #12
 8000ef0:	af00      	add	r7, sp, #0
 8000ef2:	4603      	mov	r3, r0
 8000ef4:	6039      	str	r1, [r7, #0]
 8000ef6:	71fb      	strb	r3, [r7, #7]
	MY_SectorNum = sector;
 8000ef8:	4a05      	ldr	r2, [pc, #20]	; (8000f10 <MY_FLASH_SetSectorAddrs+0x24>)
 8000efa:	79fb      	ldrb	r3, [r7, #7]
 8000efc:	7013      	strb	r3, [r2, #0]
	MY_SectorAddrs = addrs;
 8000efe:	4a05      	ldr	r2, [pc, #20]	; (8000f14 <MY_FLASH_SetSectorAddrs+0x28>)
 8000f00:	683b      	ldr	r3, [r7, #0]
 8000f02:	6013      	str	r3, [r2, #0]
}
 8000f04:	bf00      	nop
 8000f06:	370c      	adds	r7, #12
 8000f08:	46bd      	mov	sp, r7
 8000f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f0e:	4770      	bx	lr
 8000f10:	20000200 	.word	0x20000200
 8000f14:	200001fc 	.word	0x200001fc

08000f18 <MY_FLASH_WriteN>:

//3. Write Flash
void MY_FLASH_WriteN(uint32_t idx, void *wrBuf, uint32_t Nsize, DataTypeDef dataType)
{
 8000f18:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8000f1c:	b088      	sub	sp, #32
 8000f1e:	af00      	add	r7, sp, #0
 8000f20:	60f8      	str	r0, [r7, #12]
 8000f22:	60b9      	str	r1, [r7, #8]
 8000f24:	607a      	str	r2, [r7, #4]
 8000f26:	70fb      	strb	r3, [r7, #3]
	uint32_t flashAddress = MY_SectorAddrs + idx;
 8000f28:	4b37      	ldr	r3, [pc, #220]	; (8001008 <MY_FLASH_WriteN+0xf0>)
 8000f2a:	681b      	ldr	r3, [r3, #0]
 8000f2c:	68fa      	ldr	r2, [r7, #12]
 8000f2e:	4413      	add	r3, r2
 8000f30:	61fb      	str	r3, [r7, #28]
	
	//Erase sector before write
	MY_FLASH_EraseSector();
 8000f32:	f7ff ffcb 	bl	8000ecc <MY_FLASH_EraseSector>
	
	//Unlock Flash
	HAL_FLASH_Unlock();
 8000f36:	f002 f897 	bl	8003068 <HAL_FLASH_Unlock>
	//Write to Flash
	switch(dataType)
 8000f3a:	78fb      	ldrb	r3, [r7, #3]
 8000f3c:	2b02      	cmp	r3, #2
 8000f3e:	d03f      	beq.n	8000fc0 <MY_FLASH_WriteN+0xa8>
 8000f40:	2b02      	cmp	r3, #2
 8000f42:	dc59      	bgt.n	8000ff8 <MY_FLASH_WriteN+0xe0>
 8000f44:	2b00      	cmp	r3, #0
 8000f46:	d002      	beq.n	8000f4e <MY_FLASH_WriteN+0x36>
 8000f48:	2b01      	cmp	r3, #1
 8000f4a:	d01c      	beq.n	8000f86 <MY_FLASH_WriteN+0x6e>
 8000f4c:	e054      	b.n	8000ff8 <MY_FLASH_WriteN+0xe0>
	{
		case DATA_TYPE_8:
				for(uint32_t i=0; i<Nsize; i++)
 8000f4e:	2300      	movs	r3, #0
 8000f50:	61bb      	str	r3, [r7, #24]
 8000f52:	e013      	b.n	8000f7c <MY_FLASH_WriteN+0x64>
				{
					HAL_FLASH_Program(FLASH_TYPEPROGRAM_BYTE, flashAddress , ((uint8_t *)wrBuf)[i]);
 8000f54:	68ba      	ldr	r2, [r7, #8]
 8000f56:	69bb      	ldr	r3, [r7, #24]
 8000f58:	4413      	add	r3, r2
 8000f5a:	781b      	ldrb	r3, [r3, #0]
 8000f5c:	b2db      	uxtb	r3, r3
 8000f5e:	2200      	movs	r2, #0
 8000f60:	469a      	mov	sl, r3
 8000f62:	4693      	mov	fp, r2
 8000f64:	4652      	mov	r2, sl
 8000f66:	465b      	mov	r3, fp
 8000f68:	69f9      	ldr	r1, [r7, #28]
 8000f6a:	2000      	movs	r0, #0
 8000f6c:	f002 f828 	bl	8002fc0 <HAL_FLASH_Program>
					flashAddress++;
 8000f70:	69fb      	ldr	r3, [r7, #28]
 8000f72:	3301      	adds	r3, #1
 8000f74:	61fb      	str	r3, [r7, #28]
				for(uint32_t i=0; i<Nsize; i++)
 8000f76:	69bb      	ldr	r3, [r7, #24]
 8000f78:	3301      	adds	r3, #1
 8000f7a:	61bb      	str	r3, [r7, #24]
 8000f7c:	69ba      	ldr	r2, [r7, #24]
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	429a      	cmp	r2, r3
 8000f82:	d3e7      	bcc.n	8000f54 <MY_FLASH_WriteN+0x3c>
				}
			break;
 8000f84:	e038      	b.n	8000ff8 <MY_FLASH_WriteN+0xe0>
		
		case DATA_TYPE_16:
				for(uint32_t i=0; i<Nsize; i++)
 8000f86:	2300      	movs	r3, #0
 8000f88:	617b      	str	r3, [r7, #20]
 8000f8a:	e014      	b.n	8000fb6 <MY_FLASH_WriteN+0x9e>
				{
					HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, flashAddress , ((uint16_t *)wrBuf)[i]);
 8000f8c:	697b      	ldr	r3, [r7, #20]
 8000f8e:	005b      	lsls	r3, r3, #1
 8000f90:	68ba      	ldr	r2, [r7, #8]
 8000f92:	4413      	add	r3, r2
 8000f94:	881b      	ldrh	r3, [r3, #0]
 8000f96:	b29b      	uxth	r3, r3
 8000f98:	2200      	movs	r2, #0
 8000f9a:	4698      	mov	r8, r3
 8000f9c:	4691      	mov	r9, r2
 8000f9e:	4642      	mov	r2, r8
 8000fa0:	464b      	mov	r3, r9
 8000fa2:	69f9      	ldr	r1, [r7, #28]
 8000fa4:	2001      	movs	r0, #1
 8000fa6:	f002 f80b 	bl	8002fc0 <HAL_FLASH_Program>
					flashAddress+=2;
 8000faa:	69fb      	ldr	r3, [r7, #28]
 8000fac:	3302      	adds	r3, #2
 8000fae:	61fb      	str	r3, [r7, #28]
				for(uint32_t i=0; i<Nsize; i++)
 8000fb0:	697b      	ldr	r3, [r7, #20]
 8000fb2:	3301      	adds	r3, #1
 8000fb4:	617b      	str	r3, [r7, #20]
 8000fb6:	697a      	ldr	r2, [r7, #20]
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	429a      	cmp	r2, r3
 8000fbc:	d3e6      	bcc.n	8000f8c <MY_FLASH_WriteN+0x74>
				}
			break;
 8000fbe:	e01b      	b.n	8000ff8 <MY_FLASH_WriteN+0xe0>
		
		case DATA_TYPE_32:
				for(uint32_t i=0; i<Nsize; i++)
 8000fc0:	2300      	movs	r3, #0
 8000fc2:	613b      	str	r3, [r7, #16]
 8000fc4:	e013      	b.n	8000fee <MY_FLASH_WriteN+0xd6>
				{
					HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, flashAddress , ((uint32_t *)wrBuf)[i]);
 8000fc6:	693b      	ldr	r3, [r7, #16]
 8000fc8:	009b      	lsls	r3, r3, #2
 8000fca:	68ba      	ldr	r2, [r7, #8]
 8000fcc:	4413      	add	r3, r2
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	2200      	movs	r2, #0
 8000fd2:	461c      	mov	r4, r3
 8000fd4:	4615      	mov	r5, r2
 8000fd6:	4622      	mov	r2, r4
 8000fd8:	462b      	mov	r3, r5
 8000fda:	69f9      	ldr	r1, [r7, #28]
 8000fdc:	2002      	movs	r0, #2
 8000fde:	f001 ffef 	bl	8002fc0 <HAL_FLASH_Program>
					flashAddress+=4;
 8000fe2:	69fb      	ldr	r3, [r7, #28]
 8000fe4:	3304      	adds	r3, #4
 8000fe6:	61fb      	str	r3, [r7, #28]
				for(uint32_t i=0; i<Nsize; i++)
 8000fe8:	693b      	ldr	r3, [r7, #16]
 8000fea:	3301      	adds	r3, #1
 8000fec:	613b      	str	r3, [r7, #16]
 8000fee:	693a      	ldr	r2, [r7, #16]
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	429a      	cmp	r2, r3
 8000ff4:	d3e7      	bcc.n	8000fc6 <MY_FLASH_WriteN+0xae>
				}
			break;
 8000ff6:	bf00      	nop
	}
	//Lock the Flash space
	HAL_FLASH_Lock();
 8000ff8:	f002 f858 	bl	80030ac <HAL_FLASH_Lock>
}
 8000ffc:	bf00      	nop
 8000ffe:	3720      	adds	r7, #32
 8001000:	46bd      	mov	sp, r7
 8001002:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001006:	bf00      	nop
 8001008:	200001fc 	.word	0x200001fc

0800100c <MY_FLASH_ReadN>:
//4. Read Flash
void MY_FLASH_ReadN(uint32_t idx, void *rdBuf, uint32_t Nsize, DataTypeDef dataType)
{
 800100c:	b480      	push	{r7}
 800100e:	b089      	sub	sp, #36	; 0x24
 8001010:	af00      	add	r7, sp, #0
 8001012:	60f8      	str	r0, [r7, #12]
 8001014:	60b9      	str	r1, [r7, #8]
 8001016:	607a      	str	r2, [r7, #4]
 8001018:	70fb      	strb	r3, [r7, #3]
	uint32_t flashAddress = MY_SectorAddrs + idx;
 800101a:	4b29      	ldr	r3, [pc, #164]	; (80010c0 <MY_FLASH_ReadN+0xb4>)
 800101c:	681b      	ldr	r3, [r3, #0]
 800101e:	68fa      	ldr	r2, [r7, #12]
 8001020:	4413      	add	r3, r2
 8001022:	61fb      	str	r3, [r7, #28]
	
	switch(dataType)
 8001024:	78fb      	ldrb	r3, [r7, #3]
 8001026:	2b02      	cmp	r3, #2
 8001028:	d02f      	beq.n	800108a <MY_FLASH_ReadN+0x7e>
 800102a:	2b02      	cmp	r3, #2
 800102c:	dc42      	bgt.n	80010b4 <MY_FLASH_ReadN+0xa8>
 800102e:	2b00      	cmp	r3, #0
 8001030:	d002      	beq.n	8001038 <MY_FLASH_ReadN+0x2c>
 8001032:	2b01      	cmp	r3, #1
 8001034:	d014      	beq.n	8001060 <MY_FLASH_ReadN+0x54>
					*((uint32_t *)rdBuf + i) = *(uint32_t *)flashAddress;
					flashAddress+=4;
				}
			break;
	}
}
 8001036:	e03d      	b.n	80010b4 <MY_FLASH_ReadN+0xa8>
				for(uint32_t i=0; i<Nsize; i++)
 8001038:	2300      	movs	r3, #0
 800103a:	61bb      	str	r3, [r7, #24]
 800103c:	e00b      	b.n	8001056 <MY_FLASH_ReadN+0x4a>
					*((uint8_t *)rdBuf + i) = *(uint8_t *)flashAddress;
 800103e:	69fa      	ldr	r2, [r7, #28]
 8001040:	68b9      	ldr	r1, [r7, #8]
 8001042:	69bb      	ldr	r3, [r7, #24]
 8001044:	440b      	add	r3, r1
 8001046:	7812      	ldrb	r2, [r2, #0]
 8001048:	701a      	strb	r2, [r3, #0]
					flashAddress++;
 800104a:	69fb      	ldr	r3, [r7, #28]
 800104c:	3301      	adds	r3, #1
 800104e:	61fb      	str	r3, [r7, #28]
				for(uint32_t i=0; i<Nsize; i++)
 8001050:	69bb      	ldr	r3, [r7, #24]
 8001052:	3301      	adds	r3, #1
 8001054:	61bb      	str	r3, [r7, #24]
 8001056:	69ba      	ldr	r2, [r7, #24]
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	429a      	cmp	r2, r3
 800105c:	d3ef      	bcc.n	800103e <MY_FLASH_ReadN+0x32>
			break;
 800105e:	e029      	b.n	80010b4 <MY_FLASH_ReadN+0xa8>
				for(uint32_t i=0; i<Nsize; i++)
 8001060:	2300      	movs	r3, #0
 8001062:	617b      	str	r3, [r7, #20]
 8001064:	e00c      	b.n	8001080 <MY_FLASH_ReadN+0x74>
					*((uint16_t *)rdBuf + i) = *(uint16_t *)flashAddress;
 8001066:	69fa      	ldr	r2, [r7, #28]
 8001068:	697b      	ldr	r3, [r7, #20]
 800106a:	005b      	lsls	r3, r3, #1
 800106c:	68b9      	ldr	r1, [r7, #8]
 800106e:	440b      	add	r3, r1
 8001070:	8812      	ldrh	r2, [r2, #0]
 8001072:	801a      	strh	r2, [r3, #0]
					flashAddress+=2;
 8001074:	69fb      	ldr	r3, [r7, #28]
 8001076:	3302      	adds	r3, #2
 8001078:	61fb      	str	r3, [r7, #28]
				for(uint32_t i=0; i<Nsize; i++)
 800107a:	697b      	ldr	r3, [r7, #20]
 800107c:	3301      	adds	r3, #1
 800107e:	617b      	str	r3, [r7, #20]
 8001080:	697a      	ldr	r2, [r7, #20]
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	429a      	cmp	r2, r3
 8001086:	d3ee      	bcc.n	8001066 <MY_FLASH_ReadN+0x5a>
			break;
 8001088:	e014      	b.n	80010b4 <MY_FLASH_ReadN+0xa8>
				for(uint32_t i=0; i<Nsize; i++)
 800108a:	2300      	movs	r3, #0
 800108c:	613b      	str	r3, [r7, #16]
 800108e:	e00c      	b.n	80010aa <MY_FLASH_ReadN+0x9e>
					*((uint32_t *)rdBuf + i) = *(uint32_t *)flashAddress;
 8001090:	69fa      	ldr	r2, [r7, #28]
 8001092:	693b      	ldr	r3, [r7, #16]
 8001094:	009b      	lsls	r3, r3, #2
 8001096:	68b9      	ldr	r1, [r7, #8]
 8001098:	440b      	add	r3, r1
 800109a:	6812      	ldr	r2, [r2, #0]
 800109c:	601a      	str	r2, [r3, #0]
					flashAddress+=4;
 800109e:	69fb      	ldr	r3, [r7, #28]
 80010a0:	3304      	adds	r3, #4
 80010a2:	61fb      	str	r3, [r7, #28]
				for(uint32_t i=0; i<Nsize; i++)
 80010a4:	693b      	ldr	r3, [r7, #16]
 80010a6:	3301      	adds	r3, #1
 80010a8:	613b      	str	r3, [r7, #16]
 80010aa:	693a      	ldr	r2, [r7, #16]
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	429a      	cmp	r2, r3
 80010b0:	d3ee      	bcc.n	8001090 <MY_FLASH_ReadN+0x84>
			break;
 80010b2:	bf00      	nop
}
 80010b4:	bf00      	nop
 80010b6:	3724      	adds	r7, #36	; 0x24
 80010b8:	46bd      	mov	sp, r7
 80010ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010be:	4770      	bx	lr
 80010c0:	200001fc 	.word	0x200001fc

080010c4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80010c4:	b580      	push	{r7, lr}
 80010c6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80010c8:	f001 f9d0 	bl	800246c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80010cc:	f000 f834 	bl	8001138 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80010d0:	f000 f924 	bl	800131c <MX_GPIO_Init>
  MX_DMA_Init();
 80010d4:	f000 f8f2 	bl	80012bc <MX_DMA_Init>
  MX_I2S2_Init();
 80010d8:	f000 f898 	bl	800120c <MX_I2S2_Init>
  MX_USART2_UART_Init();
 80010dc:	f000 f8c4 	bl	8001268 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  //Wait for other devices to initialize
  HAL_Delay(1000);
 80010e0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80010e4:	f001 fa34 	bl	8002550 <HAL_Delay>

  //Define FLASH area
  MY_FLASH_SetSectorAddrs(FLASH_SECTOR, FLASH_START_ADRESS);
 80010e8:	490c      	ldr	r1, [pc, #48]	; (800111c <main+0x58>)
 80010ea:	200b      	movs	r0, #11
 80010ec:	f7ff fefe 	bl	8000eec <MY_FLASH_SetSectorAddrs>

  //Start i2s with 2048 samples transmission => 4096*u16 words
  HAL_I2SEx_TransmitReceive_DMA(&hi2s2, txBuf, rxBuf, BLOCK_SIZE_U16);
 80010f0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80010f4:	4a0a      	ldr	r2, [pc, #40]	; (8001120 <main+0x5c>)
 80010f6:	490b      	ldr	r1, [pc, #44]	; (8001124 <main+0x60>)
 80010f8:	480b      	ldr	r0, [pc, #44]	; (8001128 <main+0x64>)
 80010fa:	f002 fd5b 	bl	8003bb4 <HAL_I2SEx_TransmitReceive_DMA>

  //Start UART Rx
  __HAL_UART_FLUSH_DRREGISTER(&huart2);
 80010fe:	4b0b      	ldr	r3, [pc, #44]	; (800112c <main+0x68>)
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	685b      	ldr	r3, [r3, #4]
  HAL_UART_Receive_DMA(&huart2, &rxByte, 1);
 8001104:	2201      	movs	r2, #1
 8001106:	490a      	ldr	r1, [pc, #40]	; (8001130 <main+0x6c>)
 8001108:	4808      	ldr	r0, [pc, #32]	; (800112c <main+0x68>)
 800110a:	f004 f851 	bl	80051b0 <HAL_UART_Receive_DMA>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if (callback_state != 0)
 800110e:	4b09      	ldr	r3, [pc, #36]	; (8001134 <main+0x70>)
 8001110:	781b      	ldrb	r3, [r3, #0]
 8001112:	2b00      	cmp	r3, #0
 8001114:	d0fb      	beq.n	800110e <main+0x4a>
	  {
		  AudioProcess();
 8001116:	f000 fb2d 	bl	8001774 <AudioProcess>
	  if (callback_state != 0)
 800111a:	e7f8      	b.n	800110e <main+0x4a>
 800111c:	080e0000 	.word	0x080e0000
 8001120:	200003b4 	.word	0x200003b4
 8001124:	200023b4 	.word	0x200023b4
 8001128:	20000204 	.word	0x20000204
 800112c:	2000030c 	.word	0x2000030c
 8001130:	2000a41d 	.word	0x2000a41d
 8001134:	200083b4 	.word	0x200083b4

08001138 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001138:	b580      	push	{r7, lr}
 800113a:	b094      	sub	sp, #80	; 0x50
 800113c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800113e:	f107 0320 	add.w	r3, r7, #32
 8001142:	2230      	movs	r2, #48	; 0x30
 8001144:	2100      	movs	r1, #0
 8001146:	4618      	mov	r0, r3
 8001148:	f005 fd12 	bl	8006b70 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800114c:	f107 030c 	add.w	r3, r7, #12
 8001150:	2200      	movs	r2, #0
 8001152:	601a      	str	r2, [r3, #0]
 8001154:	605a      	str	r2, [r3, #4]
 8001156:	609a      	str	r2, [r3, #8]
 8001158:	60da      	str	r2, [r3, #12]
 800115a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800115c:	2300      	movs	r3, #0
 800115e:	60bb      	str	r3, [r7, #8]
 8001160:	4b28      	ldr	r3, [pc, #160]	; (8001204 <SystemClock_Config+0xcc>)
 8001162:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001164:	4a27      	ldr	r2, [pc, #156]	; (8001204 <SystemClock_Config+0xcc>)
 8001166:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800116a:	6413      	str	r3, [r2, #64]	; 0x40
 800116c:	4b25      	ldr	r3, [pc, #148]	; (8001204 <SystemClock_Config+0xcc>)
 800116e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001170:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001174:	60bb      	str	r3, [r7, #8]
 8001176:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001178:	2300      	movs	r3, #0
 800117a:	607b      	str	r3, [r7, #4]
 800117c:	4b22      	ldr	r3, [pc, #136]	; (8001208 <SystemClock_Config+0xd0>)
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	4a21      	ldr	r2, [pc, #132]	; (8001208 <SystemClock_Config+0xd0>)
 8001182:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001186:	6013      	str	r3, [r2, #0]
 8001188:	4b1f      	ldr	r3, [pc, #124]	; (8001208 <SystemClock_Config+0xd0>)
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001190:	607b      	str	r3, [r7, #4]
 8001192:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001194:	2301      	movs	r3, #1
 8001196:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001198:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800119c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800119e:	2302      	movs	r3, #2
 80011a0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80011a2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80011a6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80011a8:	2304      	movs	r3, #4
 80011aa:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80011ac:	23a8      	movs	r3, #168	; 0xa8
 80011ae:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80011b0:	2302      	movs	r3, #2
 80011b2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80011b4:	2304      	movs	r3, #4
 80011b6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80011b8:	f107 0320 	add.w	r3, r7, #32
 80011bc:	4618      	mov	r0, r3
 80011be:	f003 f98d 	bl	80044dc <HAL_RCC_OscConfig>
 80011c2:	4603      	mov	r3, r0
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	d001      	beq.n	80011cc <SystemClock_Config+0x94>
  {
    Error_Handler();
 80011c8:	f000 fe50 	bl	8001e6c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80011cc:	230f      	movs	r3, #15
 80011ce:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80011d0:	2302      	movs	r3, #2
 80011d2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80011d4:	2300      	movs	r3, #0
 80011d6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80011d8:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80011dc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80011de:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80011e2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80011e4:	f107 030c 	add.w	r3, r7, #12
 80011e8:	2105      	movs	r1, #5
 80011ea:	4618      	mov	r0, r3
 80011ec:	f003 fbee 	bl	80049cc <HAL_RCC_ClockConfig>
 80011f0:	4603      	mov	r3, r0
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d001      	beq.n	80011fa <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80011f6:	f000 fe39 	bl	8001e6c <Error_Handler>
  }
}
 80011fa:	bf00      	nop
 80011fc:	3750      	adds	r7, #80	; 0x50
 80011fe:	46bd      	mov	sp, r7
 8001200:	bd80      	pop	{r7, pc}
 8001202:	bf00      	nop
 8001204:	40023800 	.word	0x40023800
 8001208:	40007000 	.word	0x40007000

0800120c <MX_I2S2_Init>:
  * @brief I2S2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S2_Init(void)
{
 800120c:	b580      	push	{r7, lr}
 800120e:	af00      	add	r7, sp, #0
  /* USER CODE END I2S2_Init 0 */

  /* USER CODE BEGIN I2S2_Init 1 */

  /* USER CODE END I2S2_Init 1 */
  hi2s2.Instance = SPI2;
 8001210:	4b13      	ldr	r3, [pc, #76]	; (8001260 <MX_I2S2_Init+0x54>)
 8001212:	4a14      	ldr	r2, [pc, #80]	; (8001264 <MX_I2S2_Init+0x58>)
 8001214:	601a      	str	r2, [r3, #0]
  hi2s2.Init.Mode = I2S_MODE_MASTER_TX;
 8001216:	4b12      	ldr	r3, [pc, #72]	; (8001260 <MX_I2S2_Init+0x54>)
 8001218:	f44f 7200 	mov.w	r2, #512	; 0x200
 800121c:	605a      	str	r2, [r3, #4]
  hi2s2.Init.Standard = I2S_STANDARD_PHILIPS;
 800121e:	4b10      	ldr	r3, [pc, #64]	; (8001260 <MX_I2S2_Init+0x54>)
 8001220:	2200      	movs	r2, #0
 8001222:	609a      	str	r2, [r3, #8]
  hi2s2.Init.DataFormat = I2S_DATAFORMAT_24B;
 8001224:	4b0e      	ldr	r3, [pc, #56]	; (8001260 <MX_I2S2_Init+0x54>)
 8001226:	2203      	movs	r2, #3
 8001228:	60da      	str	r2, [r3, #12]
  hi2s2.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 800122a:	4b0d      	ldr	r3, [pc, #52]	; (8001260 <MX_I2S2_Init+0x54>)
 800122c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001230:	611a      	str	r2, [r3, #16]
  hi2s2.Init.AudioFreq = I2S_AUDIOFREQ_48K;
 8001232:	4b0b      	ldr	r3, [pc, #44]	; (8001260 <MX_I2S2_Init+0x54>)
 8001234:	f64b 3280 	movw	r2, #48000	; 0xbb80
 8001238:	615a      	str	r2, [r3, #20]
  hi2s2.Init.CPOL = I2S_CPOL_LOW;
 800123a:	4b09      	ldr	r3, [pc, #36]	; (8001260 <MX_I2S2_Init+0x54>)
 800123c:	2200      	movs	r2, #0
 800123e:	619a      	str	r2, [r3, #24]
  hi2s2.Init.ClockSource = I2S_CLOCK_PLL;
 8001240:	4b07      	ldr	r3, [pc, #28]	; (8001260 <MX_I2S2_Init+0x54>)
 8001242:	2200      	movs	r2, #0
 8001244:	61da      	str	r2, [r3, #28]
  hi2s2.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_ENABLE;
 8001246:	4b06      	ldr	r3, [pc, #24]	; (8001260 <MX_I2S2_Init+0x54>)
 8001248:	2201      	movs	r2, #1
 800124a:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s2) != HAL_OK)
 800124c:	4804      	ldr	r0, [pc, #16]	; (8001260 <MX_I2S2_Init+0x54>)
 800124e:	f002 fa6b 	bl	8003728 <HAL_I2S_Init>
 8001252:	4603      	mov	r3, r0
 8001254:	2b00      	cmp	r3, #0
 8001256:	d001      	beq.n	800125c <MX_I2S2_Init+0x50>
  {
    Error_Handler();
 8001258:	f000 fe08 	bl	8001e6c <Error_Handler>
  }
  /* USER CODE BEGIN I2S2_Init 2 */

  /* USER CODE END I2S2_Init 2 */

}
 800125c:	bf00      	nop
 800125e:	bd80      	pop	{r7, pc}
 8001260:	20000204 	.word	0x20000204
 8001264:	40003800 	.word	0x40003800

08001268 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001268:	b580      	push	{r7, lr}
 800126a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800126c:	4b11      	ldr	r3, [pc, #68]	; (80012b4 <MX_USART2_UART_Init+0x4c>)
 800126e:	4a12      	ldr	r2, [pc, #72]	; (80012b8 <MX_USART2_UART_Init+0x50>)
 8001270:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001272:	4b10      	ldr	r3, [pc, #64]	; (80012b4 <MX_USART2_UART_Init+0x4c>)
 8001274:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001278:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800127a:	4b0e      	ldr	r3, [pc, #56]	; (80012b4 <MX_USART2_UART_Init+0x4c>)
 800127c:	2200      	movs	r2, #0
 800127e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001280:	4b0c      	ldr	r3, [pc, #48]	; (80012b4 <MX_USART2_UART_Init+0x4c>)
 8001282:	2200      	movs	r2, #0
 8001284:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001286:	4b0b      	ldr	r3, [pc, #44]	; (80012b4 <MX_USART2_UART_Init+0x4c>)
 8001288:	2200      	movs	r2, #0
 800128a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800128c:	4b09      	ldr	r3, [pc, #36]	; (80012b4 <MX_USART2_UART_Init+0x4c>)
 800128e:	220c      	movs	r2, #12
 8001290:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001292:	4b08      	ldr	r3, [pc, #32]	; (80012b4 <MX_USART2_UART_Init+0x4c>)
 8001294:	2200      	movs	r2, #0
 8001296:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001298:	4b06      	ldr	r3, [pc, #24]	; (80012b4 <MX_USART2_UART_Init+0x4c>)
 800129a:	2200      	movs	r2, #0
 800129c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800129e:	4805      	ldr	r0, [pc, #20]	; (80012b4 <MX_USART2_UART_Init+0x4c>)
 80012a0:	f003 fef4 	bl	800508c <HAL_UART_Init>
 80012a4:	4603      	mov	r3, r0
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d001      	beq.n	80012ae <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80012aa:	f000 fddf 	bl	8001e6c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80012ae:	bf00      	nop
 80012b0:	bd80      	pop	{r7, pc}
 80012b2:	bf00      	nop
 80012b4:	2000030c 	.word	0x2000030c
 80012b8:	40004400 	.word	0x40004400

080012bc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80012bc:	b580      	push	{r7, lr}
 80012be:	b082      	sub	sp, #8
 80012c0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80012c2:	2300      	movs	r3, #0
 80012c4:	607b      	str	r3, [r7, #4]
 80012c6:	4b14      	ldr	r3, [pc, #80]	; (8001318 <MX_DMA_Init+0x5c>)
 80012c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ca:	4a13      	ldr	r2, [pc, #76]	; (8001318 <MX_DMA_Init+0x5c>)
 80012cc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80012d0:	6313      	str	r3, [r2, #48]	; 0x30
 80012d2:	4b11      	ldr	r3, [pc, #68]	; (8001318 <MX_DMA_Init+0x5c>)
 80012d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012d6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80012da:	607b      	str	r3, [r7, #4]
 80012dc:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 80012de:	2200      	movs	r2, #0
 80012e0:	2100      	movs	r1, #0
 80012e2:	200e      	movs	r0, #14
 80012e4:	f001 fa33 	bl	800274e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 80012e8:	200e      	movs	r0, #14
 80012ea:	f001 fa4c 	bl	8002786 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 80012ee:	2200      	movs	r2, #0
 80012f0:	2100      	movs	r1, #0
 80012f2:	200f      	movs	r0, #15
 80012f4:	f001 fa2b 	bl	800274e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 80012f8:	200f      	movs	r0, #15
 80012fa:	f001 fa44 	bl	8002786 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 80012fe:	2200      	movs	r2, #0
 8001300:	2100      	movs	r1, #0
 8001302:	2010      	movs	r0, #16
 8001304:	f001 fa23 	bl	800274e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8001308:	2010      	movs	r0, #16
 800130a:	f001 fa3c 	bl	8002786 <HAL_NVIC_EnableIRQ>

}
 800130e:	bf00      	nop
 8001310:	3708      	adds	r7, #8
 8001312:	46bd      	mov	sp, r7
 8001314:	bd80      	pop	{r7, pc}
 8001316:	bf00      	nop
 8001318:	40023800 	.word	0x40023800

0800131c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800131c:	b580      	push	{r7, lr}
 800131e:	b08a      	sub	sp, #40	; 0x28
 8001320:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001322:	f107 0314 	add.w	r3, r7, #20
 8001326:	2200      	movs	r2, #0
 8001328:	601a      	str	r2, [r3, #0]
 800132a:	605a      	str	r2, [r3, #4]
 800132c:	609a      	str	r2, [r3, #8]
 800132e:	60da      	str	r2, [r3, #12]
 8001330:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001332:	2300      	movs	r3, #0
 8001334:	613b      	str	r3, [r7, #16]
 8001336:	4b38      	ldr	r3, [pc, #224]	; (8001418 <MX_GPIO_Init+0xfc>)
 8001338:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800133a:	4a37      	ldr	r2, [pc, #220]	; (8001418 <MX_GPIO_Init+0xfc>)
 800133c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001340:	6313      	str	r3, [r2, #48]	; 0x30
 8001342:	4b35      	ldr	r3, [pc, #212]	; (8001418 <MX_GPIO_Init+0xfc>)
 8001344:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001346:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800134a:	613b      	str	r3, [r7, #16]
 800134c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800134e:	2300      	movs	r3, #0
 8001350:	60fb      	str	r3, [r7, #12]
 8001352:	4b31      	ldr	r3, [pc, #196]	; (8001418 <MX_GPIO_Init+0xfc>)
 8001354:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001356:	4a30      	ldr	r2, [pc, #192]	; (8001418 <MX_GPIO_Init+0xfc>)
 8001358:	f043 0304 	orr.w	r3, r3, #4
 800135c:	6313      	str	r3, [r2, #48]	; 0x30
 800135e:	4b2e      	ldr	r3, [pc, #184]	; (8001418 <MX_GPIO_Init+0xfc>)
 8001360:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001362:	f003 0304 	and.w	r3, r3, #4
 8001366:	60fb      	str	r3, [r7, #12]
 8001368:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800136a:	2300      	movs	r3, #0
 800136c:	60bb      	str	r3, [r7, #8]
 800136e:	4b2a      	ldr	r3, [pc, #168]	; (8001418 <MX_GPIO_Init+0xfc>)
 8001370:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001372:	4a29      	ldr	r2, [pc, #164]	; (8001418 <MX_GPIO_Init+0xfc>)
 8001374:	f043 0302 	orr.w	r3, r3, #2
 8001378:	6313      	str	r3, [r2, #48]	; 0x30
 800137a:	4b27      	ldr	r3, [pc, #156]	; (8001418 <MX_GPIO_Init+0xfc>)
 800137c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800137e:	f003 0302 	and.w	r3, r3, #2
 8001382:	60bb      	str	r3, [r7, #8]
 8001384:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001386:	2300      	movs	r3, #0
 8001388:	607b      	str	r3, [r7, #4]
 800138a:	4b23      	ldr	r3, [pc, #140]	; (8001418 <MX_GPIO_Init+0xfc>)
 800138c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800138e:	4a22      	ldr	r2, [pc, #136]	; (8001418 <MX_GPIO_Init+0xfc>)
 8001390:	f043 0301 	orr.w	r3, r3, #1
 8001394:	6313      	str	r3, [r2, #48]	; 0x30
 8001396:	4b20      	ldr	r3, [pc, #128]	; (8001418 <MX_GPIO_Init+0xfc>)
 8001398:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800139a:	f003 0301 	and.w	r3, r3, #1
 800139e:	607b      	str	r3, [r7, #4]
 80013a0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80013a2:	2300      	movs	r3, #0
 80013a4:	603b      	str	r3, [r7, #0]
 80013a6:	4b1c      	ldr	r3, [pc, #112]	; (8001418 <MX_GPIO_Init+0xfc>)
 80013a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013aa:	4a1b      	ldr	r2, [pc, #108]	; (8001418 <MX_GPIO_Init+0xfc>)
 80013ac:	f043 0308 	orr.w	r3, r3, #8
 80013b0:	6313      	str	r3, [r2, #48]	; 0x30
 80013b2:	4b19      	ldr	r3, [pc, #100]	; (8001418 <MX_GPIO_Init+0xfc>)
 80013b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013b6:	f003 0308 	and.w	r3, r3, #8
 80013ba:	603b      	str	r3, [r7, #0]
 80013bc:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, L_LOW_LED_Pin|L_MED_LED_Pin|L_HIGH_LED_Pin, GPIO_PIN_RESET);
 80013be:	2200      	movs	r2, #0
 80013c0:	f44f 6128 	mov.w	r1, #2688	; 0xa80
 80013c4:	4815      	ldr	r0, [pc, #84]	; (800141c <MX_GPIO_Init+0x100>)
 80013c6:	f002 f995 	bl	80036f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, R_LOW_LED_Pin|R_MED_LED_Pin|R_HIGH_LED_Pin, GPIO_PIN_RESET);
 80013ca:	2200      	movs	r2, #0
 80013cc:	2115      	movs	r1, #21
 80013ce:	4814      	ldr	r0, [pc, #80]	; (8001420 <MX_GPIO_Init+0x104>)
 80013d0:	f002 f990 	bl	80036f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : L_LOW_LED_Pin L_MED_LED_Pin L_HIGH_LED_Pin */
  GPIO_InitStruct.Pin = L_LOW_LED_Pin|L_MED_LED_Pin|L_HIGH_LED_Pin;
 80013d4:	f44f 6328 	mov.w	r3, #2688	; 0xa80
 80013d8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013da:	2301      	movs	r3, #1
 80013dc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013de:	2300      	movs	r3, #0
 80013e0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013e2:	2300      	movs	r3, #0
 80013e4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80013e6:	f107 0314 	add.w	r3, r7, #20
 80013ea:	4619      	mov	r1, r3
 80013ec:	480b      	ldr	r0, [pc, #44]	; (800141c <MX_GPIO_Init+0x100>)
 80013ee:	f001 ffe5 	bl	80033bc <HAL_GPIO_Init>

  /*Configure GPIO pins : R_LOW_LED_Pin R_MED_LED_Pin R_HIGH_LED_Pin */
  GPIO_InitStruct.Pin = R_LOW_LED_Pin|R_MED_LED_Pin|R_HIGH_LED_Pin;
 80013f2:	2315      	movs	r3, #21
 80013f4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013f6:	2301      	movs	r3, #1
 80013f8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013fa:	2300      	movs	r3, #0
 80013fc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013fe:	2300      	movs	r3, #0
 8001400:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001402:	f107 0314 	add.w	r3, r7, #20
 8001406:	4619      	mov	r1, r3
 8001408:	4805      	ldr	r0, [pc, #20]	; (8001420 <MX_GPIO_Init+0x104>)
 800140a:	f001 ffd7 	bl	80033bc <HAL_GPIO_Init>

}
 800140e:	bf00      	nop
 8001410:	3728      	adds	r7, #40	; 0x28
 8001412:	46bd      	mov	sp, r7
 8001414:	bd80      	pop	{r7, pc}
 8001416:	bf00      	nop
 8001418:	40023800 	.word	0x40023800
 800141c:	40020800 	.word	0x40020800
 8001420:	40020c00 	.word	0x40020c00

08001424 <HAL_I2SEx_TxRxHalfCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_I2SEx_TxRxHalfCpltCallback(I2S_HandleTypeDef *hi2s) {
 8001424:	b480      	push	{r7}
 8001426:	b083      	sub	sp, #12
 8001428:	af00      	add	r7, sp, #0
 800142a:	6078      	str	r0, [r7, #4]

	callback_state = 1;
 800142c:	4b04      	ldr	r3, [pc, #16]	; (8001440 <HAL_I2SEx_TxRxHalfCpltCallback+0x1c>)
 800142e:	2201      	movs	r2, #1
 8001430:	701a      	strb	r2, [r3, #0]
}
 8001432:	bf00      	nop
 8001434:	370c      	adds	r7, #12
 8001436:	46bd      	mov	sp, r7
 8001438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800143c:	4770      	bx	lr
 800143e:	bf00      	nop
 8001440:	200083b4 	.word	0x200083b4

08001444 <HAL_I2SEx_TxRxCpltCallback>:

void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s) {
 8001444:	b480      	push	{r7}
 8001446:	b083      	sub	sp, #12
 8001448:	af00      	add	r7, sp, #0
 800144a:	6078      	str	r0, [r7, #4]

	callback_state = 2;
 800144c:	4b04      	ldr	r3, [pc, #16]	; (8001460 <HAL_I2SEx_TxRxCpltCallback+0x1c>)
 800144e:	2202      	movs	r2, #2
 8001450:	701a      	strb	r2, [r3, #0]
}
 8001452:	bf00      	nop
 8001454:	370c      	adds	r7, #12
 8001456:	46bd      	mov	sp, r7
 8001458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800145c:	4770      	bx	lr
 800145e:	bf00      	nop
 8001460:	200083b4 	.word	0x200083b4

08001464 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8001464:	b580      	push	{r7, lr}
 8001466:	b082      	sub	sp, #8
 8001468:	af00      	add	r7, sp, #0
 800146a:	6078      	str	r0, [r7, #4]
	if (state==ADAPT)
 800146c:	4b0e      	ldr	r3, [pc, #56]	; (80014a8 <HAL_UART_TxCpltCallback+0x44>)
 800146e:	781b      	ldrb	r3, [r3, #0]
 8001470:	2b01      	cmp	r3, #1
 8001472:	d114      	bne.n	800149e <HAL_UART_TxCpltCallback+0x3a>
	{
		sprintf((char *)uart_buffer_tx,"&%.5f#\n",mse);	//Copy new MSE in UART buffer
 8001474:	4b0d      	ldr	r3, [pc, #52]	; (80014ac <HAL_UART_TxCpltCallback+0x48>)
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	4618      	mov	r0, r3
 800147a:	f7ff f875 	bl	8000568 <__aeabi_f2d>
 800147e:	4602      	mov	r2, r0
 8001480:	460b      	mov	r3, r1
 8001482:	490b      	ldr	r1, [pc, #44]	; (80014b0 <HAL_UART_TxCpltCallback+0x4c>)
 8001484:	480b      	ldr	r0, [pc, #44]	; (80014b4 <HAL_UART_TxCpltCallback+0x50>)
 8001486:	f006 f819 	bl	80074bc <siprintf>
		HAL_UART_Transmit_IT(&huart2, uart_buffer_tx, strlen((char *) uart_buffer_tx));
 800148a:	480a      	ldr	r0, [pc, #40]	; (80014b4 <HAL_UART_TxCpltCallback+0x50>)
 800148c:	f7fe feaa 	bl	80001e4 <strlen>
 8001490:	4603      	mov	r3, r0
 8001492:	b29b      	uxth	r3, r3
 8001494:	461a      	mov	r2, r3
 8001496:	4907      	ldr	r1, [pc, #28]	; (80014b4 <HAL_UART_TxCpltCallback+0x50>)
 8001498:	4807      	ldr	r0, [pc, #28]	; (80014b8 <HAL_UART_TxCpltCallback+0x54>)
 800149a:	f003 fe44 	bl	8005126 <HAL_UART_Transmit_IT>
	}
}
 800149e:	bf00      	nop
 80014a0:	3708      	adds	r7, #8
 80014a2:	46bd      	mov	sp, r7
 80014a4:	bd80      	pop	{r7, pc}
 80014a6:	bf00      	nop
 80014a8:	200003b0 	.word	0x200003b0
 80014ac:	200085dc 	.word	0x200085dc
 80014b0:	08009a28 	.word	0x08009a28
 80014b4:	2000a3ec 	.word	0x2000a3ec
 80014b8:	2000030c 	.word	0x2000030c

080014bc <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80014bc:	b580      	push	{r7, lr}
 80014be:	b084      	sub	sp, #16
 80014c0:	af00      	add	r7, sp, #0
 80014c2:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART2) {
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	4a1d      	ldr	r2, [pc, #116]	; (8001540 <HAL_UART_RxCpltCallback+0x84>)
 80014ca:	4293      	cmp	r3, r2
 80014cc:	d134      	bne.n	8001538 <HAL_UART_RxCpltCallback+0x7c>
		__HAL_UART_FLUSH_DRREGISTER(&huart2);
 80014ce:	4b1d      	ldr	r3, [pc, #116]	; (8001544 <HAL_UART_RxCpltCallback+0x88>)
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	685b      	ldr	r3, [r3, #4]
		if (rxByte == '#' || rxIdx >= 31)
 80014d4:	4b1c      	ldr	r3, [pc, #112]	; (8001548 <HAL_UART_RxCpltCallback+0x8c>)
 80014d6:	781b      	ldrb	r3, [r3, #0]
 80014d8:	2b23      	cmp	r3, #35	; 0x23
 80014da:	d003      	beq.n	80014e4 <HAL_UART_RxCpltCallback+0x28>
 80014dc:	4b1b      	ldr	r3, [pc, #108]	; (800154c <HAL_UART_RxCpltCallback+0x90>)
 80014de:	881b      	ldrh	r3, [r3, #0]
 80014e0:	2b1e      	cmp	r3, #30
 80014e2:	d91c      	bls.n	800151e <HAL_UART_RxCpltCallback+0x62>
		{
			uart_buffer_rx[rxIdx] = rxByte;
 80014e4:	4b19      	ldr	r3, [pc, #100]	; (800154c <HAL_UART_RxCpltCallback+0x90>)
 80014e6:	881b      	ldrh	r3, [r3, #0]
 80014e8:	461a      	mov	r2, r3
 80014ea:	4b17      	ldr	r3, [pc, #92]	; (8001548 <HAL_UART_RxCpltCallback+0x8c>)
 80014ec:	7819      	ldrb	r1, [r3, #0]
 80014ee:	4b18      	ldr	r3, [pc, #96]	; (8001550 <HAL_UART_RxCpltCallback+0x94>)
 80014f0:	5499      	strb	r1, [r3, r2]
			receiveString();
 80014f2:	f000 f82f 	bl	8001554 <receiveString>
			interpretCommand();
 80014f6:	f000 f85b 	bl	80015b0 <interpretCommand>
			for (int i = 0; i < 24; i++)
 80014fa:	2300      	movs	r3, #0
 80014fc:	60fb      	str	r3, [r7, #12]
 80014fe:	e007      	b.n	8001510 <HAL_UART_RxCpltCallback+0x54>
				uart_buffer_rx[i] = 0;
 8001500:	4a13      	ldr	r2, [pc, #76]	; (8001550 <HAL_UART_RxCpltCallback+0x94>)
 8001502:	68fb      	ldr	r3, [r7, #12]
 8001504:	4413      	add	r3, r2
 8001506:	2200      	movs	r2, #0
 8001508:	701a      	strb	r2, [r3, #0]
			for (int i = 0; i < 24; i++)
 800150a:	68fb      	ldr	r3, [r7, #12]
 800150c:	3301      	adds	r3, #1
 800150e:	60fb      	str	r3, [r7, #12]
 8001510:	68fb      	ldr	r3, [r7, #12]
 8001512:	2b17      	cmp	r3, #23
 8001514:	ddf4      	ble.n	8001500 <HAL_UART_RxCpltCallback+0x44>
			rxIdx = 0;
 8001516:	4b0d      	ldr	r3, [pc, #52]	; (800154c <HAL_UART_RxCpltCallback+0x90>)
 8001518:	2200      	movs	r2, #0
 800151a:	801a      	strh	r2, [r3, #0]
		{
			uart_buffer_rx[rxIdx] = rxByte;
			rxIdx++;
		}
	}
}
 800151c:	e00c      	b.n	8001538 <HAL_UART_RxCpltCallback+0x7c>
			uart_buffer_rx[rxIdx] = rxByte;
 800151e:	4b0b      	ldr	r3, [pc, #44]	; (800154c <HAL_UART_RxCpltCallback+0x90>)
 8001520:	881b      	ldrh	r3, [r3, #0]
 8001522:	461a      	mov	r2, r3
 8001524:	4b08      	ldr	r3, [pc, #32]	; (8001548 <HAL_UART_RxCpltCallback+0x8c>)
 8001526:	7819      	ldrb	r1, [r3, #0]
 8001528:	4b09      	ldr	r3, [pc, #36]	; (8001550 <HAL_UART_RxCpltCallback+0x94>)
 800152a:	5499      	strb	r1, [r3, r2]
			rxIdx++;
 800152c:	4b07      	ldr	r3, [pc, #28]	; (800154c <HAL_UART_RxCpltCallback+0x90>)
 800152e:	881b      	ldrh	r3, [r3, #0]
 8001530:	3301      	adds	r3, #1
 8001532:	b29a      	uxth	r2, r3
 8001534:	4b05      	ldr	r3, [pc, #20]	; (800154c <HAL_UART_RxCpltCallback+0x90>)
 8001536:	801a      	strh	r2, [r3, #0]
}
 8001538:	bf00      	nop
 800153a:	3710      	adds	r7, #16
 800153c:	46bd      	mov	sp, r7
 800153e:	bd80      	pop	{r7, pc}
 8001540:	40004400 	.word	0x40004400
 8001544:	2000030c 	.word	0x2000030c
 8001548:	2000a41d 	.word	0x2000a41d
 800154c:	2000a41e 	.word	0x2000a41e
 8001550:	2000a3fc 	.word	0x2000a3fc

08001554 <receiveString>:

void receiveString()
{
 8001554:	b580      	push	{r7, lr}
 8001556:	b084      	sub	sp, #16
 8001558:	af02      	add	r7, sp, #8
	char *p1, *p2;
	p1 = strstr((char*)uart_buffer_rx, "%");
 800155a:	2125      	movs	r1, #37	; 0x25
 800155c:	4811      	ldr	r0, [pc, #68]	; (80015a4 <receiveString+0x50>)
 800155e:	f005 ffcd 	bl	80074fc <strchr>
 8001562:	6078      	str	r0, [r7, #4]
	if (p1) {
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	2b00      	cmp	r3, #0
 8001568:	d018      	beq.n	800159c <receiveString+0x48>
		p2 = strstr(p1, "#");
 800156a:	2123      	movs	r1, #35	; 0x23
 800156c:	6878      	ldr	r0, [r7, #4]
 800156e:	f005 ffc5 	bl	80074fc <strchr>
 8001572:	6038      	str	r0, [r7, #0]
		if (p2)
 8001574:	683b      	ldr	r3, [r7, #0]
 8001576:	2b00      	cmp	r3, #0
 8001578:	d010      	beq.n	800159c <receiveString+0x48>
			snprintf((char*)received_command, p2 - p1 + 1, "%.*s", (int) (p2 - p1 - 1), (p1 + 1));
 800157a:	683a      	ldr	r2, [r7, #0]
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	1ad3      	subs	r3, r2, r3
 8001580:	3301      	adds	r3, #1
 8001582:	4619      	mov	r1, r3
 8001584:	683a      	ldr	r2, [r7, #0]
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	1ad3      	subs	r3, r2, r3
 800158a:	1e5a      	subs	r2, r3, #1
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	3301      	adds	r3, #1
 8001590:	9300      	str	r3, [sp, #0]
 8001592:	4613      	mov	r3, r2
 8001594:	4a04      	ldr	r2, [pc, #16]	; (80015a8 <receiveString+0x54>)
 8001596:	4805      	ldr	r0, [pc, #20]	; (80015ac <receiveString+0x58>)
 8001598:	f005 ff5c 	bl	8007454 <sniprintf>
	}
}
 800159c:	bf00      	nop
 800159e:	3708      	adds	r7, #8
 80015a0:	46bd      	mov	sp, r7
 80015a2:	bd80      	pop	{r7, pc}
 80015a4:	2000a3fc 	.word	0x2000a3fc
 80015a8:	08009a30 	.word	0x08009a30
 80015ac:	2000a41c 	.word	0x2000a41c

080015b0 <interpretCommand>:

void interpretCommand()
{
 80015b0:	b580      	push	{r7, lr}
 80015b2:	af00      	add	r7, sp, #0
    if (strcmp((char*)received_command,"ST")==0)
 80015b4:	4928      	ldr	r1, [pc, #160]	; (8001658 <interpretCommand+0xa8>)
 80015b6:	4829      	ldr	r0, [pc, #164]	; (800165c <interpretCommand+0xac>)
 80015b8:	f7fe fe0a 	bl	80001d0 <strcmp>
 80015bc:	4603      	mov	r3, r0
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d103      	bne.n	80015ca <interpretCommand+0x1a>
    {
    	state=STOP;
 80015c2:	4b27      	ldr	r3, [pc, #156]	; (8001660 <interpretCommand+0xb0>)
 80015c4:	2200      	movs	r2, #0
 80015c6:	701a      	strb	r2, [r3, #0]
    }
    else if (strcmp((char*)received_command,"LB")==0)
	{
		state=LOOPBACK;
	}
}
 80015c8:	e044      	b.n	8001654 <interpretCommand+0xa4>
    else if (strcmp((char*)received_command,"AF")==0)
 80015ca:	4926      	ldr	r1, [pc, #152]	; (8001664 <interpretCommand+0xb4>)
 80015cc:	4823      	ldr	r0, [pc, #140]	; (800165c <interpretCommand+0xac>)
 80015ce:	f7fe fdff 	bl	80001d0 <strcmp>
 80015d2:	4603      	mov	r3, r0
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	d108      	bne.n	80015ea <interpretCommand+0x3a>
    	mu=0.001f;
 80015d8:	4b23      	ldr	r3, [pc, #140]	; (8001668 <interpretCommand+0xb8>)
 80015da:	4a24      	ldr	r2, [pc, #144]	; (800166c <interpretCommand+0xbc>)
 80015dc:	601a      	str	r2, [r3, #0]
    	AdaptInit();
 80015de:	f000 f853 	bl	8001688 <AdaptInit>
    	state=ADAPT;
 80015e2:	4b1f      	ldr	r3, [pc, #124]	; (8001660 <interpretCommand+0xb0>)
 80015e4:	2201      	movs	r2, #1
 80015e6:	701a      	strb	r2, [r3, #0]
}
 80015e8:	e034      	b.n	8001654 <interpretCommand+0xa4>
    else if (strcmp((char*)received_command,"AS")==0)
 80015ea:	4921      	ldr	r1, [pc, #132]	; (8001670 <interpretCommand+0xc0>)
 80015ec:	481b      	ldr	r0, [pc, #108]	; (800165c <interpretCommand+0xac>)
 80015ee:	f7fe fdef 	bl	80001d0 <strcmp>
 80015f2:	4603      	mov	r3, r0
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	d108      	bne.n	800160a <interpretCommand+0x5a>
    	mu=0.0001f;
 80015f8:	4b1b      	ldr	r3, [pc, #108]	; (8001668 <interpretCommand+0xb8>)
 80015fa:	4a1e      	ldr	r2, [pc, #120]	; (8001674 <interpretCommand+0xc4>)
 80015fc:	601a      	str	r2, [r3, #0]
		AdaptInit();
 80015fe:	f000 f843 	bl	8001688 <AdaptInit>
		state=ADAPT;
 8001602:	4b17      	ldr	r3, [pc, #92]	; (8001660 <interpretCommand+0xb0>)
 8001604:	2201      	movs	r2, #1
 8001606:	701a      	strb	r2, [r3, #0]
}
 8001608:	e024      	b.n	8001654 <interpretCommand+0xa4>
    else if (strcmp((char*)received_command,"SV")==0)
 800160a:	491b      	ldr	r1, [pc, #108]	; (8001678 <interpretCommand+0xc8>)
 800160c:	4813      	ldr	r0, [pc, #76]	; (800165c <interpretCommand+0xac>)
 800160e:	f7fe fddf 	bl	80001d0 <strcmp>
 8001612:	4603      	mov	r3, r0
 8001614:	2b00      	cmp	r3, #0
 8001616:	d106      	bne.n	8001626 <interpretCommand+0x76>
    	MY_FLASH_WriteN(0, filter_taps, FILTER_TAP_NUM, DATA_TYPE_32);
 8001618:	2302      	movs	r3, #2
 800161a:	2280      	movs	r2, #128	; 0x80
 800161c:	4917      	ldr	r1, [pc, #92]	; (800167c <interpretCommand+0xcc>)
 800161e:	2000      	movs	r0, #0
 8001620:	f7ff fc7a 	bl	8000f18 <MY_FLASH_WriteN>
}
 8001624:	e016      	b.n	8001654 <interpretCommand+0xa4>
    else if (strcmp((char*)received_command,"FI")==0)
 8001626:	4916      	ldr	r1, [pc, #88]	; (8001680 <interpretCommand+0xd0>)
 8001628:	480c      	ldr	r0, [pc, #48]	; (800165c <interpretCommand+0xac>)
 800162a:	f7fe fdd1 	bl	80001d0 <strcmp>
 800162e:	4603      	mov	r3, r0
 8001630:	2b00      	cmp	r3, #0
 8001632:	d105      	bne.n	8001640 <interpretCommand+0x90>
    	state=FILTER;
 8001634:	4b0a      	ldr	r3, [pc, #40]	; (8001660 <interpretCommand+0xb0>)
 8001636:	2202      	movs	r2, #2
 8001638:	701a      	strb	r2, [r3, #0]
    	FilterInit();
 800163a:	f000 f873 	bl	8001724 <FilterInit>
}
 800163e:	e009      	b.n	8001654 <interpretCommand+0xa4>
    else if (strcmp((char*)received_command,"LB")==0)
 8001640:	4910      	ldr	r1, [pc, #64]	; (8001684 <interpretCommand+0xd4>)
 8001642:	4806      	ldr	r0, [pc, #24]	; (800165c <interpretCommand+0xac>)
 8001644:	f7fe fdc4 	bl	80001d0 <strcmp>
 8001648:	4603      	mov	r3, r0
 800164a:	2b00      	cmp	r3, #0
 800164c:	d102      	bne.n	8001654 <interpretCommand+0xa4>
		state=LOOPBACK;
 800164e:	4b04      	ldr	r3, [pc, #16]	; (8001660 <interpretCommand+0xb0>)
 8001650:	2203      	movs	r2, #3
 8001652:	701a      	strb	r2, [r3, #0]
}
 8001654:	bf00      	nop
 8001656:	bd80      	pop	{r7, pc}
 8001658:	08009a38 	.word	0x08009a38
 800165c:	2000a41c 	.word	0x2000a41c
 8001660:	200003b0 	.word	0x200003b0
 8001664:	08009a3c 	.word	0x08009a3c
 8001668:	20000000 	.word	0x20000000
 800166c:	3a83126f 	.word	0x3a83126f
 8001670:	08009a40 	.word	0x08009a40
 8001674:	38d1b717 	.word	0x38d1b717
 8001678:	08009a44 	.word	0x08009a44
 800167c:	200083c4 	.word	0x200083c4
 8001680:	08009a48 	.word	0x08009a48
 8001684:	08009a4c 	.word	0x08009a4c

08001688 <AdaptInit>:

void AdaptInit()
{
 8001688:	b580      	push	{r7, lr}
 800168a:	b084      	sub	sp, #16
 800168c:	af02      	add	r7, sp, #8
	mse=0;
 800168e:	4b1d      	ldr	r3, [pc, #116]	; (8001704 <AdaptInit+0x7c>)
 8001690:	f04f 0200 	mov.w	r2, #0
 8001694:	601a      	str	r2, [r3, #0]

	for (int i=0; i<FILTER_TAP_NUM; i++)
 8001696:	2300      	movs	r3, #0
 8001698:	607b      	str	r3, [r7, #4]
 800169a:	e009      	b.n	80016b0 <AdaptInit+0x28>
	{
		filter_taps[i]=0;
 800169c:	4a1a      	ldr	r2, [pc, #104]	; (8001708 <AdaptInit+0x80>)
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	009b      	lsls	r3, r3, #2
 80016a2:	4413      	add	r3, r2
 80016a4:	f04f 0200 	mov.w	r2, #0
 80016a8:	601a      	str	r2, [r3, #0]
	for (int i=0; i<FILTER_TAP_NUM; i++)
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	3301      	adds	r3, #1
 80016ae:	607b      	str	r3, [r7, #4]
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	2b7f      	cmp	r3, #127	; 0x7f
 80016b4:	ddf2      	ble.n	800169c <AdaptInit+0x14>
	}

	//Init adaptive filter structure
	arm_lms_norm_init_f32(&adaptive_filter, FILTER_TAP_NUM, &filter_taps[0], &filter_state[0], mu, BLOCK_SIZE_FLOAT);
 80016b6:	4b15      	ldr	r3, [pc, #84]	; (800170c <AdaptInit+0x84>)
 80016b8:	edd3 7a00 	vldr	s15, [r3]
 80016bc:	f44f 7300 	mov.w	r3, #512	; 0x200
 80016c0:	9300      	str	r3, [sp, #0]
 80016c2:	eeb0 0a67 	vmov.f32	s0, s15
 80016c6:	4b12      	ldr	r3, [pc, #72]	; (8001710 <AdaptInit+0x88>)
 80016c8:	4a0f      	ldr	r2, [pc, #60]	; (8001708 <AdaptInit+0x80>)
 80016ca:	2180      	movs	r1, #128	; 0x80
 80016cc:	4811      	ldr	r0, [pc, #68]	; (8001714 <AdaptInit+0x8c>)
 80016ce:	f004 fe6f 	bl	80063b0 <arm_lms_norm_init_f32>

	//Initiate MSE transmission
	sprintf((char *)uart_buffer_tx,"&%.5f#\n",mse);
 80016d2:	4b0c      	ldr	r3, [pc, #48]	; (8001704 <AdaptInit+0x7c>)
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	4618      	mov	r0, r3
 80016d8:	f7fe ff46 	bl	8000568 <__aeabi_f2d>
 80016dc:	4602      	mov	r2, r0
 80016de:	460b      	mov	r3, r1
 80016e0:	490d      	ldr	r1, [pc, #52]	; (8001718 <AdaptInit+0x90>)
 80016e2:	480e      	ldr	r0, [pc, #56]	; (800171c <AdaptInit+0x94>)
 80016e4:	f005 feea 	bl	80074bc <siprintf>
	HAL_UART_Transmit_IT(&huart2, uart_buffer_tx, strlen((char *) uart_buffer_tx));
 80016e8:	480c      	ldr	r0, [pc, #48]	; (800171c <AdaptInit+0x94>)
 80016ea:	f7fe fd7b 	bl	80001e4 <strlen>
 80016ee:	4603      	mov	r3, r0
 80016f0:	b29b      	uxth	r3, r3
 80016f2:	461a      	mov	r2, r3
 80016f4:	4909      	ldr	r1, [pc, #36]	; (800171c <AdaptInit+0x94>)
 80016f6:	480a      	ldr	r0, [pc, #40]	; (8001720 <AdaptInit+0x98>)
 80016f8:	f003 fd15 	bl	8005126 <HAL_UART_Transmit_IT>
}
 80016fc:	bf00      	nop
 80016fe:	3708      	adds	r7, #8
 8001700:	46bd      	mov	sp, r7
 8001702:	bd80      	pop	{r7, pc}
 8001704:	200085dc 	.word	0x200085dc
 8001708:	200083c4 	.word	0x200083c4
 800170c:	20000000 	.word	0x20000000
 8001710:	200085e0 	.word	0x200085e0
 8001714:	200085c4 	.word	0x200085c4
 8001718:	08009a28 	.word	0x08009a28
 800171c:	2000a3ec 	.word	0x2000a3ec
 8001720:	2000030c 	.word	0x2000030c

08001724 <FilterInit>:

void FilterInit()
{
 8001724:	b580      	push	{r7, lr}
 8001726:	b082      	sub	sp, #8
 8001728:	af02      	add	r7, sp, #8
	//Read filter stored value
	MY_FLASH_ReadN(0, filter_taps, FILTER_TAP_NUM, DATA_TYPE_32);
 800172a:	2302      	movs	r3, #2
 800172c:	2280      	movs	r2, #128	; 0x80
 800172e:	490c      	ldr	r1, [pc, #48]	; (8001760 <FilterInit+0x3c>)
 8001730:	2000      	movs	r0, #0
 8001732:	f7ff fc6b 	bl	800100c <MY_FLASH_ReadN>

	//Init FIR structure
	arm_fir_init_f32(&firsettings_l, FILTER_TAP_NUM, &filter_taps[0], &fir_l_state[0], BLOCK_SIZE_FLOAT);
 8001736:	f44f 7300 	mov.w	r3, #512	; 0x200
 800173a:	9300      	str	r3, [sp, #0]
 800173c:	4b09      	ldr	r3, [pc, #36]	; (8001764 <FilterInit+0x40>)
 800173e:	4a08      	ldr	r2, [pc, #32]	; (8001760 <FilterInit+0x3c>)
 8001740:	2180      	movs	r1, #128	; 0x80
 8001742:	4809      	ldr	r0, [pc, #36]	; (8001768 <FilterInit+0x44>)
 8001744:	f004 ff74 	bl	8006630 <arm_fir_init_f32>
	arm_fir_init_f32(&firsettings_r, FILTER_TAP_NUM, &filter_taps[0], &fir_r_state[0], BLOCK_SIZE_FLOAT);
 8001748:	f44f 7300 	mov.w	r3, #512	; 0x200
 800174c:	9300      	str	r3, [sp, #0]
 800174e:	4b07      	ldr	r3, [pc, #28]	; (800176c <FilterInit+0x48>)
 8001750:	4a03      	ldr	r2, [pc, #12]	; (8001760 <FilterInit+0x3c>)
 8001752:	2180      	movs	r1, #128	; 0x80
 8001754:	4806      	ldr	r0, [pc, #24]	; (8001770 <FilterInit+0x4c>)
 8001756:	f004 ff6b 	bl	8006630 <arm_fir_init_f32>
}
 800175a:	bf00      	nop
 800175c:	46bd      	mov	sp, r7
 800175e:	bd80      	pop	{r7, pc}
 8001760:	200083c4 	.word	0x200083c4
 8001764:	20008ff4 	.word	0x20008ff4
 8001768:	20008fdc 	.word	0x20008fdc
 800176c:	200099f0 	.word	0x200099f0
 8001770:	20008fe8 	.word	0x20008fe8

08001774 <AudioProcess>:

void AudioProcess()
{
 8001774:	b580      	push	{r7, lr}
 8001776:	b082      	sub	sp, #8
 8001778:	af00      	add	r7, sp, #0
	//Decide if it was half or cplt callback
	if (callback_state == 1)	//First half of the buffer
 800177a:	4b8c      	ldr	r3, [pc, #560]	; (80019ac <AudioProcess+0x238>)
 800177c:	781b      	ldrb	r3, [r3, #0]
 800177e:	2b01      	cmp	r3, #1
 8001780:	d109      	bne.n	8001796 <AudioProcess+0x22>
	{
		offset_r_ptr = 0;
 8001782:	4b8b      	ldr	r3, [pc, #556]	; (80019b0 <AudioProcess+0x23c>)
 8001784:	2200      	movs	r2, #0
 8001786:	601a      	str	r2, [r3, #0]
		offset_w_ptr = 0;
 8001788:	4b8a      	ldr	r3, [pc, #552]	; (80019b4 <AudioProcess+0x240>)
 800178a:	2200      	movs	r2, #0
 800178c:	601a      	str	r2, [r3, #0]
		w_ptr = 0;
 800178e:	4b8a      	ldr	r3, [pc, #552]	; (80019b8 <AudioProcess+0x244>)
 8001790:	2200      	movs	r2, #0
 8001792:	601a      	str	r2, [r3, #0]
 8001794:	e00f      	b.n	80017b6 <AudioProcess+0x42>
	}
	else if (callback_state == 2) 	//Second half of the buffer
 8001796:	4b85      	ldr	r3, [pc, #532]	; (80019ac <AudioProcess+0x238>)
 8001798:	781b      	ldrb	r3, [r3, #0]
 800179a:	2b02      	cmp	r3, #2
 800179c:	d10b      	bne.n	80017b6 <AudioProcess+0x42>
	{
		offset_r_ptr = BLOCK_SIZE_U16;
 800179e:	4b84      	ldr	r3, [pc, #528]	; (80019b0 <AudioProcess+0x23c>)
 80017a0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80017a4:	601a      	str	r2, [r3, #0]
		offset_w_ptr = BLOCK_SIZE_FLOAT;
 80017a6:	4b83      	ldr	r3, [pc, #524]	; (80019b4 <AudioProcess+0x240>)
 80017a8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80017ac:	601a      	str	r2, [r3, #0]
		w_ptr = BLOCK_SIZE_FLOAT;
 80017ae:	4b82      	ldr	r3, [pc, #520]	; (80019b8 <AudioProcess+0x244>)
 80017b0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80017b4:	601a      	str	r2, [r3, #0]
	}

	//Restore input sample buffer to float array
	for (int i = offset_r_ptr; i < offset_r_ptr + BLOCK_SIZE_U16; i = i + 4)
 80017b6:	4b7e      	ldr	r3, [pc, #504]	; (80019b0 <AudioProcess+0x23c>)
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	607b      	str	r3, [r7, #4]
 80017bc:	e03c      	b.n	8001838 <AudioProcess+0xc4>
	{
		l_buf_in[w_ptr] = ((float) ((int) (rxBuf[i] << 16) | rxBuf[i + 1]))/CONST_MAX_INT;
 80017be:	4a7f      	ldr	r2, [pc, #508]	; (80019bc <AudioProcess+0x248>)
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80017c6:	041b      	lsls	r3, r3, #16
 80017c8:	687a      	ldr	r2, [r7, #4]
 80017ca:	3201      	adds	r2, #1
 80017cc:	497b      	ldr	r1, [pc, #492]	; (80019bc <AudioProcess+0x248>)
 80017ce:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 80017d2:	4313      	orrs	r3, r2
 80017d4:	ee07 3a90 	vmov	s15, r3
 80017d8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80017dc:	4b76      	ldr	r3, [pc, #472]	; (80019b8 <AudioProcess+0x244>)
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	eddf 6a77 	vldr	s13, [pc, #476]	; 80019c0 <AudioProcess+0x24c>
 80017e4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80017e8:	4a76      	ldr	r2, [pc, #472]	; (80019c4 <AudioProcess+0x250>)
 80017ea:	009b      	lsls	r3, r3, #2
 80017ec:	4413      	add	r3, r2
 80017ee:	edc3 7a00 	vstr	s15, [r3]
		r_buf_in[w_ptr] = ((float) ((int) (rxBuf[i + 2] << 16) | rxBuf[i + 3]))/CONST_MAX_INT;
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	3302      	adds	r3, #2
 80017f6:	4a71      	ldr	r2, [pc, #452]	; (80019bc <AudioProcess+0x248>)
 80017f8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80017fc:	041b      	lsls	r3, r3, #16
 80017fe:	687a      	ldr	r2, [r7, #4]
 8001800:	3203      	adds	r2, #3
 8001802:	496e      	ldr	r1, [pc, #440]	; (80019bc <AudioProcess+0x248>)
 8001804:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 8001808:	4313      	orrs	r3, r2
 800180a:	ee07 3a90 	vmov	s15, r3
 800180e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001812:	4b69      	ldr	r3, [pc, #420]	; (80019b8 <AudioProcess+0x244>)
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	eddf 6a6a 	vldr	s13, [pc, #424]	; 80019c0 <AudioProcess+0x24c>
 800181a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800181e:	4a6a      	ldr	r2, [pc, #424]	; (80019c8 <AudioProcess+0x254>)
 8001820:	009b      	lsls	r3, r3, #2
 8001822:	4413      	add	r3, r2
 8001824:	edc3 7a00 	vstr	s15, [r3]
		w_ptr++;
 8001828:	4b63      	ldr	r3, [pc, #396]	; (80019b8 <AudioProcess+0x244>)
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	3301      	adds	r3, #1
 800182e:	4a62      	ldr	r2, [pc, #392]	; (80019b8 <AudioProcess+0x244>)
 8001830:	6013      	str	r3, [r2, #0]
	for (int i = offset_r_ptr; i < offset_r_ptr + BLOCK_SIZE_U16; i = i + 4)
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	3304      	adds	r3, #4
 8001836:	607b      	str	r3, [r7, #4]
 8001838:	4b5d      	ldr	r3, [pc, #372]	; (80019b0 <AudioProcess+0x23c>)
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	f203 73ff 	addw	r3, r3, #2047	; 0x7ff
 8001840:	687a      	ldr	r2, [r7, #4]
 8001842:	429a      	cmp	r2, r3
 8001844:	ddbb      	ble.n	80017be <AudioProcess+0x4a>
	}

	vumeterR();
 8001846:	f000 f9c3 	bl	8001bd0 <vumeterR>
	vumeterL();
 800184a:	f000 fa65 	bl	8001d18 <vumeterL>
	arm_rms_f32 (&l_buf_in[offset_w_ptr], BLOCK_SIZE_FLOAT, &rms_test);
 800184e:	4b59      	ldr	r3, [pc, #356]	; (80019b4 <AudioProcess+0x240>)
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	009b      	lsls	r3, r3, #2
 8001854:	4a5b      	ldr	r2, [pc, #364]	; (80019c4 <AudioProcess+0x250>)
 8001856:	4413      	add	r3, r2
 8001858:	4a5c      	ldr	r2, [pc, #368]	; (80019cc <AudioProcess+0x258>)
 800185a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800185e:	4618      	mov	r0, r3
 8001860:	f004 fd50 	bl	8006304 <arm_rms_f32>

	switch (state)
 8001864:	4b5a      	ldr	r3, [pc, #360]	; (80019d0 <AudioProcess+0x25c>)
 8001866:	781b      	ldrb	r3, [r3, #0]
 8001868:	2b03      	cmp	r3, #3
 800186a:	d817      	bhi.n	800189c <AudioProcess+0x128>
 800186c:	a201      	add	r2, pc, #4	; (adr r2, 8001874 <AudioProcess+0x100>)
 800186e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001872:	bf00      	nop
 8001874:	08001885 	.word	0x08001885
 8001878:	0800188b 	.word	0x0800188b
 800187c:	08001891 	.word	0x08001891
 8001880:	08001897 	.word	0x08001897
	{
	case STOP: Stop();
 8001884:	f000 f8ac 	bl	80019e0 <Stop>
		break;
 8001888:	e009      	b.n	800189e <AudioProcess+0x12a>
	case ADAPT:	Adapt();
 800188a:	f000 f8d5 	bl	8001a38 <Adapt>
		break;
 800188e:	e006      	b.n	800189e <AudioProcess+0x12a>
	case FILTER: Filter();
 8001890:	f000 f938 	bl	8001b04 <Filter>
		break;
 8001894:	e003      	b.n	800189e <AudioProcess+0x12a>
	case LOOPBACK: Loopback();
 8001896:	f000 f965 	bl	8001b64 <Loopback>
		break;
 800189a:	e000      	b.n	800189e <AudioProcess+0x12a>
	default:
		break;
 800189c:	bf00      	nop
	}

	//Restore processed float-array to output sample-buffer
	w_ptr = offset_w_ptr;
 800189e:	4b45      	ldr	r3, [pc, #276]	; (80019b4 <AudioProcess+0x240>)
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	4a45      	ldr	r2, [pc, #276]	; (80019b8 <AudioProcess+0x244>)
 80018a4:	6013      	str	r3, [r2, #0]

	//Write I2S output buffer
	for (int i = offset_r_ptr; i < offset_r_ptr + BLOCK_SIZE_U16; i = i + 4)
 80018a6:	4b42      	ldr	r3, [pc, #264]	; (80019b0 <AudioProcess+0x23c>)
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	603b      	str	r3, [r7, #0]
 80018ac:	e070      	b.n	8001990 <AudioProcess+0x21c>
	{
		l_buf_out[w_ptr]=l_buf_out[w_ptr]*CONST_MAX_INT;
 80018ae:	4b42      	ldr	r3, [pc, #264]	; (80019b8 <AudioProcess+0x244>)
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	4a48      	ldr	r2, [pc, #288]	; (80019d4 <AudioProcess+0x260>)
 80018b4:	009b      	lsls	r3, r3, #2
 80018b6:	4413      	add	r3, r2
 80018b8:	edd3 7a00 	vldr	s15, [r3]
 80018bc:	4b3e      	ldr	r3, [pc, #248]	; (80019b8 <AudioProcess+0x244>)
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	ed9f 7a3f 	vldr	s14, [pc, #252]	; 80019c0 <AudioProcess+0x24c>
 80018c4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80018c8:	4a42      	ldr	r2, [pc, #264]	; (80019d4 <AudioProcess+0x260>)
 80018ca:	009b      	lsls	r3, r3, #2
 80018cc:	4413      	add	r3, r2
 80018ce:	edc3 7a00 	vstr	s15, [r3]
		r_buf_out[w_ptr]=r_buf_out[w_ptr]*CONST_MAX_INT;
 80018d2:	4b39      	ldr	r3, [pc, #228]	; (80019b8 <AudioProcess+0x244>)
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	4a40      	ldr	r2, [pc, #256]	; (80019d8 <AudioProcess+0x264>)
 80018d8:	009b      	lsls	r3, r3, #2
 80018da:	4413      	add	r3, r2
 80018dc:	edd3 7a00 	vldr	s15, [r3]
 80018e0:	4b35      	ldr	r3, [pc, #212]	; (80019b8 <AudioProcess+0x244>)
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	ed9f 7a36 	vldr	s14, [pc, #216]	; 80019c0 <AudioProcess+0x24c>
 80018e8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80018ec:	4a3a      	ldr	r2, [pc, #232]	; (80019d8 <AudioProcess+0x264>)
 80018ee:	009b      	lsls	r3, r3, #2
 80018f0:	4413      	add	r3, r2
 80018f2:	edc3 7a00 	vstr	s15, [r3]

		txBuf[i] = (((int) l_buf_out[w_ptr]) >> 16) & 0xFFFF;
 80018f6:	4b30      	ldr	r3, [pc, #192]	; (80019b8 <AudioProcess+0x244>)
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	4a36      	ldr	r2, [pc, #216]	; (80019d4 <AudioProcess+0x260>)
 80018fc:	009b      	lsls	r3, r3, #2
 80018fe:	4413      	add	r3, r2
 8001900:	edd3 7a00 	vldr	s15, [r3]
 8001904:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001908:	ee17 3a90 	vmov	r3, s15
 800190c:	0c1b      	lsrs	r3, r3, #16
 800190e:	b299      	uxth	r1, r3
 8001910:	4a32      	ldr	r2, [pc, #200]	; (80019dc <AudioProcess+0x268>)
 8001912:	683b      	ldr	r3, [r7, #0]
 8001914:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		txBuf[i + 1] = ((int) l_buf_out[w_ptr]) & 0xFFFF;
 8001918:	4b27      	ldr	r3, [pc, #156]	; (80019b8 <AudioProcess+0x244>)
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	4a2d      	ldr	r2, [pc, #180]	; (80019d4 <AudioProcess+0x260>)
 800191e:	009b      	lsls	r3, r3, #2
 8001920:	4413      	add	r3, r2
 8001922:	edd3 7a00 	vldr	s15, [r3]
 8001926:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800192a:	683b      	ldr	r3, [r7, #0]
 800192c:	3301      	adds	r3, #1
 800192e:	ee17 2a90 	vmov	r2, s15
 8001932:	b291      	uxth	r1, r2
 8001934:	4a29      	ldr	r2, [pc, #164]	; (80019dc <AudioProcess+0x268>)
 8001936:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		txBuf[i + 2] = (((int) r_buf_out[w_ptr]) >> 16) & 0xFFFF;
 800193a:	4b1f      	ldr	r3, [pc, #124]	; (80019b8 <AudioProcess+0x244>)
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	4a26      	ldr	r2, [pc, #152]	; (80019d8 <AudioProcess+0x264>)
 8001940:	009b      	lsls	r3, r3, #2
 8001942:	4413      	add	r3, r2
 8001944:	edd3 7a00 	vldr	s15, [r3]
 8001948:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800194c:	ee17 3a90 	vmov	r3, s15
 8001950:	0c1a      	lsrs	r2, r3, #16
 8001952:	683b      	ldr	r3, [r7, #0]
 8001954:	3302      	adds	r3, #2
 8001956:	b291      	uxth	r1, r2
 8001958:	4a20      	ldr	r2, [pc, #128]	; (80019dc <AudioProcess+0x268>)
 800195a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		txBuf[i + 3] = ((int) r_buf_out[w_ptr]) & 0xFFFF;
 800195e:	4b16      	ldr	r3, [pc, #88]	; (80019b8 <AudioProcess+0x244>)
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	4a1d      	ldr	r2, [pc, #116]	; (80019d8 <AudioProcess+0x264>)
 8001964:	009b      	lsls	r3, r3, #2
 8001966:	4413      	add	r3, r2
 8001968:	edd3 7a00 	vldr	s15, [r3]
 800196c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001970:	683b      	ldr	r3, [r7, #0]
 8001972:	3303      	adds	r3, #3
 8001974:	ee17 2a90 	vmov	r2, s15
 8001978:	b291      	uxth	r1, r2
 800197a:	4a18      	ldr	r2, [pc, #96]	; (80019dc <AudioProcess+0x268>)
 800197c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		w_ptr++;
 8001980:	4b0d      	ldr	r3, [pc, #52]	; (80019b8 <AudioProcess+0x244>)
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	3301      	adds	r3, #1
 8001986:	4a0c      	ldr	r2, [pc, #48]	; (80019b8 <AudioProcess+0x244>)
 8001988:	6013      	str	r3, [r2, #0]
	for (int i = offset_r_ptr; i < offset_r_ptr + BLOCK_SIZE_U16; i = i + 4)
 800198a:	683b      	ldr	r3, [r7, #0]
 800198c:	3304      	adds	r3, #4
 800198e:	603b      	str	r3, [r7, #0]
 8001990:	4b07      	ldr	r3, [pc, #28]	; (80019b0 <AudioProcess+0x23c>)
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	f203 73ff 	addw	r3, r3, #2047	; 0x7ff
 8001998:	683a      	ldr	r2, [r7, #0]
 800199a:	429a      	cmp	r2, r3
 800199c:	dd87      	ble.n	80018ae <AudioProcess+0x13a>
	}

	callback_state = 0;
 800199e:	4b03      	ldr	r3, [pc, #12]	; (80019ac <AudioProcess+0x238>)
 80019a0:	2200      	movs	r2, #0
 80019a2:	701a      	strb	r2, [r3, #0]
}
 80019a4:	bf00      	nop
 80019a6:	3708      	adds	r7, #8
 80019a8:	46bd      	mov	sp, r7
 80019aa:	bd80      	pop	{r7, pc}
 80019ac:	200083b4 	.word	0x200083b4
 80019b0:	200083b8 	.word	0x200083b8
 80019b4:	200083bc 	.word	0x200083bc
 80019b8:	200083c0 	.word	0x200083c0
 80019bc:	200003b4 	.word	0x200003b4
 80019c0:	4f000000 	.word	0x4f000000
 80019c4:	200043b4 	.word	0x200043b4
 80019c8:	200053b4 	.word	0x200053b4
 80019cc:	2000a420 	.word	0x2000a420
 80019d0:	200003b0 	.word	0x200003b0
 80019d4:	200063b4 	.word	0x200063b4
 80019d8:	200073b4 	.word	0x200073b4
 80019dc:	200023b4 	.word	0x200023b4

080019e0 <Stop>:

void Stop()
{
 80019e0:	b480      	push	{r7}
 80019e2:	b083      	sub	sp, #12
 80019e4:	af00      	add	r7, sp, #0
	for (int i=offset_w_ptr; i<offset_w_ptr+BLOCK_SIZE_FLOAT; i=i+1)
 80019e6:	4b11      	ldr	r3, [pc, #68]	; (8001a2c <Stop+0x4c>)
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	607b      	str	r3, [r7, #4]
 80019ec:	e010      	b.n	8001a10 <Stop+0x30>
		{
			l_buf_out[i]=0;
 80019ee:	4a10      	ldr	r2, [pc, #64]	; (8001a30 <Stop+0x50>)
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	009b      	lsls	r3, r3, #2
 80019f4:	4413      	add	r3, r2
 80019f6:	f04f 0200 	mov.w	r2, #0
 80019fa:	601a      	str	r2, [r3, #0]
			r_buf_out[i]=0;
 80019fc:	4a0d      	ldr	r2, [pc, #52]	; (8001a34 <Stop+0x54>)
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	009b      	lsls	r3, r3, #2
 8001a02:	4413      	add	r3, r2
 8001a04:	f04f 0200 	mov.w	r2, #0
 8001a08:	601a      	str	r2, [r3, #0]
	for (int i=offset_w_ptr; i<offset_w_ptr+BLOCK_SIZE_FLOAT; i=i+1)
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	3301      	adds	r3, #1
 8001a0e:	607b      	str	r3, [r7, #4]
 8001a10:	4b06      	ldr	r3, [pc, #24]	; (8001a2c <Stop+0x4c>)
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8001a18:	687a      	ldr	r2, [r7, #4]
 8001a1a:	429a      	cmp	r2, r3
 8001a1c:	dde7      	ble.n	80019ee <Stop+0xe>
		}
}
 8001a1e:	bf00      	nop
 8001a20:	bf00      	nop
 8001a22:	370c      	adds	r7, #12
 8001a24:	46bd      	mov	sp, r7
 8001a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a2a:	4770      	bx	lr
 8001a2c:	200083bc 	.word	0x200083bc
 8001a30:	200063b4 	.word	0x200063b4
 8001a34:	200073b4 	.word	0x200073b4

08001a38 <Adapt>:

void Adapt()
{
 8001a38:	b590      	push	{r4, r7, lr}
 8001a3a:	b085      	sub	sp, #20
 8001a3c:	af02      	add	r7, sp, #8
	//right Out --> output signal (y)
	//left Out  --> error signal (e)

	//arm_lms_f32 (const arm_lms_instance_f32 *S, const float32_t *pSrc, float32_t *pRef, float32_t *pOut, float32_t *pErr, uint32_t blockSize)

	arm_lms_norm_f32(&adaptive_filter, &r_buf_in[offset_w_ptr], &l_buf_in[offset_w_ptr], &r_buf_out[offset_w_ptr], &l_buf_out[offset_w_ptr], BLOCK_SIZE_FLOAT);
 8001a3e:	4b29      	ldr	r3, [pc, #164]	; (8001ae4 <Adapt+0xac>)
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	009b      	lsls	r3, r3, #2
 8001a44:	4a28      	ldr	r2, [pc, #160]	; (8001ae8 <Adapt+0xb0>)
 8001a46:	1899      	adds	r1, r3, r2
 8001a48:	4b26      	ldr	r3, [pc, #152]	; (8001ae4 <Adapt+0xac>)
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	009b      	lsls	r3, r3, #2
 8001a4e:	4a27      	ldr	r2, [pc, #156]	; (8001aec <Adapt+0xb4>)
 8001a50:	441a      	add	r2, r3
 8001a52:	4b24      	ldr	r3, [pc, #144]	; (8001ae4 <Adapt+0xac>)
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	009b      	lsls	r3, r3, #2
 8001a58:	4825      	ldr	r0, [pc, #148]	; (8001af0 <Adapt+0xb8>)
 8001a5a:	4418      	add	r0, r3
 8001a5c:	4b21      	ldr	r3, [pc, #132]	; (8001ae4 <Adapt+0xac>)
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	009b      	lsls	r3, r3, #2
 8001a62:	4c24      	ldr	r4, [pc, #144]	; (8001af4 <Adapt+0xbc>)
 8001a64:	4423      	add	r3, r4
 8001a66:	f44f 7400 	mov.w	r4, #512	; 0x200
 8001a6a:	9401      	str	r4, [sp, #4]
 8001a6c:	9300      	str	r3, [sp, #0]
 8001a6e:	4603      	mov	r3, r0
 8001a70:	4821      	ldr	r0, [pc, #132]	; (8001af8 <Adapt+0xc0>)
 8001a72:	f004 fcb9 	bl	80063e8 <arm_lms_norm_f32>

	//MSE calculation

	mse=0;
 8001a76:	4b21      	ldr	r3, [pc, #132]	; (8001afc <Adapt+0xc4>)
 8001a78:	f04f 0200 	mov.w	r2, #0
 8001a7c:	601a      	str	r2, [r3, #0]
	for (int i=offset_w_ptr; i<offset_w_ptr+BLOCK_SIZE_FLOAT; i=i+1)
 8001a7e:	4b19      	ldr	r3, [pc, #100]	; (8001ae4 <Adapt+0xac>)
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	607b      	str	r3, [r7, #4]
 8001a84:	e018      	b.n	8001ab8 <Adapt+0x80>
	{
		mse=mse+((float)l_buf_out[i]*(float)l_buf_out[i]);
 8001a86:	4a1b      	ldr	r2, [pc, #108]	; (8001af4 <Adapt+0xbc>)
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	009b      	lsls	r3, r3, #2
 8001a8c:	4413      	add	r3, r2
 8001a8e:	ed93 7a00 	vldr	s14, [r3]
 8001a92:	4a18      	ldr	r2, [pc, #96]	; (8001af4 <Adapt+0xbc>)
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	009b      	lsls	r3, r3, #2
 8001a98:	4413      	add	r3, r2
 8001a9a:	edd3 7a00 	vldr	s15, [r3]
 8001a9e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001aa2:	4b16      	ldr	r3, [pc, #88]	; (8001afc <Adapt+0xc4>)
 8001aa4:	edd3 7a00 	vldr	s15, [r3]
 8001aa8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001aac:	4b13      	ldr	r3, [pc, #76]	; (8001afc <Adapt+0xc4>)
 8001aae:	edc3 7a00 	vstr	s15, [r3]
	for (int i=offset_w_ptr; i<offset_w_ptr+BLOCK_SIZE_FLOAT; i=i+1)
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	3301      	adds	r3, #1
 8001ab6:	607b      	str	r3, [r7, #4]
 8001ab8:	4b0a      	ldr	r3, [pc, #40]	; (8001ae4 <Adapt+0xac>)
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8001ac0:	687a      	ldr	r2, [r7, #4]
 8001ac2:	429a      	cmp	r2, r3
 8001ac4:	dddf      	ble.n	8001a86 <Adapt+0x4e>
	}
	mse=mse/(float)BLOCK_SIZE_FLOAT;
 8001ac6:	4b0d      	ldr	r3, [pc, #52]	; (8001afc <Adapt+0xc4>)
 8001ac8:	ed93 7a00 	vldr	s14, [r3]
 8001acc:	eddf 6a0c 	vldr	s13, [pc, #48]	; 8001b00 <Adapt+0xc8>
 8001ad0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001ad4:	4b09      	ldr	r3, [pc, #36]	; (8001afc <Adapt+0xc4>)
 8001ad6:	edc3 7a00 	vstr	s15, [r3]
}
 8001ada:	bf00      	nop
 8001adc:	370c      	adds	r7, #12
 8001ade:	46bd      	mov	sp, r7
 8001ae0:	bd90      	pop	{r4, r7, pc}
 8001ae2:	bf00      	nop
 8001ae4:	200083bc 	.word	0x200083bc
 8001ae8:	200053b4 	.word	0x200053b4
 8001aec:	200043b4 	.word	0x200043b4
 8001af0:	200073b4 	.word	0x200073b4
 8001af4:	200063b4 	.word	0x200063b4
 8001af8:	200085c4 	.word	0x200085c4
 8001afc:	200085dc 	.word	0x200085dc
 8001b00:	44000000 	.word	0x44000000

08001b04 <Filter>:

void Filter()
{
 8001b04:	b580      	push	{r7, lr}
 8001b06:	af00      	add	r7, sp, #0
	//FIR
	arm_fir_f32 (&firsettings_l, &l_buf_in[offset_w_ptr], &l_buf_out[offset_w_ptr],BLOCK_SIZE_FLOAT);
 8001b08:	4b0f      	ldr	r3, [pc, #60]	; (8001b48 <Filter+0x44>)
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	009b      	lsls	r3, r3, #2
 8001b0e:	4a0f      	ldr	r2, [pc, #60]	; (8001b4c <Filter+0x48>)
 8001b10:	1899      	adds	r1, r3, r2
 8001b12:	4b0d      	ldr	r3, [pc, #52]	; (8001b48 <Filter+0x44>)
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	009b      	lsls	r3, r3, #2
 8001b18:	4a0d      	ldr	r2, [pc, #52]	; (8001b50 <Filter+0x4c>)
 8001b1a:	441a      	add	r2, r3
 8001b1c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001b20:	480c      	ldr	r0, [pc, #48]	; (8001b54 <Filter+0x50>)
 8001b22:	f004 fd97 	bl	8006654 <arm_fir_f32>
	arm_fir_f32 (&firsettings_r, &r_buf_in[offset_w_ptr], &r_buf_out[offset_w_ptr],BLOCK_SIZE_FLOAT);
 8001b26:	4b08      	ldr	r3, [pc, #32]	; (8001b48 <Filter+0x44>)
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	009b      	lsls	r3, r3, #2
 8001b2c:	4a0a      	ldr	r2, [pc, #40]	; (8001b58 <Filter+0x54>)
 8001b2e:	1899      	adds	r1, r3, r2
 8001b30:	4b05      	ldr	r3, [pc, #20]	; (8001b48 <Filter+0x44>)
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	009b      	lsls	r3, r3, #2
 8001b36:	4a09      	ldr	r2, [pc, #36]	; (8001b5c <Filter+0x58>)
 8001b38:	441a      	add	r2, r3
 8001b3a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001b3e:	4808      	ldr	r0, [pc, #32]	; (8001b60 <Filter+0x5c>)
 8001b40:	f004 fd88 	bl	8006654 <arm_fir_f32>
}
 8001b44:	bf00      	nop
 8001b46:	bd80      	pop	{r7, pc}
 8001b48:	200083bc 	.word	0x200083bc
 8001b4c:	200043b4 	.word	0x200043b4
 8001b50:	200063b4 	.word	0x200063b4
 8001b54:	20008fdc 	.word	0x20008fdc
 8001b58:	200053b4 	.word	0x200053b4
 8001b5c:	200073b4 	.word	0x200073b4
 8001b60:	20008fe8 	.word	0x20008fe8

08001b64 <Loopback>:

void Loopback()
{
 8001b64:	b480      	push	{r7}
 8001b66:	b083      	sub	sp, #12
 8001b68:	af00      	add	r7, sp, #0
	for (int i=offset_w_ptr; i<offset_w_ptr+BLOCK_SIZE_FLOAT; i=i+1)
 8001b6a:	4b14      	ldr	r3, [pc, #80]	; (8001bbc <Loopback+0x58>)
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	607b      	str	r3, [r7, #4]
 8001b70:	e016      	b.n	8001ba0 <Loopback+0x3c>
		{
			l_buf_out[i]=l_buf_in[i];
 8001b72:	4a13      	ldr	r2, [pc, #76]	; (8001bc0 <Loopback+0x5c>)
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	009b      	lsls	r3, r3, #2
 8001b78:	4413      	add	r3, r2
 8001b7a:	681a      	ldr	r2, [r3, #0]
 8001b7c:	4911      	ldr	r1, [pc, #68]	; (8001bc4 <Loopback+0x60>)
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	009b      	lsls	r3, r3, #2
 8001b82:	440b      	add	r3, r1
 8001b84:	601a      	str	r2, [r3, #0]
			r_buf_out[i]=r_buf_in[i];
 8001b86:	4a10      	ldr	r2, [pc, #64]	; (8001bc8 <Loopback+0x64>)
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	009b      	lsls	r3, r3, #2
 8001b8c:	4413      	add	r3, r2
 8001b8e:	681a      	ldr	r2, [r3, #0]
 8001b90:	490e      	ldr	r1, [pc, #56]	; (8001bcc <Loopback+0x68>)
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	009b      	lsls	r3, r3, #2
 8001b96:	440b      	add	r3, r1
 8001b98:	601a      	str	r2, [r3, #0]
	for (int i=offset_w_ptr; i<offset_w_ptr+BLOCK_SIZE_FLOAT; i=i+1)
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	3301      	adds	r3, #1
 8001b9e:	607b      	str	r3, [r7, #4]
 8001ba0:	4b06      	ldr	r3, [pc, #24]	; (8001bbc <Loopback+0x58>)
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8001ba8:	687a      	ldr	r2, [r7, #4]
 8001baa:	429a      	cmp	r2, r3
 8001bac:	dde1      	ble.n	8001b72 <Loopback+0xe>
		}
}
 8001bae:	bf00      	nop
 8001bb0:	bf00      	nop
 8001bb2:	370c      	adds	r7, #12
 8001bb4:	46bd      	mov	sp, r7
 8001bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bba:	4770      	bx	lr
 8001bbc:	200083bc 	.word	0x200083bc
 8001bc0:	200043b4 	.word	0x200043b4
 8001bc4:	200063b4 	.word	0x200063b4
 8001bc8:	200053b4 	.word	0x200053b4
 8001bcc:	200073b4 	.word	0x200073b4

08001bd0 <vumeterR>:

void vumeterR()
{
 8001bd0:	b580      	push	{r7, lr}
 8001bd2:	b082      	sub	sp, #8
 8001bd4:	af00      	add	r7, sp, #0
	float rms_value;
	arm_rms_f32 (&r_buf_in[offset_w_ptr], BLOCK_SIZE_FLOAT, &rms_value);
 8001bd6:	4b4c      	ldr	r3, [pc, #304]	; (8001d08 <vumeterR+0x138>)
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	009b      	lsls	r3, r3, #2
 8001bdc:	4a4b      	ldr	r2, [pc, #300]	; (8001d0c <vumeterR+0x13c>)
 8001bde:	4413      	add	r3, r2
 8001be0:	1d3a      	adds	r2, r7, #4
 8001be2:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001be6:	4618      	mov	r0, r3
 8001be8:	f004 fb8c 	bl	8006304 <arm_rms_f32>

	if (rms_value>=LOW_THRESHOLD && rms_value<MED_THRESHOLD)
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	4618      	mov	r0, r3
 8001bf0:	f7fe fcba 	bl	8000568 <__aeabi_f2d>
 8001bf4:	a33e      	add	r3, pc, #248	; (adr r3, 8001cf0 <vumeterR+0x120>)
 8001bf6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001bfa:	f7fe ff93 	bl	8000b24 <__aeabi_dcmpge>
 8001bfe:	4603      	mov	r3, r0
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d01b      	beq.n	8001c3c <vumeterR+0x6c>
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	4618      	mov	r0, r3
 8001c08:	f7fe fcae 	bl	8000568 <__aeabi_f2d>
 8001c0c:	a33a      	add	r3, pc, #232	; (adr r3, 8001cf8 <vumeterR+0x128>)
 8001c0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c12:	f7fe ff73 	bl	8000afc <__aeabi_dcmplt>
 8001c16:	4603      	mov	r3, r0
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d00f      	beq.n	8001c3c <vumeterR+0x6c>
		{
			HAL_GPIO_WritePin(GPIOD, R_LOW_LED_Pin, GPIO_PIN_SET);
 8001c1c:	2201      	movs	r2, #1
 8001c1e:	2101      	movs	r1, #1
 8001c20:	483b      	ldr	r0, [pc, #236]	; (8001d10 <vumeterR+0x140>)
 8001c22:	f001 fd67 	bl	80036f4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOD, R_MED_LED_Pin, GPIO_PIN_RESET);
 8001c26:	2200      	movs	r2, #0
 8001c28:	2104      	movs	r1, #4
 8001c2a:	4839      	ldr	r0, [pc, #228]	; (8001d10 <vumeterR+0x140>)
 8001c2c:	f001 fd62 	bl	80036f4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOD, R_HIGH_LED_Pin, GPIO_PIN_RESET);
 8001c30:	2200      	movs	r2, #0
 8001c32:	2110      	movs	r1, #16
 8001c34:	4836      	ldr	r0, [pc, #216]	; (8001d10 <vumeterR+0x140>)
 8001c36:	f001 fd5d 	bl	80036f4 <HAL_GPIO_WritePin>
 8001c3a:	e053      	b.n	8001ce4 <vumeterR+0x114>
		}
		else if (rms_value>=MED_THRESHOLD && rms_value<HIGH_THRESHOLD)
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	4618      	mov	r0, r3
 8001c40:	f7fe fc92 	bl	8000568 <__aeabi_f2d>
 8001c44:	a32c      	add	r3, pc, #176	; (adr r3, 8001cf8 <vumeterR+0x128>)
 8001c46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c4a:	f7fe ff6b 	bl	8000b24 <__aeabi_dcmpge>
 8001c4e:	4603      	mov	r3, r0
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d01b      	beq.n	8001c8c <vumeterR+0xbc>
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	4618      	mov	r0, r3
 8001c58:	f7fe fc86 	bl	8000568 <__aeabi_f2d>
 8001c5c:	a328      	add	r3, pc, #160	; (adr r3, 8001d00 <vumeterR+0x130>)
 8001c5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c62:	f7fe ff4b 	bl	8000afc <__aeabi_dcmplt>
 8001c66:	4603      	mov	r3, r0
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d00f      	beq.n	8001c8c <vumeterR+0xbc>
		{
			HAL_GPIO_WritePin(GPIOD, R_LOW_LED_Pin, GPIO_PIN_SET);
 8001c6c:	2201      	movs	r2, #1
 8001c6e:	2101      	movs	r1, #1
 8001c70:	4827      	ldr	r0, [pc, #156]	; (8001d10 <vumeterR+0x140>)
 8001c72:	f001 fd3f 	bl	80036f4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOD, R_MED_LED_Pin, GPIO_PIN_SET);
 8001c76:	2201      	movs	r2, #1
 8001c78:	2104      	movs	r1, #4
 8001c7a:	4825      	ldr	r0, [pc, #148]	; (8001d10 <vumeterR+0x140>)
 8001c7c:	f001 fd3a 	bl	80036f4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOD, R_HIGH_LED_Pin, GPIO_PIN_RESET);
 8001c80:	2200      	movs	r2, #0
 8001c82:	2110      	movs	r1, #16
 8001c84:	4822      	ldr	r0, [pc, #136]	; (8001d10 <vumeterR+0x140>)
 8001c86:	f001 fd35 	bl	80036f4 <HAL_GPIO_WritePin>
 8001c8a:	e02b      	b.n	8001ce4 <vumeterR+0x114>
		}
		else if (rms_value>=HIGH_THRESHOLD)
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	4618      	mov	r0, r3
 8001c90:	f7fe fc6a 	bl	8000568 <__aeabi_f2d>
 8001c94:	a31a      	add	r3, pc, #104	; (adr r3, 8001d00 <vumeterR+0x130>)
 8001c96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c9a:	f7fe ff43 	bl	8000b24 <__aeabi_dcmpge>
 8001c9e:	4603      	mov	r3, r0
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d00f      	beq.n	8001cc4 <vumeterR+0xf4>
		{
			HAL_GPIO_WritePin(GPIOD, R_LOW_LED_Pin, GPIO_PIN_SET);
 8001ca4:	2201      	movs	r2, #1
 8001ca6:	2101      	movs	r1, #1
 8001ca8:	4819      	ldr	r0, [pc, #100]	; (8001d10 <vumeterR+0x140>)
 8001caa:	f001 fd23 	bl	80036f4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOD, R_MED_LED_Pin, GPIO_PIN_SET);
 8001cae:	2201      	movs	r2, #1
 8001cb0:	2104      	movs	r1, #4
 8001cb2:	4817      	ldr	r0, [pc, #92]	; (8001d10 <vumeterR+0x140>)
 8001cb4:	f001 fd1e 	bl	80036f4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOD, R_HIGH_LED_Pin, GPIO_PIN_SET);
 8001cb8:	2201      	movs	r2, #1
 8001cba:	2110      	movs	r1, #16
 8001cbc:	4814      	ldr	r0, [pc, #80]	; (8001d10 <vumeterR+0x140>)
 8001cbe:	f001 fd19 	bl	80036f4 <HAL_GPIO_WritePin>
		{
			HAL_GPIO_WritePin(GPIOD, R_LOW_LED_Pin, GPIO_PIN_RESET);
			HAL_GPIO_WritePin(GPIOD, R_MED_LED_Pin, GPIO_PIN_RESET);
			HAL_GPIO_WritePin(GPIOD, R_HIGH_LED_Pin, GPIO_PIN_RESET);
		}
}
 8001cc2:	e00f      	b.n	8001ce4 <vumeterR+0x114>
			HAL_GPIO_WritePin(GPIOD, R_LOW_LED_Pin, GPIO_PIN_RESET);
 8001cc4:	2200      	movs	r2, #0
 8001cc6:	2101      	movs	r1, #1
 8001cc8:	4811      	ldr	r0, [pc, #68]	; (8001d10 <vumeterR+0x140>)
 8001cca:	f001 fd13 	bl	80036f4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOD, R_MED_LED_Pin, GPIO_PIN_RESET);
 8001cce:	2200      	movs	r2, #0
 8001cd0:	2104      	movs	r1, #4
 8001cd2:	480f      	ldr	r0, [pc, #60]	; (8001d10 <vumeterR+0x140>)
 8001cd4:	f001 fd0e 	bl	80036f4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOD, R_HIGH_LED_Pin, GPIO_PIN_RESET);
 8001cd8:	2200      	movs	r2, #0
 8001cda:	2110      	movs	r1, #16
 8001cdc:	480c      	ldr	r0, [pc, #48]	; (8001d10 <vumeterR+0x140>)
 8001cde:	f001 fd09 	bl	80036f4 <HAL_GPIO_WritePin>
}
 8001ce2:	e7ff      	b.n	8001ce4 <vumeterR+0x114>
 8001ce4:	bf00      	nop
 8001ce6:	3708      	adds	r7, #8
 8001ce8:	46bd      	mov	sp, r7
 8001cea:	bd80      	pop	{r7, pc}
 8001cec:	f3af 8000 	nop.w
 8001cf0:	147ae148 	.word	0x147ae148
 8001cf4:	3f6b089a 	.word	0x3f6b089a
 8001cf8:	570a3d70 	.word	0x570a3d70
 8001cfc:	3fae69ad 	.word	0x3fae69ad
 8001d00:	5b333333 	.word	0x5b333333
 8001d04:	3fd41062 	.word	0x3fd41062
 8001d08:	200083bc 	.word	0x200083bc
 8001d0c:	200053b4 	.word	0x200053b4
 8001d10:	40020c00 	.word	0x40020c00
 8001d14:	00000000 	.word	0x00000000

08001d18 <vumeterL>:

void vumeterL()
{
 8001d18:	b580      	push	{r7, lr}
 8001d1a:	b082      	sub	sp, #8
 8001d1c:	af00      	add	r7, sp, #0
	float rms_value;
	arm_rms_f32 (&l_buf_in[offset_w_ptr], BLOCK_SIZE_FLOAT, &rms_value);
 8001d1e:	4b50      	ldr	r3, [pc, #320]	; (8001e60 <vumeterL+0x148>)
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	009b      	lsls	r3, r3, #2
 8001d24:	4a4f      	ldr	r2, [pc, #316]	; (8001e64 <vumeterL+0x14c>)
 8001d26:	4413      	add	r3, r2
 8001d28:	1d3a      	adds	r2, r7, #4
 8001d2a:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001d2e:	4618      	mov	r0, r3
 8001d30:	f004 fae8 	bl	8006304 <arm_rms_f32>

	if (rms_value>=LOW_THRESHOLD && rms_value<MED_THRESHOLD)
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	4618      	mov	r0, r3
 8001d38:	f7fe fc16 	bl	8000568 <__aeabi_f2d>
 8001d3c:	a342      	add	r3, pc, #264	; (adr r3, 8001e48 <vumeterL+0x130>)
 8001d3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d42:	f7fe feef 	bl	8000b24 <__aeabi_dcmpge>
 8001d46:	4603      	mov	r3, r0
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d01d      	beq.n	8001d88 <vumeterL+0x70>
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	4618      	mov	r0, r3
 8001d50:	f7fe fc0a 	bl	8000568 <__aeabi_f2d>
 8001d54:	a33e      	add	r3, pc, #248	; (adr r3, 8001e50 <vumeterL+0x138>)
 8001d56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d5a:	f7fe fecf 	bl	8000afc <__aeabi_dcmplt>
 8001d5e:	4603      	mov	r3, r0
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d011      	beq.n	8001d88 <vumeterL+0x70>
	{
		HAL_GPIO_WritePin(GPIOC, L_LOW_LED_Pin, GPIO_PIN_SET);
 8001d64:	2201      	movs	r2, #1
 8001d66:	2180      	movs	r1, #128	; 0x80
 8001d68:	483f      	ldr	r0, [pc, #252]	; (8001e68 <vumeterL+0x150>)
 8001d6a:	f001 fcc3 	bl	80036f4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, L_MED_LED_Pin, GPIO_PIN_RESET);
 8001d6e:	2200      	movs	r2, #0
 8001d70:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001d74:	483c      	ldr	r0, [pc, #240]	; (8001e68 <vumeterL+0x150>)
 8001d76:	f001 fcbd 	bl	80036f4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, L_HIGH_LED_Pin, GPIO_PIN_RESET);
 8001d7a:	2200      	movs	r2, #0
 8001d7c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001d80:	4839      	ldr	r0, [pc, #228]	; (8001e68 <vumeterL+0x150>)
 8001d82:	f001 fcb7 	bl	80036f4 <HAL_GPIO_WritePin>
 8001d86:	e059      	b.n	8001e3c <vumeterL+0x124>
	}
	else if (rms_value>=MED_THRESHOLD && rms_value<HIGH_THRESHOLD)
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	4618      	mov	r0, r3
 8001d8c:	f7fe fbec 	bl	8000568 <__aeabi_f2d>
 8001d90:	a32f      	add	r3, pc, #188	; (adr r3, 8001e50 <vumeterL+0x138>)
 8001d92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d96:	f7fe fec5 	bl	8000b24 <__aeabi_dcmpge>
 8001d9a:	4603      	mov	r3, r0
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d01d      	beq.n	8001ddc <vumeterL+0xc4>
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	4618      	mov	r0, r3
 8001da4:	f7fe fbe0 	bl	8000568 <__aeabi_f2d>
 8001da8:	a32b      	add	r3, pc, #172	; (adr r3, 8001e58 <vumeterL+0x140>)
 8001daa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001dae:	f7fe fea5 	bl	8000afc <__aeabi_dcmplt>
 8001db2:	4603      	mov	r3, r0
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d011      	beq.n	8001ddc <vumeterL+0xc4>
	{
		HAL_GPIO_WritePin(GPIOC, L_LOW_LED_Pin, GPIO_PIN_SET);
 8001db8:	2201      	movs	r2, #1
 8001dba:	2180      	movs	r1, #128	; 0x80
 8001dbc:	482a      	ldr	r0, [pc, #168]	; (8001e68 <vumeterL+0x150>)
 8001dbe:	f001 fc99 	bl	80036f4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, L_MED_LED_Pin, GPIO_PIN_SET);
 8001dc2:	2201      	movs	r2, #1
 8001dc4:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001dc8:	4827      	ldr	r0, [pc, #156]	; (8001e68 <vumeterL+0x150>)
 8001dca:	f001 fc93 	bl	80036f4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, L_HIGH_LED_Pin, GPIO_PIN_RESET);
 8001dce:	2200      	movs	r2, #0
 8001dd0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001dd4:	4824      	ldr	r0, [pc, #144]	; (8001e68 <vumeterL+0x150>)
 8001dd6:	f001 fc8d 	bl	80036f4 <HAL_GPIO_WritePin>
 8001dda:	e02f      	b.n	8001e3c <vumeterL+0x124>
	}
	else if (rms_value>=HIGH_THRESHOLD)
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	4618      	mov	r0, r3
 8001de0:	f7fe fbc2 	bl	8000568 <__aeabi_f2d>
 8001de4:	a31c      	add	r3, pc, #112	; (adr r3, 8001e58 <vumeterL+0x140>)
 8001de6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001dea:	f7fe fe9b 	bl	8000b24 <__aeabi_dcmpge>
 8001dee:	4603      	mov	r3, r0
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d011      	beq.n	8001e18 <vumeterL+0x100>
	{
		HAL_GPIO_WritePin(GPIOC, L_LOW_LED_Pin, GPIO_PIN_SET);
 8001df4:	2201      	movs	r2, #1
 8001df6:	2180      	movs	r1, #128	; 0x80
 8001df8:	481b      	ldr	r0, [pc, #108]	; (8001e68 <vumeterL+0x150>)
 8001dfa:	f001 fc7b 	bl	80036f4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, L_MED_LED_Pin, GPIO_PIN_SET);
 8001dfe:	2201      	movs	r2, #1
 8001e00:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001e04:	4818      	ldr	r0, [pc, #96]	; (8001e68 <vumeterL+0x150>)
 8001e06:	f001 fc75 	bl	80036f4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, L_HIGH_LED_Pin, GPIO_PIN_SET);
 8001e0a:	2201      	movs	r2, #1
 8001e0c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001e10:	4815      	ldr	r0, [pc, #84]	; (8001e68 <vumeterL+0x150>)
 8001e12:	f001 fc6f 	bl	80036f4 <HAL_GPIO_WritePin>
	{
		HAL_GPIO_WritePin(GPIOC, L_LOW_LED_Pin, GPIO_PIN_RESET);
		HAL_GPIO_WritePin(GPIOC, L_MED_LED_Pin, GPIO_PIN_RESET);
		HAL_GPIO_WritePin(GPIOC, L_HIGH_LED_Pin, GPIO_PIN_RESET);
	}
}
 8001e16:	e011      	b.n	8001e3c <vumeterL+0x124>
		HAL_GPIO_WritePin(GPIOC, L_LOW_LED_Pin, GPIO_PIN_RESET);
 8001e18:	2200      	movs	r2, #0
 8001e1a:	2180      	movs	r1, #128	; 0x80
 8001e1c:	4812      	ldr	r0, [pc, #72]	; (8001e68 <vumeterL+0x150>)
 8001e1e:	f001 fc69 	bl	80036f4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, L_MED_LED_Pin, GPIO_PIN_RESET);
 8001e22:	2200      	movs	r2, #0
 8001e24:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001e28:	480f      	ldr	r0, [pc, #60]	; (8001e68 <vumeterL+0x150>)
 8001e2a:	f001 fc63 	bl	80036f4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, L_HIGH_LED_Pin, GPIO_PIN_RESET);
 8001e2e:	2200      	movs	r2, #0
 8001e30:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001e34:	480c      	ldr	r0, [pc, #48]	; (8001e68 <vumeterL+0x150>)
 8001e36:	f001 fc5d 	bl	80036f4 <HAL_GPIO_WritePin>
}
 8001e3a:	e7ff      	b.n	8001e3c <vumeterL+0x124>
 8001e3c:	bf00      	nop
 8001e3e:	3708      	adds	r7, #8
 8001e40:	46bd      	mov	sp, r7
 8001e42:	bd80      	pop	{r7, pc}
 8001e44:	f3af 8000 	nop.w
 8001e48:	147ae148 	.word	0x147ae148
 8001e4c:	3f6b089a 	.word	0x3f6b089a
 8001e50:	570a3d70 	.word	0x570a3d70
 8001e54:	3fae69ad 	.word	0x3fae69ad
 8001e58:	5b333333 	.word	0x5b333333
 8001e5c:	3fd41062 	.word	0x3fd41062
 8001e60:	200083bc 	.word	0x200083bc
 8001e64:	200043b4 	.word	0x200043b4
 8001e68:	40020800 	.word	0x40020800

08001e6c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001e6c:	b480      	push	{r7}
 8001e6e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001e70:	b672      	cpsid	i
}
 8001e72:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8001e74:	e7fe      	b.n	8001e74 <Error_Handler+0x8>
	...

08001e78 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001e78:	b480      	push	{r7}
 8001e7a:	b083      	sub	sp, #12
 8001e7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e7e:	2300      	movs	r3, #0
 8001e80:	607b      	str	r3, [r7, #4]
 8001e82:	4b10      	ldr	r3, [pc, #64]	; (8001ec4 <HAL_MspInit+0x4c>)
 8001e84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e86:	4a0f      	ldr	r2, [pc, #60]	; (8001ec4 <HAL_MspInit+0x4c>)
 8001e88:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001e8c:	6453      	str	r3, [r2, #68]	; 0x44
 8001e8e:	4b0d      	ldr	r3, [pc, #52]	; (8001ec4 <HAL_MspInit+0x4c>)
 8001e90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e92:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001e96:	607b      	str	r3, [r7, #4]
 8001e98:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001e9a:	2300      	movs	r3, #0
 8001e9c:	603b      	str	r3, [r7, #0]
 8001e9e:	4b09      	ldr	r3, [pc, #36]	; (8001ec4 <HAL_MspInit+0x4c>)
 8001ea0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ea2:	4a08      	ldr	r2, [pc, #32]	; (8001ec4 <HAL_MspInit+0x4c>)
 8001ea4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ea8:	6413      	str	r3, [r2, #64]	; 0x40
 8001eaa:	4b06      	ldr	r3, [pc, #24]	; (8001ec4 <HAL_MspInit+0x4c>)
 8001eac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001eb2:	603b      	str	r3, [r7, #0]
 8001eb4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001eb6:	bf00      	nop
 8001eb8:	370c      	adds	r7, #12
 8001eba:	46bd      	mov	sp, r7
 8001ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec0:	4770      	bx	lr
 8001ec2:	bf00      	nop
 8001ec4:	40023800 	.word	0x40023800

08001ec8 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8001ec8:	b580      	push	{r7, lr}
 8001eca:	b08e      	sub	sp, #56	; 0x38
 8001ecc:	af00      	add	r7, sp, #0
 8001ece:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ed0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001ed4:	2200      	movs	r2, #0
 8001ed6:	601a      	str	r2, [r3, #0]
 8001ed8:	605a      	str	r2, [r3, #4]
 8001eda:	609a      	str	r2, [r3, #8]
 8001edc:	60da      	str	r2, [r3, #12]
 8001ede:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001ee0:	f107 0314 	add.w	r3, r7, #20
 8001ee4:	2200      	movs	r2, #0
 8001ee6:	601a      	str	r2, [r3, #0]
 8001ee8:	605a      	str	r2, [r3, #4]
 8001eea:	609a      	str	r2, [r3, #8]
 8001eec:	60da      	str	r2, [r3, #12]
  if(hi2s->Instance==SPI2)
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	4a6b      	ldr	r2, [pc, #428]	; (80020a0 <HAL_I2S_MspInit+0x1d8>)
 8001ef4:	4293      	cmp	r3, r2
 8001ef6:	f040 80ce 	bne.w	8002096 <HAL_I2S_MspInit+0x1ce>

  /* USER CODE END SPI2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8001efa:	2301      	movs	r3, #1
 8001efc:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 86;
 8001efe:	2356      	movs	r3, #86	; 0x56
 8001f00:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8001f02:	2302      	movs	r3, #2
 8001f04:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001f06:	f107 0314 	add.w	r3, r7, #20
 8001f0a:	4618      	mov	r0, r3
 8001f0c:	f002 ff7e 	bl	8004e0c <HAL_RCCEx_PeriphCLKConfig>
 8001f10:	4603      	mov	r3, r0
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d001      	beq.n	8001f1a <HAL_I2S_MspInit+0x52>
    {
      Error_Handler();
 8001f16:	f7ff ffa9 	bl	8001e6c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001f1a:	2300      	movs	r3, #0
 8001f1c:	613b      	str	r3, [r7, #16]
 8001f1e:	4b61      	ldr	r3, [pc, #388]	; (80020a4 <HAL_I2S_MspInit+0x1dc>)
 8001f20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f22:	4a60      	ldr	r2, [pc, #384]	; (80020a4 <HAL_I2S_MspInit+0x1dc>)
 8001f24:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001f28:	6413      	str	r3, [r2, #64]	; 0x40
 8001f2a:	4b5e      	ldr	r3, [pc, #376]	; (80020a4 <HAL_I2S_MspInit+0x1dc>)
 8001f2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f2e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001f32:	613b      	str	r3, [r7, #16]
 8001f34:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001f36:	2300      	movs	r3, #0
 8001f38:	60fb      	str	r3, [r7, #12]
 8001f3a:	4b5a      	ldr	r3, [pc, #360]	; (80020a4 <HAL_I2S_MspInit+0x1dc>)
 8001f3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f3e:	4a59      	ldr	r2, [pc, #356]	; (80020a4 <HAL_I2S_MspInit+0x1dc>)
 8001f40:	f043 0304 	orr.w	r3, r3, #4
 8001f44:	6313      	str	r3, [r2, #48]	; 0x30
 8001f46:	4b57      	ldr	r3, [pc, #348]	; (80020a4 <HAL_I2S_MspInit+0x1dc>)
 8001f48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f4a:	f003 0304 	and.w	r3, r3, #4
 8001f4e:	60fb      	str	r3, [r7, #12]
 8001f50:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f52:	2300      	movs	r3, #0
 8001f54:	60bb      	str	r3, [r7, #8]
 8001f56:	4b53      	ldr	r3, [pc, #332]	; (80020a4 <HAL_I2S_MspInit+0x1dc>)
 8001f58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f5a:	4a52      	ldr	r2, [pc, #328]	; (80020a4 <HAL_I2S_MspInit+0x1dc>)
 8001f5c:	f043 0302 	orr.w	r3, r3, #2
 8001f60:	6313      	str	r3, [r2, #48]	; 0x30
 8001f62:	4b50      	ldr	r3, [pc, #320]	; (80020a4 <HAL_I2S_MspInit+0x1dc>)
 8001f64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f66:	f003 0302 	and.w	r3, r3, #2
 8001f6a:	60bb      	str	r3, [r7, #8]
 8001f6c:	68bb      	ldr	r3, [r7, #8]
    PC3     ------> I2S2_SD
    PB10     ------> I2S2_CK
    PB12     ------> I2S2_WS
    PC6     ------> I2S2_MCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001f6e:	2304      	movs	r3, #4
 8001f70:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f72:	2302      	movs	r3, #2
 8001f74:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f76:	2300      	movs	r3, #0
 8001f78:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f7a:	2300      	movs	r3, #0
 8001f7c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_I2S2ext;
 8001f7e:	2306      	movs	r3, #6
 8001f80:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001f82:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001f86:	4619      	mov	r1, r3
 8001f88:	4847      	ldr	r0, [pc, #284]	; (80020a8 <HAL_I2S_MspInit+0x1e0>)
 8001f8a:	f001 fa17 	bl	80033bc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_6;
 8001f8e:	2348      	movs	r3, #72	; 0x48
 8001f90:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f92:	2302      	movs	r3, #2
 8001f94:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f96:	2300      	movs	r3, #0
 8001f98:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f9a:	2300      	movs	r3, #0
 8001f9c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001f9e:	2305      	movs	r3, #5
 8001fa0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001fa2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001fa6:	4619      	mov	r1, r3
 8001fa8:	483f      	ldr	r0, [pc, #252]	; (80020a8 <HAL_I2S_MspInit+0x1e0>)
 8001faa:	f001 fa07 	bl	80033bc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_12;
 8001fae:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001fb2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fb4:	2302      	movs	r3, #2
 8001fb6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fb8:	2300      	movs	r3, #0
 8001fba:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fbc:	2300      	movs	r3, #0
 8001fbe:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001fc0:	2305      	movs	r3, #5
 8001fc2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001fc4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001fc8:	4619      	mov	r1, r3
 8001fca:	4838      	ldr	r0, [pc, #224]	; (80020ac <HAL_I2S_MspInit+0x1e4>)
 8001fcc:	f001 f9f6 	bl	80033bc <HAL_GPIO_Init>

    /* I2S2 DMA Init */
    /* I2S2_EXT_RX Init */
    hdma_i2s2_ext_rx.Instance = DMA1_Stream3;
 8001fd0:	4b37      	ldr	r3, [pc, #220]	; (80020b0 <HAL_I2S_MspInit+0x1e8>)
 8001fd2:	4a38      	ldr	r2, [pc, #224]	; (80020b4 <HAL_I2S_MspInit+0x1ec>)
 8001fd4:	601a      	str	r2, [r3, #0]
    hdma_i2s2_ext_rx.Init.Channel = DMA_CHANNEL_3;
 8001fd6:	4b36      	ldr	r3, [pc, #216]	; (80020b0 <HAL_I2S_MspInit+0x1e8>)
 8001fd8:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 8001fdc:	605a      	str	r2, [r3, #4]
    hdma_i2s2_ext_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001fde:	4b34      	ldr	r3, [pc, #208]	; (80020b0 <HAL_I2S_MspInit+0x1e8>)
 8001fe0:	2200      	movs	r2, #0
 8001fe2:	609a      	str	r2, [r3, #8]
    hdma_i2s2_ext_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001fe4:	4b32      	ldr	r3, [pc, #200]	; (80020b0 <HAL_I2S_MspInit+0x1e8>)
 8001fe6:	2200      	movs	r2, #0
 8001fe8:	60da      	str	r2, [r3, #12]
    hdma_i2s2_ext_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001fea:	4b31      	ldr	r3, [pc, #196]	; (80020b0 <HAL_I2S_MspInit+0x1e8>)
 8001fec:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001ff0:	611a      	str	r2, [r3, #16]
    hdma_i2s2_ext_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001ff2:	4b2f      	ldr	r3, [pc, #188]	; (80020b0 <HAL_I2S_MspInit+0x1e8>)
 8001ff4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001ff8:	615a      	str	r2, [r3, #20]
    hdma_i2s2_ext_rx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001ffa:	4b2d      	ldr	r3, [pc, #180]	; (80020b0 <HAL_I2S_MspInit+0x1e8>)
 8001ffc:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002000:	619a      	str	r2, [r3, #24]
    hdma_i2s2_ext_rx.Init.Mode = DMA_CIRCULAR;
 8002002:	4b2b      	ldr	r3, [pc, #172]	; (80020b0 <HAL_I2S_MspInit+0x1e8>)
 8002004:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002008:	61da      	str	r2, [r3, #28]
    hdma_i2s2_ext_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 800200a:	4b29      	ldr	r3, [pc, #164]	; (80020b0 <HAL_I2S_MspInit+0x1e8>)
 800200c:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8002010:	621a      	str	r2, [r3, #32]
    hdma_i2s2_ext_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002012:	4b27      	ldr	r3, [pc, #156]	; (80020b0 <HAL_I2S_MspInit+0x1e8>)
 8002014:	2200      	movs	r2, #0
 8002016:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2s2_ext_rx) != HAL_OK)
 8002018:	4825      	ldr	r0, [pc, #148]	; (80020b0 <HAL_I2S_MspInit+0x1e8>)
 800201a:	f000 fbcf 	bl	80027bc <HAL_DMA_Init>
 800201e:	4603      	mov	r3, r0
 8002020:	2b00      	cmp	r3, #0
 8002022:	d001      	beq.n	8002028 <HAL_I2S_MspInit+0x160>
    {
      Error_Handler();
 8002024:	f7ff ff22 	bl	8001e6c <Error_Handler>
    }

    __HAL_LINKDMA(hi2s,hdmarx,hdma_i2s2_ext_rx);
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	4a21      	ldr	r2, [pc, #132]	; (80020b0 <HAL_I2S_MspInit+0x1e8>)
 800202c:	63da      	str	r2, [r3, #60]	; 0x3c
 800202e:	4a20      	ldr	r2, [pc, #128]	; (80020b0 <HAL_I2S_MspInit+0x1e8>)
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI2_TX Init */
    hdma_spi2_tx.Instance = DMA1_Stream4;
 8002034:	4b20      	ldr	r3, [pc, #128]	; (80020b8 <HAL_I2S_MspInit+0x1f0>)
 8002036:	4a21      	ldr	r2, [pc, #132]	; (80020bc <HAL_I2S_MspInit+0x1f4>)
 8002038:	601a      	str	r2, [r3, #0]
    hdma_spi2_tx.Init.Channel = DMA_CHANNEL_0;
 800203a:	4b1f      	ldr	r3, [pc, #124]	; (80020b8 <HAL_I2S_MspInit+0x1f0>)
 800203c:	2200      	movs	r2, #0
 800203e:	605a      	str	r2, [r3, #4]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002040:	4b1d      	ldr	r3, [pc, #116]	; (80020b8 <HAL_I2S_MspInit+0x1f0>)
 8002042:	2240      	movs	r2, #64	; 0x40
 8002044:	609a      	str	r2, [r3, #8]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002046:	4b1c      	ldr	r3, [pc, #112]	; (80020b8 <HAL_I2S_MspInit+0x1f0>)
 8002048:	2200      	movs	r2, #0
 800204a:	60da      	str	r2, [r3, #12]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 800204c:	4b1a      	ldr	r3, [pc, #104]	; (80020b8 <HAL_I2S_MspInit+0x1f0>)
 800204e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002052:	611a      	str	r2, [r3, #16]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002054:	4b18      	ldr	r3, [pc, #96]	; (80020b8 <HAL_I2S_MspInit+0x1f0>)
 8002056:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800205a:	615a      	str	r2, [r3, #20]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800205c:	4b16      	ldr	r3, [pc, #88]	; (80020b8 <HAL_I2S_MspInit+0x1f0>)
 800205e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002062:	619a      	str	r2, [r3, #24]
    hdma_spi2_tx.Init.Mode = DMA_CIRCULAR;
 8002064:	4b14      	ldr	r3, [pc, #80]	; (80020b8 <HAL_I2S_MspInit+0x1f0>)
 8002066:	f44f 7280 	mov.w	r2, #256	; 0x100
 800206a:	61da      	str	r2, [r3, #28]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 800206c:	4b12      	ldr	r3, [pc, #72]	; (80020b8 <HAL_I2S_MspInit+0x1f0>)
 800206e:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8002072:	621a      	str	r2, [r3, #32]
    hdma_spi2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002074:	4b10      	ldr	r3, [pc, #64]	; (80020b8 <HAL_I2S_MspInit+0x1f0>)
 8002076:	2200      	movs	r2, #0
 8002078:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 800207a:	480f      	ldr	r0, [pc, #60]	; (80020b8 <HAL_I2S_MspInit+0x1f0>)
 800207c:	f000 fb9e 	bl	80027bc <HAL_DMA_Init>
 8002080:	4603      	mov	r3, r0
 8002082:	2b00      	cmp	r3, #0
 8002084:	d001      	beq.n	800208a <HAL_I2S_MspInit+0x1c2>
    {
      Error_Handler();
 8002086:	f7ff fef1 	bl	8001e6c <Error_Handler>
    }

    __HAL_LINKDMA(hi2s,hdmatx,hdma_spi2_tx);
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	4a0a      	ldr	r2, [pc, #40]	; (80020b8 <HAL_I2S_MspInit+0x1f0>)
 800208e:	639a      	str	r2, [r3, #56]	; 0x38
 8002090:	4a09      	ldr	r2, [pc, #36]	; (80020b8 <HAL_I2S_MspInit+0x1f0>)
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8002096:	bf00      	nop
 8002098:	3738      	adds	r7, #56	; 0x38
 800209a:	46bd      	mov	sp, r7
 800209c:	bd80      	pop	{r7, pc}
 800209e:	bf00      	nop
 80020a0:	40003800 	.word	0x40003800
 80020a4:	40023800 	.word	0x40023800
 80020a8:	40020800 	.word	0x40020800
 80020ac:	40020400 	.word	0x40020400
 80020b0:	2000024c 	.word	0x2000024c
 80020b4:	40026058 	.word	0x40026058
 80020b8:	200002ac 	.word	0x200002ac
 80020bc:	40026070 	.word	0x40026070

080020c0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80020c0:	b580      	push	{r7, lr}
 80020c2:	b08a      	sub	sp, #40	; 0x28
 80020c4:	af00      	add	r7, sp, #0
 80020c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020c8:	f107 0314 	add.w	r3, r7, #20
 80020cc:	2200      	movs	r2, #0
 80020ce:	601a      	str	r2, [r3, #0]
 80020d0:	605a      	str	r2, [r3, #4]
 80020d2:	609a      	str	r2, [r3, #8]
 80020d4:	60da      	str	r2, [r3, #12]
 80020d6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	4a34      	ldr	r2, [pc, #208]	; (80021b0 <HAL_UART_MspInit+0xf0>)
 80020de:	4293      	cmp	r3, r2
 80020e0:	d162      	bne.n	80021a8 <HAL_UART_MspInit+0xe8>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80020e2:	2300      	movs	r3, #0
 80020e4:	613b      	str	r3, [r7, #16]
 80020e6:	4b33      	ldr	r3, [pc, #204]	; (80021b4 <HAL_UART_MspInit+0xf4>)
 80020e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020ea:	4a32      	ldr	r2, [pc, #200]	; (80021b4 <HAL_UART_MspInit+0xf4>)
 80020ec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80020f0:	6413      	str	r3, [r2, #64]	; 0x40
 80020f2:	4b30      	ldr	r3, [pc, #192]	; (80021b4 <HAL_UART_MspInit+0xf4>)
 80020f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020fa:	613b      	str	r3, [r7, #16]
 80020fc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80020fe:	2300      	movs	r3, #0
 8002100:	60fb      	str	r3, [r7, #12]
 8002102:	4b2c      	ldr	r3, [pc, #176]	; (80021b4 <HAL_UART_MspInit+0xf4>)
 8002104:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002106:	4a2b      	ldr	r2, [pc, #172]	; (80021b4 <HAL_UART_MspInit+0xf4>)
 8002108:	f043 0308 	orr.w	r3, r3, #8
 800210c:	6313      	str	r3, [r2, #48]	; 0x30
 800210e:	4b29      	ldr	r3, [pc, #164]	; (80021b4 <HAL_UART_MspInit+0xf4>)
 8002110:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002112:	f003 0308 	and.w	r3, r3, #8
 8002116:	60fb      	str	r3, [r7, #12]
 8002118:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PD5     ------> USART2_TX
    PD6     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 800211a:	2360      	movs	r3, #96	; 0x60
 800211c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800211e:	2302      	movs	r3, #2
 8002120:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002122:	2300      	movs	r3, #0
 8002124:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002126:	2303      	movs	r3, #3
 8002128:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800212a:	2307      	movs	r3, #7
 800212c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800212e:	f107 0314 	add.w	r3, r7, #20
 8002132:	4619      	mov	r1, r3
 8002134:	4820      	ldr	r0, [pc, #128]	; (80021b8 <HAL_UART_MspInit+0xf8>)
 8002136:	f001 f941 	bl	80033bc <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Stream5;
 800213a:	4b20      	ldr	r3, [pc, #128]	; (80021bc <HAL_UART_MspInit+0xfc>)
 800213c:	4a20      	ldr	r2, [pc, #128]	; (80021c0 <HAL_UART_MspInit+0x100>)
 800213e:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 8002140:	4b1e      	ldr	r3, [pc, #120]	; (80021bc <HAL_UART_MspInit+0xfc>)
 8002142:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002146:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002148:	4b1c      	ldr	r3, [pc, #112]	; (80021bc <HAL_UART_MspInit+0xfc>)
 800214a:	2200      	movs	r2, #0
 800214c:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800214e:	4b1b      	ldr	r3, [pc, #108]	; (80021bc <HAL_UART_MspInit+0xfc>)
 8002150:	2200      	movs	r2, #0
 8002152:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002154:	4b19      	ldr	r3, [pc, #100]	; (80021bc <HAL_UART_MspInit+0xfc>)
 8002156:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800215a:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800215c:	4b17      	ldr	r3, [pc, #92]	; (80021bc <HAL_UART_MspInit+0xfc>)
 800215e:	2200      	movs	r2, #0
 8002160:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002162:	4b16      	ldr	r3, [pc, #88]	; (80021bc <HAL_UART_MspInit+0xfc>)
 8002164:	2200      	movs	r2, #0
 8002166:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 8002168:	4b14      	ldr	r3, [pc, #80]	; (80021bc <HAL_UART_MspInit+0xfc>)
 800216a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800216e:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002170:	4b12      	ldr	r3, [pc, #72]	; (80021bc <HAL_UART_MspInit+0xfc>)
 8002172:	2200      	movs	r2, #0
 8002174:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002176:	4b11      	ldr	r3, [pc, #68]	; (80021bc <HAL_UART_MspInit+0xfc>)
 8002178:	2200      	movs	r2, #0
 800217a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 800217c:	480f      	ldr	r0, [pc, #60]	; (80021bc <HAL_UART_MspInit+0xfc>)
 800217e:	f000 fb1d 	bl	80027bc <HAL_DMA_Init>
 8002182:	4603      	mov	r3, r0
 8002184:	2b00      	cmp	r3, #0
 8002186:	d001      	beq.n	800218c <HAL_UART_MspInit+0xcc>
    {
      Error_Handler();
 8002188:	f7ff fe70 	bl	8001e6c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	4a0b      	ldr	r2, [pc, #44]	; (80021bc <HAL_UART_MspInit+0xfc>)
 8002190:	639a      	str	r2, [r3, #56]	; 0x38
 8002192:	4a0a      	ldr	r2, [pc, #40]	; (80021bc <HAL_UART_MspInit+0xfc>)
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8002198:	2200      	movs	r2, #0
 800219a:	2100      	movs	r1, #0
 800219c:	2026      	movs	r0, #38	; 0x26
 800219e:	f000 fad6 	bl	800274e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80021a2:	2026      	movs	r0, #38	; 0x26
 80021a4:	f000 faef 	bl	8002786 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80021a8:	bf00      	nop
 80021aa:	3728      	adds	r7, #40	; 0x28
 80021ac:	46bd      	mov	sp, r7
 80021ae:	bd80      	pop	{r7, pc}
 80021b0:	40004400 	.word	0x40004400
 80021b4:	40023800 	.word	0x40023800
 80021b8:	40020c00 	.word	0x40020c00
 80021bc:	20000350 	.word	0x20000350
 80021c0:	40026088 	.word	0x40026088

080021c4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80021c4:	b480      	push	{r7}
 80021c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80021c8:	e7fe      	b.n	80021c8 <NMI_Handler+0x4>

080021ca <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80021ca:	b480      	push	{r7}
 80021cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80021ce:	e7fe      	b.n	80021ce <HardFault_Handler+0x4>

080021d0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80021d0:	b480      	push	{r7}
 80021d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80021d4:	e7fe      	b.n	80021d4 <MemManage_Handler+0x4>

080021d6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80021d6:	b480      	push	{r7}
 80021d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80021da:	e7fe      	b.n	80021da <BusFault_Handler+0x4>

080021dc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80021dc:	b480      	push	{r7}
 80021de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80021e0:	e7fe      	b.n	80021e0 <UsageFault_Handler+0x4>

080021e2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80021e2:	b480      	push	{r7}
 80021e4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80021e6:	bf00      	nop
 80021e8:	46bd      	mov	sp, r7
 80021ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ee:	4770      	bx	lr

080021f0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80021f0:	b480      	push	{r7}
 80021f2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80021f4:	bf00      	nop
 80021f6:	46bd      	mov	sp, r7
 80021f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021fc:	4770      	bx	lr

080021fe <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80021fe:	b480      	push	{r7}
 8002200:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002202:	bf00      	nop
 8002204:	46bd      	mov	sp, r7
 8002206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800220a:	4770      	bx	lr

0800220c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800220c:	b580      	push	{r7, lr}
 800220e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002210:	f000 f97e 	bl	8002510 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002214:	bf00      	nop
 8002216:	bd80      	pop	{r7, pc}

08002218 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8002218:	b580      	push	{r7, lr}
 800221a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2s2_ext_rx);
 800221c:	4802      	ldr	r0, [pc, #8]	; (8002228 <DMA1_Stream3_IRQHandler+0x10>)
 800221e:	f000 fc65 	bl	8002aec <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 8002222:	bf00      	nop
 8002224:	bd80      	pop	{r7, pc}
 8002226:	bf00      	nop
 8002228:	2000024c 	.word	0x2000024c

0800222c <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 800222c:	b580      	push	{r7, lr}
 800222e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 8002230:	4802      	ldr	r0, [pc, #8]	; (800223c <DMA1_Stream4_IRQHandler+0x10>)
 8002232:	f000 fc5b 	bl	8002aec <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 8002236:	bf00      	nop
 8002238:	bd80      	pop	{r7, pc}
 800223a:	bf00      	nop
 800223c:	200002ac 	.word	0x200002ac

08002240 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8002240:	b580      	push	{r7, lr}
 8002242:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8002244:	4802      	ldr	r0, [pc, #8]	; (8002250 <DMA1_Stream5_IRQHandler+0x10>)
 8002246:	f000 fc51 	bl	8002aec <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 800224a:	bf00      	nop
 800224c:	bd80      	pop	{r7, pc}
 800224e:	bf00      	nop
 8002250:	20000350 	.word	0x20000350

08002254 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8002254:	b580      	push	{r7, lr}
 8002256:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002258:	4802      	ldr	r0, [pc, #8]	; (8002264 <USART2_IRQHandler+0x10>)
 800225a:	f002 ffd9 	bl	8005210 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800225e:	bf00      	nop
 8002260:	bd80      	pop	{r7, pc}
 8002262:	bf00      	nop
 8002264:	2000030c 	.word	0x2000030c

08002268 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002268:	b480      	push	{r7}
 800226a:	af00      	add	r7, sp, #0
	return 1;
 800226c:	2301      	movs	r3, #1
}
 800226e:	4618      	mov	r0, r3
 8002270:	46bd      	mov	sp, r7
 8002272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002276:	4770      	bx	lr

08002278 <_kill>:

int _kill(int pid, int sig)
{
 8002278:	b580      	push	{r7, lr}
 800227a:	b082      	sub	sp, #8
 800227c:	af00      	add	r7, sp, #0
 800227e:	6078      	str	r0, [r7, #4]
 8002280:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8002282:	f004 fc4b 	bl	8006b1c <__errno>
 8002286:	4603      	mov	r3, r0
 8002288:	2216      	movs	r2, #22
 800228a:	601a      	str	r2, [r3, #0]
	return -1;
 800228c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002290:	4618      	mov	r0, r3
 8002292:	3708      	adds	r7, #8
 8002294:	46bd      	mov	sp, r7
 8002296:	bd80      	pop	{r7, pc}

08002298 <_exit>:

void _exit (int status)
{
 8002298:	b580      	push	{r7, lr}
 800229a:	b082      	sub	sp, #8
 800229c:	af00      	add	r7, sp, #0
 800229e:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80022a0:	f04f 31ff 	mov.w	r1, #4294967295
 80022a4:	6878      	ldr	r0, [r7, #4]
 80022a6:	f7ff ffe7 	bl	8002278 <_kill>
	while (1) {}		/* Make sure we hang here */
 80022aa:	e7fe      	b.n	80022aa <_exit+0x12>

080022ac <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80022ac:	b580      	push	{r7, lr}
 80022ae:	b086      	sub	sp, #24
 80022b0:	af00      	add	r7, sp, #0
 80022b2:	60f8      	str	r0, [r7, #12]
 80022b4:	60b9      	str	r1, [r7, #8]
 80022b6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80022b8:	2300      	movs	r3, #0
 80022ba:	617b      	str	r3, [r7, #20]
 80022bc:	e00a      	b.n	80022d4 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80022be:	f3af 8000 	nop.w
 80022c2:	4601      	mov	r1, r0
 80022c4:	68bb      	ldr	r3, [r7, #8]
 80022c6:	1c5a      	adds	r2, r3, #1
 80022c8:	60ba      	str	r2, [r7, #8]
 80022ca:	b2ca      	uxtb	r2, r1
 80022cc:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80022ce:	697b      	ldr	r3, [r7, #20]
 80022d0:	3301      	adds	r3, #1
 80022d2:	617b      	str	r3, [r7, #20]
 80022d4:	697a      	ldr	r2, [r7, #20]
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	429a      	cmp	r2, r3
 80022da:	dbf0      	blt.n	80022be <_read+0x12>
	}

return len;
 80022dc:	687b      	ldr	r3, [r7, #4]
}
 80022de:	4618      	mov	r0, r3
 80022e0:	3718      	adds	r7, #24
 80022e2:	46bd      	mov	sp, r7
 80022e4:	bd80      	pop	{r7, pc}

080022e6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80022e6:	b580      	push	{r7, lr}
 80022e8:	b086      	sub	sp, #24
 80022ea:	af00      	add	r7, sp, #0
 80022ec:	60f8      	str	r0, [r7, #12]
 80022ee:	60b9      	str	r1, [r7, #8]
 80022f0:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80022f2:	2300      	movs	r3, #0
 80022f4:	617b      	str	r3, [r7, #20]
 80022f6:	e009      	b.n	800230c <_write+0x26>
	{
		__io_putchar(*ptr++);
 80022f8:	68bb      	ldr	r3, [r7, #8]
 80022fa:	1c5a      	adds	r2, r3, #1
 80022fc:	60ba      	str	r2, [r7, #8]
 80022fe:	781b      	ldrb	r3, [r3, #0]
 8002300:	4618      	mov	r0, r3
 8002302:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002306:	697b      	ldr	r3, [r7, #20]
 8002308:	3301      	adds	r3, #1
 800230a:	617b      	str	r3, [r7, #20]
 800230c:	697a      	ldr	r2, [r7, #20]
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	429a      	cmp	r2, r3
 8002312:	dbf1      	blt.n	80022f8 <_write+0x12>
	}
	return len;
 8002314:	687b      	ldr	r3, [r7, #4]
}
 8002316:	4618      	mov	r0, r3
 8002318:	3718      	adds	r7, #24
 800231a:	46bd      	mov	sp, r7
 800231c:	bd80      	pop	{r7, pc}

0800231e <_close>:

int _close(int file)
{
 800231e:	b480      	push	{r7}
 8002320:	b083      	sub	sp, #12
 8002322:	af00      	add	r7, sp, #0
 8002324:	6078      	str	r0, [r7, #4]
	return -1;
 8002326:	f04f 33ff 	mov.w	r3, #4294967295
}
 800232a:	4618      	mov	r0, r3
 800232c:	370c      	adds	r7, #12
 800232e:	46bd      	mov	sp, r7
 8002330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002334:	4770      	bx	lr

08002336 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002336:	b480      	push	{r7}
 8002338:	b083      	sub	sp, #12
 800233a:	af00      	add	r7, sp, #0
 800233c:	6078      	str	r0, [r7, #4]
 800233e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002340:	683b      	ldr	r3, [r7, #0]
 8002342:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002346:	605a      	str	r2, [r3, #4]
	return 0;
 8002348:	2300      	movs	r3, #0
}
 800234a:	4618      	mov	r0, r3
 800234c:	370c      	adds	r7, #12
 800234e:	46bd      	mov	sp, r7
 8002350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002354:	4770      	bx	lr

08002356 <_isatty>:

int _isatty(int file)
{
 8002356:	b480      	push	{r7}
 8002358:	b083      	sub	sp, #12
 800235a:	af00      	add	r7, sp, #0
 800235c:	6078      	str	r0, [r7, #4]
	return 1;
 800235e:	2301      	movs	r3, #1
}
 8002360:	4618      	mov	r0, r3
 8002362:	370c      	adds	r7, #12
 8002364:	46bd      	mov	sp, r7
 8002366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800236a:	4770      	bx	lr

0800236c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800236c:	b480      	push	{r7}
 800236e:	b085      	sub	sp, #20
 8002370:	af00      	add	r7, sp, #0
 8002372:	60f8      	str	r0, [r7, #12]
 8002374:	60b9      	str	r1, [r7, #8]
 8002376:	607a      	str	r2, [r7, #4]
	return 0;
 8002378:	2300      	movs	r3, #0
}
 800237a:	4618      	mov	r0, r3
 800237c:	3714      	adds	r7, #20
 800237e:	46bd      	mov	sp, r7
 8002380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002384:	4770      	bx	lr
	...

08002388 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002388:	b580      	push	{r7, lr}
 800238a:	b086      	sub	sp, #24
 800238c:	af00      	add	r7, sp, #0
 800238e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002390:	4a14      	ldr	r2, [pc, #80]	; (80023e4 <_sbrk+0x5c>)
 8002392:	4b15      	ldr	r3, [pc, #84]	; (80023e8 <_sbrk+0x60>)
 8002394:	1ad3      	subs	r3, r2, r3
 8002396:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002398:	697b      	ldr	r3, [r7, #20]
 800239a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800239c:	4b13      	ldr	r3, [pc, #76]	; (80023ec <_sbrk+0x64>)
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d102      	bne.n	80023aa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80023a4:	4b11      	ldr	r3, [pc, #68]	; (80023ec <_sbrk+0x64>)
 80023a6:	4a12      	ldr	r2, [pc, #72]	; (80023f0 <_sbrk+0x68>)
 80023a8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80023aa:	4b10      	ldr	r3, [pc, #64]	; (80023ec <_sbrk+0x64>)
 80023ac:	681a      	ldr	r2, [r3, #0]
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	4413      	add	r3, r2
 80023b2:	693a      	ldr	r2, [r7, #16]
 80023b4:	429a      	cmp	r2, r3
 80023b6:	d207      	bcs.n	80023c8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80023b8:	f004 fbb0 	bl	8006b1c <__errno>
 80023bc:	4603      	mov	r3, r0
 80023be:	220c      	movs	r2, #12
 80023c0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80023c2:	f04f 33ff 	mov.w	r3, #4294967295
 80023c6:	e009      	b.n	80023dc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80023c8:	4b08      	ldr	r3, [pc, #32]	; (80023ec <_sbrk+0x64>)
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80023ce:	4b07      	ldr	r3, [pc, #28]	; (80023ec <_sbrk+0x64>)
 80023d0:	681a      	ldr	r2, [r3, #0]
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	4413      	add	r3, r2
 80023d6:	4a05      	ldr	r2, [pc, #20]	; (80023ec <_sbrk+0x64>)
 80023d8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80023da:	68fb      	ldr	r3, [r7, #12]
}
 80023dc:	4618      	mov	r0, r3
 80023de:	3718      	adds	r7, #24
 80023e0:	46bd      	mov	sp, r7
 80023e2:	bd80      	pop	{r7, pc}
 80023e4:	20020000 	.word	0x20020000
 80023e8:	00000400 	.word	0x00000400
 80023ec:	2000a424 	.word	0x2000a424
 80023f0:	2000a460 	.word	0x2000a460

080023f4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80023f4:	b480      	push	{r7}
 80023f6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80023f8:	4b06      	ldr	r3, [pc, #24]	; (8002414 <SystemInit+0x20>)
 80023fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023fe:	4a05      	ldr	r2, [pc, #20]	; (8002414 <SystemInit+0x20>)
 8002400:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002404:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002408:	bf00      	nop
 800240a:	46bd      	mov	sp, r7
 800240c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002410:	4770      	bx	lr
 8002412:	bf00      	nop
 8002414:	e000ed00 	.word	0xe000ed00

08002418 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8002418:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002450 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800241c:	480d      	ldr	r0, [pc, #52]	; (8002454 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800241e:	490e      	ldr	r1, [pc, #56]	; (8002458 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002420:	4a0e      	ldr	r2, [pc, #56]	; (800245c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002422:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002424:	e002      	b.n	800242c <LoopCopyDataInit>

08002426 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002426:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002428:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800242a:	3304      	adds	r3, #4

0800242c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800242c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800242e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002430:	d3f9      	bcc.n	8002426 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002432:	4a0b      	ldr	r2, [pc, #44]	; (8002460 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002434:	4c0b      	ldr	r4, [pc, #44]	; (8002464 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002436:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002438:	e001      	b.n	800243e <LoopFillZerobss>

0800243a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800243a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800243c:	3204      	adds	r2, #4

0800243e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800243e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002440:	d3fb      	bcc.n	800243a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002442:	f7ff ffd7 	bl	80023f4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002446:	f004 fb6f 	bl	8006b28 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800244a:	f7fe fe3b 	bl	80010c4 <main>
  bx  lr    
 800244e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8002450:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002454:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002458:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 800245c:	08009e5c 	.word	0x08009e5c
  ldr r2, =_sbss
 8002460:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 8002464:	2000a45c 	.word	0x2000a45c

08002468 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002468:	e7fe      	b.n	8002468 <ADC_IRQHandler>
	...

0800246c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800246c:	b580      	push	{r7, lr}
 800246e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002470:	4b0e      	ldr	r3, [pc, #56]	; (80024ac <HAL_Init+0x40>)
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	4a0d      	ldr	r2, [pc, #52]	; (80024ac <HAL_Init+0x40>)
 8002476:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800247a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800247c:	4b0b      	ldr	r3, [pc, #44]	; (80024ac <HAL_Init+0x40>)
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	4a0a      	ldr	r2, [pc, #40]	; (80024ac <HAL_Init+0x40>)
 8002482:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002486:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002488:	4b08      	ldr	r3, [pc, #32]	; (80024ac <HAL_Init+0x40>)
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	4a07      	ldr	r2, [pc, #28]	; (80024ac <HAL_Init+0x40>)
 800248e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002492:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002494:	2003      	movs	r0, #3
 8002496:	f000 f94f 	bl	8002738 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800249a:	200f      	movs	r0, #15
 800249c:	f000 f808 	bl	80024b0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80024a0:	f7ff fcea 	bl	8001e78 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80024a4:	2300      	movs	r3, #0
}
 80024a6:	4618      	mov	r0, r3
 80024a8:	bd80      	pop	{r7, pc}
 80024aa:	bf00      	nop
 80024ac:	40023c00 	.word	0x40023c00

080024b0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80024b0:	b580      	push	{r7, lr}
 80024b2:	b082      	sub	sp, #8
 80024b4:	af00      	add	r7, sp, #0
 80024b6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80024b8:	4b12      	ldr	r3, [pc, #72]	; (8002504 <HAL_InitTick+0x54>)
 80024ba:	681a      	ldr	r2, [r3, #0]
 80024bc:	4b12      	ldr	r3, [pc, #72]	; (8002508 <HAL_InitTick+0x58>)
 80024be:	781b      	ldrb	r3, [r3, #0]
 80024c0:	4619      	mov	r1, r3
 80024c2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80024c6:	fbb3 f3f1 	udiv	r3, r3, r1
 80024ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80024ce:	4618      	mov	r0, r3
 80024d0:	f000 f967 	bl	80027a2 <HAL_SYSTICK_Config>
 80024d4:	4603      	mov	r3, r0
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d001      	beq.n	80024de <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80024da:	2301      	movs	r3, #1
 80024dc:	e00e      	b.n	80024fc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	2b0f      	cmp	r3, #15
 80024e2:	d80a      	bhi.n	80024fa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80024e4:	2200      	movs	r2, #0
 80024e6:	6879      	ldr	r1, [r7, #4]
 80024e8:	f04f 30ff 	mov.w	r0, #4294967295
 80024ec:	f000 f92f 	bl	800274e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80024f0:	4a06      	ldr	r2, [pc, #24]	; (800250c <HAL_InitTick+0x5c>)
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80024f6:	2300      	movs	r3, #0
 80024f8:	e000      	b.n	80024fc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80024fa:	2301      	movs	r3, #1
}
 80024fc:	4618      	mov	r0, r3
 80024fe:	3708      	adds	r7, #8
 8002500:	46bd      	mov	sp, r7
 8002502:	bd80      	pop	{r7, pc}
 8002504:	20000004 	.word	0x20000004
 8002508:	2000000c 	.word	0x2000000c
 800250c:	20000008 	.word	0x20000008

08002510 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002510:	b480      	push	{r7}
 8002512:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002514:	4b06      	ldr	r3, [pc, #24]	; (8002530 <HAL_IncTick+0x20>)
 8002516:	781b      	ldrb	r3, [r3, #0]
 8002518:	461a      	mov	r2, r3
 800251a:	4b06      	ldr	r3, [pc, #24]	; (8002534 <HAL_IncTick+0x24>)
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	4413      	add	r3, r2
 8002520:	4a04      	ldr	r2, [pc, #16]	; (8002534 <HAL_IncTick+0x24>)
 8002522:	6013      	str	r3, [r2, #0]
}
 8002524:	bf00      	nop
 8002526:	46bd      	mov	sp, r7
 8002528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800252c:	4770      	bx	lr
 800252e:	bf00      	nop
 8002530:	2000000c 	.word	0x2000000c
 8002534:	2000a428 	.word	0x2000a428

08002538 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002538:	b480      	push	{r7}
 800253a:	af00      	add	r7, sp, #0
  return uwTick;
 800253c:	4b03      	ldr	r3, [pc, #12]	; (800254c <HAL_GetTick+0x14>)
 800253e:	681b      	ldr	r3, [r3, #0]
}
 8002540:	4618      	mov	r0, r3
 8002542:	46bd      	mov	sp, r7
 8002544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002548:	4770      	bx	lr
 800254a:	bf00      	nop
 800254c:	2000a428 	.word	0x2000a428

08002550 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002550:	b580      	push	{r7, lr}
 8002552:	b084      	sub	sp, #16
 8002554:	af00      	add	r7, sp, #0
 8002556:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002558:	f7ff ffee 	bl	8002538 <HAL_GetTick>
 800255c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002568:	d005      	beq.n	8002576 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800256a:	4b0a      	ldr	r3, [pc, #40]	; (8002594 <HAL_Delay+0x44>)
 800256c:	781b      	ldrb	r3, [r3, #0]
 800256e:	461a      	mov	r2, r3
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	4413      	add	r3, r2
 8002574:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002576:	bf00      	nop
 8002578:	f7ff ffde 	bl	8002538 <HAL_GetTick>
 800257c:	4602      	mov	r2, r0
 800257e:	68bb      	ldr	r3, [r7, #8]
 8002580:	1ad3      	subs	r3, r2, r3
 8002582:	68fa      	ldr	r2, [r7, #12]
 8002584:	429a      	cmp	r2, r3
 8002586:	d8f7      	bhi.n	8002578 <HAL_Delay+0x28>
  {
  }
}
 8002588:	bf00      	nop
 800258a:	bf00      	nop
 800258c:	3710      	adds	r7, #16
 800258e:	46bd      	mov	sp, r7
 8002590:	bd80      	pop	{r7, pc}
 8002592:	bf00      	nop
 8002594:	2000000c 	.word	0x2000000c

08002598 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002598:	b480      	push	{r7}
 800259a:	b085      	sub	sp, #20
 800259c:	af00      	add	r7, sp, #0
 800259e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	f003 0307 	and.w	r3, r3, #7
 80025a6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80025a8:	4b0c      	ldr	r3, [pc, #48]	; (80025dc <__NVIC_SetPriorityGrouping+0x44>)
 80025aa:	68db      	ldr	r3, [r3, #12]
 80025ac:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80025ae:	68ba      	ldr	r2, [r7, #8]
 80025b0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80025b4:	4013      	ands	r3, r2
 80025b6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80025bc:	68bb      	ldr	r3, [r7, #8]
 80025be:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80025c0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80025c4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80025c8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80025ca:	4a04      	ldr	r2, [pc, #16]	; (80025dc <__NVIC_SetPriorityGrouping+0x44>)
 80025cc:	68bb      	ldr	r3, [r7, #8]
 80025ce:	60d3      	str	r3, [r2, #12]
}
 80025d0:	bf00      	nop
 80025d2:	3714      	adds	r7, #20
 80025d4:	46bd      	mov	sp, r7
 80025d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025da:	4770      	bx	lr
 80025dc:	e000ed00 	.word	0xe000ed00

080025e0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80025e0:	b480      	push	{r7}
 80025e2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80025e4:	4b04      	ldr	r3, [pc, #16]	; (80025f8 <__NVIC_GetPriorityGrouping+0x18>)
 80025e6:	68db      	ldr	r3, [r3, #12]
 80025e8:	0a1b      	lsrs	r3, r3, #8
 80025ea:	f003 0307 	and.w	r3, r3, #7
}
 80025ee:	4618      	mov	r0, r3
 80025f0:	46bd      	mov	sp, r7
 80025f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f6:	4770      	bx	lr
 80025f8:	e000ed00 	.word	0xe000ed00

080025fc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80025fc:	b480      	push	{r7}
 80025fe:	b083      	sub	sp, #12
 8002600:	af00      	add	r7, sp, #0
 8002602:	4603      	mov	r3, r0
 8002604:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002606:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800260a:	2b00      	cmp	r3, #0
 800260c:	db0b      	blt.n	8002626 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800260e:	79fb      	ldrb	r3, [r7, #7]
 8002610:	f003 021f 	and.w	r2, r3, #31
 8002614:	4907      	ldr	r1, [pc, #28]	; (8002634 <__NVIC_EnableIRQ+0x38>)
 8002616:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800261a:	095b      	lsrs	r3, r3, #5
 800261c:	2001      	movs	r0, #1
 800261e:	fa00 f202 	lsl.w	r2, r0, r2
 8002622:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002626:	bf00      	nop
 8002628:	370c      	adds	r7, #12
 800262a:	46bd      	mov	sp, r7
 800262c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002630:	4770      	bx	lr
 8002632:	bf00      	nop
 8002634:	e000e100 	.word	0xe000e100

08002638 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002638:	b480      	push	{r7}
 800263a:	b083      	sub	sp, #12
 800263c:	af00      	add	r7, sp, #0
 800263e:	4603      	mov	r3, r0
 8002640:	6039      	str	r1, [r7, #0]
 8002642:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002644:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002648:	2b00      	cmp	r3, #0
 800264a:	db0a      	blt.n	8002662 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800264c:	683b      	ldr	r3, [r7, #0]
 800264e:	b2da      	uxtb	r2, r3
 8002650:	490c      	ldr	r1, [pc, #48]	; (8002684 <__NVIC_SetPriority+0x4c>)
 8002652:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002656:	0112      	lsls	r2, r2, #4
 8002658:	b2d2      	uxtb	r2, r2
 800265a:	440b      	add	r3, r1
 800265c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002660:	e00a      	b.n	8002678 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002662:	683b      	ldr	r3, [r7, #0]
 8002664:	b2da      	uxtb	r2, r3
 8002666:	4908      	ldr	r1, [pc, #32]	; (8002688 <__NVIC_SetPriority+0x50>)
 8002668:	79fb      	ldrb	r3, [r7, #7]
 800266a:	f003 030f 	and.w	r3, r3, #15
 800266e:	3b04      	subs	r3, #4
 8002670:	0112      	lsls	r2, r2, #4
 8002672:	b2d2      	uxtb	r2, r2
 8002674:	440b      	add	r3, r1
 8002676:	761a      	strb	r2, [r3, #24]
}
 8002678:	bf00      	nop
 800267a:	370c      	adds	r7, #12
 800267c:	46bd      	mov	sp, r7
 800267e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002682:	4770      	bx	lr
 8002684:	e000e100 	.word	0xe000e100
 8002688:	e000ed00 	.word	0xe000ed00

0800268c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800268c:	b480      	push	{r7}
 800268e:	b089      	sub	sp, #36	; 0x24
 8002690:	af00      	add	r7, sp, #0
 8002692:	60f8      	str	r0, [r7, #12]
 8002694:	60b9      	str	r1, [r7, #8]
 8002696:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	f003 0307 	and.w	r3, r3, #7
 800269e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80026a0:	69fb      	ldr	r3, [r7, #28]
 80026a2:	f1c3 0307 	rsb	r3, r3, #7
 80026a6:	2b04      	cmp	r3, #4
 80026a8:	bf28      	it	cs
 80026aa:	2304      	movcs	r3, #4
 80026ac:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80026ae:	69fb      	ldr	r3, [r7, #28]
 80026b0:	3304      	adds	r3, #4
 80026b2:	2b06      	cmp	r3, #6
 80026b4:	d902      	bls.n	80026bc <NVIC_EncodePriority+0x30>
 80026b6:	69fb      	ldr	r3, [r7, #28]
 80026b8:	3b03      	subs	r3, #3
 80026ba:	e000      	b.n	80026be <NVIC_EncodePriority+0x32>
 80026bc:	2300      	movs	r3, #0
 80026be:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80026c0:	f04f 32ff 	mov.w	r2, #4294967295
 80026c4:	69bb      	ldr	r3, [r7, #24]
 80026c6:	fa02 f303 	lsl.w	r3, r2, r3
 80026ca:	43da      	mvns	r2, r3
 80026cc:	68bb      	ldr	r3, [r7, #8]
 80026ce:	401a      	ands	r2, r3
 80026d0:	697b      	ldr	r3, [r7, #20]
 80026d2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80026d4:	f04f 31ff 	mov.w	r1, #4294967295
 80026d8:	697b      	ldr	r3, [r7, #20]
 80026da:	fa01 f303 	lsl.w	r3, r1, r3
 80026de:	43d9      	mvns	r1, r3
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80026e4:	4313      	orrs	r3, r2
         );
}
 80026e6:	4618      	mov	r0, r3
 80026e8:	3724      	adds	r7, #36	; 0x24
 80026ea:	46bd      	mov	sp, r7
 80026ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f0:	4770      	bx	lr
	...

080026f4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80026f4:	b580      	push	{r7, lr}
 80026f6:	b082      	sub	sp, #8
 80026f8:	af00      	add	r7, sp, #0
 80026fa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	3b01      	subs	r3, #1
 8002700:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002704:	d301      	bcc.n	800270a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002706:	2301      	movs	r3, #1
 8002708:	e00f      	b.n	800272a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800270a:	4a0a      	ldr	r2, [pc, #40]	; (8002734 <SysTick_Config+0x40>)
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	3b01      	subs	r3, #1
 8002710:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002712:	210f      	movs	r1, #15
 8002714:	f04f 30ff 	mov.w	r0, #4294967295
 8002718:	f7ff ff8e 	bl	8002638 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800271c:	4b05      	ldr	r3, [pc, #20]	; (8002734 <SysTick_Config+0x40>)
 800271e:	2200      	movs	r2, #0
 8002720:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002722:	4b04      	ldr	r3, [pc, #16]	; (8002734 <SysTick_Config+0x40>)
 8002724:	2207      	movs	r2, #7
 8002726:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002728:	2300      	movs	r3, #0
}
 800272a:	4618      	mov	r0, r3
 800272c:	3708      	adds	r7, #8
 800272e:	46bd      	mov	sp, r7
 8002730:	bd80      	pop	{r7, pc}
 8002732:	bf00      	nop
 8002734:	e000e010 	.word	0xe000e010

08002738 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002738:	b580      	push	{r7, lr}
 800273a:	b082      	sub	sp, #8
 800273c:	af00      	add	r7, sp, #0
 800273e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002740:	6878      	ldr	r0, [r7, #4]
 8002742:	f7ff ff29 	bl	8002598 <__NVIC_SetPriorityGrouping>
}
 8002746:	bf00      	nop
 8002748:	3708      	adds	r7, #8
 800274a:	46bd      	mov	sp, r7
 800274c:	bd80      	pop	{r7, pc}

0800274e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800274e:	b580      	push	{r7, lr}
 8002750:	b086      	sub	sp, #24
 8002752:	af00      	add	r7, sp, #0
 8002754:	4603      	mov	r3, r0
 8002756:	60b9      	str	r1, [r7, #8]
 8002758:	607a      	str	r2, [r7, #4]
 800275a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800275c:	2300      	movs	r3, #0
 800275e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002760:	f7ff ff3e 	bl	80025e0 <__NVIC_GetPriorityGrouping>
 8002764:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002766:	687a      	ldr	r2, [r7, #4]
 8002768:	68b9      	ldr	r1, [r7, #8]
 800276a:	6978      	ldr	r0, [r7, #20]
 800276c:	f7ff ff8e 	bl	800268c <NVIC_EncodePriority>
 8002770:	4602      	mov	r2, r0
 8002772:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002776:	4611      	mov	r1, r2
 8002778:	4618      	mov	r0, r3
 800277a:	f7ff ff5d 	bl	8002638 <__NVIC_SetPriority>
}
 800277e:	bf00      	nop
 8002780:	3718      	adds	r7, #24
 8002782:	46bd      	mov	sp, r7
 8002784:	bd80      	pop	{r7, pc}

08002786 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002786:	b580      	push	{r7, lr}
 8002788:	b082      	sub	sp, #8
 800278a:	af00      	add	r7, sp, #0
 800278c:	4603      	mov	r3, r0
 800278e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002790:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002794:	4618      	mov	r0, r3
 8002796:	f7ff ff31 	bl	80025fc <__NVIC_EnableIRQ>
}
 800279a:	bf00      	nop
 800279c:	3708      	adds	r7, #8
 800279e:	46bd      	mov	sp, r7
 80027a0:	bd80      	pop	{r7, pc}

080027a2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80027a2:	b580      	push	{r7, lr}
 80027a4:	b082      	sub	sp, #8
 80027a6:	af00      	add	r7, sp, #0
 80027a8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80027aa:	6878      	ldr	r0, [r7, #4]
 80027ac:	f7ff ffa2 	bl	80026f4 <SysTick_Config>
 80027b0:	4603      	mov	r3, r0
}
 80027b2:	4618      	mov	r0, r3
 80027b4:	3708      	adds	r7, #8
 80027b6:	46bd      	mov	sp, r7
 80027b8:	bd80      	pop	{r7, pc}
	...

080027bc <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80027bc:	b580      	push	{r7, lr}
 80027be:	b086      	sub	sp, #24
 80027c0:	af00      	add	r7, sp, #0
 80027c2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80027c4:	2300      	movs	r3, #0
 80027c6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80027c8:	f7ff feb6 	bl	8002538 <HAL_GetTick>
 80027cc:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d101      	bne.n	80027d8 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80027d4:	2301      	movs	r3, #1
 80027d6:	e099      	b.n	800290c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	2202      	movs	r2, #2
 80027dc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	2200      	movs	r2, #0
 80027e4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	681a      	ldr	r2, [r3, #0]
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	f022 0201 	bic.w	r2, r2, #1
 80027f6:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80027f8:	e00f      	b.n	800281a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80027fa:	f7ff fe9d 	bl	8002538 <HAL_GetTick>
 80027fe:	4602      	mov	r2, r0
 8002800:	693b      	ldr	r3, [r7, #16]
 8002802:	1ad3      	subs	r3, r2, r3
 8002804:	2b05      	cmp	r3, #5
 8002806:	d908      	bls.n	800281a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	2220      	movs	r2, #32
 800280c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	2203      	movs	r2, #3
 8002812:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8002816:	2303      	movs	r3, #3
 8002818:	e078      	b.n	800290c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	f003 0301 	and.w	r3, r3, #1
 8002824:	2b00      	cmp	r3, #0
 8002826:	d1e8      	bne.n	80027fa <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002830:	697a      	ldr	r2, [r7, #20]
 8002832:	4b38      	ldr	r3, [pc, #224]	; (8002914 <HAL_DMA_Init+0x158>)
 8002834:	4013      	ands	r3, r2
 8002836:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	685a      	ldr	r2, [r3, #4]
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	689b      	ldr	r3, [r3, #8]
 8002840:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002846:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	691b      	ldr	r3, [r3, #16]
 800284c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002852:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	699b      	ldr	r3, [r3, #24]
 8002858:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800285e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	6a1b      	ldr	r3, [r3, #32]
 8002864:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002866:	697a      	ldr	r2, [r7, #20]
 8002868:	4313      	orrs	r3, r2
 800286a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002870:	2b04      	cmp	r3, #4
 8002872:	d107      	bne.n	8002884 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800287c:	4313      	orrs	r3, r2
 800287e:	697a      	ldr	r2, [r7, #20]
 8002880:	4313      	orrs	r3, r2
 8002882:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	697a      	ldr	r2, [r7, #20]
 800288a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	695b      	ldr	r3, [r3, #20]
 8002892:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002894:	697b      	ldr	r3, [r7, #20]
 8002896:	f023 0307 	bic.w	r3, r3, #7
 800289a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028a0:	697a      	ldr	r2, [r7, #20]
 80028a2:	4313      	orrs	r3, r2
 80028a4:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028aa:	2b04      	cmp	r3, #4
 80028ac:	d117      	bne.n	80028de <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028b2:	697a      	ldr	r2, [r7, #20]
 80028b4:	4313      	orrs	r3, r2
 80028b6:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d00e      	beq.n	80028de <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80028c0:	6878      	ldr	r0, [r7, #4]
 80028c2:	f000 fb01 	bl	8002ec8 <DMA_CheckFifoParam>
 80028c6:	4603      	mov	r3, r0
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d008      	beq.n	80028de <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	2240      	movs	r2, #64	; 0x40
 80028d0:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	2201      	movs	r2, #1
 80028d6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80028da:	2301      	movs	r3, #1
 80028dc:	e016      	b.n	800290c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	697a      	ldr	r2, [r7, #20]
 80028e4:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80028e6:	6878      	ldr	r0, [r7, #4]
 80028e8:	f000 fab8 	bl	8002e5c <DMA_CalcBaseAndBitshift>
 80028ec:	4603      	mov	r3, r0
 80028ee:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028f4:	223f      	movs	r2, #63	; 0x3f
 80028f6:	409a      	lsls	r2, r3
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	2200      	movs	r2, #0
 8002900:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	2201      	movs	r2, #1
 8002906:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800290a:	2300      	movs	r3, #0
}
 800290c:	4618      	mov	r0, r3
 800290e:	3718      	adds	r7, #24
 8002910:	46bd      	mov	sp, r7
 8002912:	bd80      	pop	{r7, pc}
 8002914:	f010803f 	.word	0xf010803f

08002918 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002918:	b580      	push	{r7, lr}
 800291a:	b086      	sub	sp, #24
 800291c:	af00      	add	r7, sp, #0
 800291e:	60f8      	str	r0, [r7, #12]
 8002920:	60b9      	str	r1, [r7, #8]
 8002922:	607a      	str	r2, [r7, #4]
 8002924:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002926:	2300      	movs	r3, #0
 8002928:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800292e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002936:	2b01      	cmp	r3, #1
 8002938:	d101      	bne.n	800293e <HAL_DMA_Start_IT+0x26>
 800293a:	2302      	movs	r3, #2
 800293c:	e040      	b.n	80029c0 <HAL_DMA_Start_IT+0xa8>
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	2201      	movs	r2, #1
 8002942:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800294c:	b2db      	uxtb	r3, r3
 800294e:	2b01      	cmp	r3, #1
 8002950:	d12f      	bne.n	80029b2 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	2202      	movs	r2, #2
 8002956:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	2200      	movs	r2, #0
 800295e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002960:	683b      	ldr	r3, [r7, #0]
 8002962:	687a      	ldr	r2, [r7, #4]
 8002964:	68b9      	ldr	r1, [r7, #8]
 8002966:	68f8      	ldr	r0, [r7, #12]
 8002968:	f000 fa4a 	bl	8002e00 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002970:	223f      	movs	r2, #63	; 0x3f
 8002972:	409a      	lsls	r2, r3
 8002974:	693b      	ldr	r3, [r7, #16]
 8002976:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	681a      	ldr	r2, [r3, #0]
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	f042 0216 	orr.w	r2, r2, #22
 8002986:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800298c:	2b00      	cmp	r3, #0
 800298e:	d007      	beq.n	80029a0 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	681a      	ldr	r2, [r3, #0]
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	f042 0208 	orr.w	r2, r2, #8
 800299e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	681a      	ldr	r2, [r3, #0]
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	f042 0201 	orr.w	r2, r2, #1
 80029ae:	601a      	str	r2, [r3, #0]
 80029b0:	e005      	b.n	80029be <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	2200      	movs	r2, #0
 80029b6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80029ba:	2302      	movs	r3, #2
 80029bc:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80029be:	7dfb      	ldrb	r3, [r7, #23]
}
 80029c0:	4618      	mov	r0, r3
 80029c2:	3718      	adds	r7, #24
 80029c4:	46bd      	mov	sp, r7
 80029c6:	bd80      	pop	{r7, pc}

080029c8 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80029c8:	b580      	push	{r7, lr}
 80029ca:	b084      	sub	sp, #16
 80029cc:	af00      	add	r7, sp, #0
 80029ce:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029d4:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80029d6:	f7ff fdaf 	bl	8002538 <HAL_GetTick>
 80029da:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80029e2:	b2db      	uxtb	r3, r3
 80029e4:	2b02      	cmp	r3, #2
 80029e6:	d008      	beq.n	80029fa <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	2280      	movs	r2, #128	; 0x80
 80029ec:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	2200      	movs	r2, #0
 80029f2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80029f6:	2301      	movs	r3, #1
 80029f8:	e052      	b.n	8002aa0 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	681a      	ldr	r2, [r3, #0]
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	f022 0216 	bic.w	r2, r2, #22
 8002a08:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	695a      	ldr	r2, [r3, #20]
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002a18:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d103      	bne.n	8002a2a <HAL_DMA_Abort+0x62>
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d007      	beq.n	8002a3a <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	681a      	ldr	r2, [r3, #0]
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	f022 0208 	bic.w	r2, r2, #8
 8002a38:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	681a      	ldr	r2, [r3, #0]
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	f022 0201 	bic.w	r2, r2, #1
 8002a48:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002a4a:	e013      	b.n	8002a74 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002a4c:	f7ff fd74 	bl	8002538 <HAL_GetTick>
 8002a50:	4602      	mov	r2, r0
 8002a52:	68bb      	ldr	r3, [r7, #8]
 8002a54:	1ad3      	subs	r3, r2, r3
 8002a56:	2b05      	cmp	r3, #5
 8002a58:	d90c      	bls.n	8002a74 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	2220      	movs	r2, #32
 8002a5e:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	2203      	movs	r2, #3
 8002a64:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	2200      	movs	r2, #0
 8002a6c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8002a70:	2303      	movs	r3, #3
 8002a72:	e015      	b.n	8002aa0 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	f003 0301 	and.w	r3, r3, #1
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d1e4      	bne.n	8002a4c <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a86:	223f      	movs	r2, #63	; 0x3f
 8002a88:	409a      	lsls	r2, r3
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	2201      	movs	r2, #1
 8002a92:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	2200      	movs	r2, #0
 8002a9a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8002a9e:	2300      	movs	r3, #0
}
 8002aa0:	4618      	mov	r0, r3
 8002aa2:	3710      	adds	r7, #16
 8002aa4:	46bd      	mov	sp, r7
 8002aa6:	bd80      	pop	{r7, pc}

08002aa8 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002aa8:	b480      	push	{r7}
 8002aaa:	b083      	sub	sp, #12
 8002aac:	af00      	add	r7, sp, #0
 8002aae:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002ab6:	b2db      	uxtb	r3, r3
 8002ab8:	2b02      	cmp	r3, #2
 8002aba:	d004      	beq.n	8002ac6 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	2280      	movs	r2, #128	; 0x80
 8002ac0:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002ac2:	2301      	movs	r3, #1
 8002ac4:	e00c      	b.n	8002ae0 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	2205      	movs	r2, #5
 8002aca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	681a      	ldr	r2, [r3, #0]
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	f022 0201 	bic.w	r2, r2, #1
 8002adc:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002ade:	2300      	movs	r3, #0
}
 8002ae0:	4618      	mov	r0, r3
 8002ae2:	370c      	adds	r7, #12
 8002ae4:	46bd      	mov	sp, r7
 8002ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aea:	4770      	bx	lr

08002aec <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002aec:	b580      	push	{r7, lr}
 8002aee:	b086      	sub	sp, #24
 8002af0:	af00      	add	r7, sp, #0
 8002af2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002af4:	2300      	movs	r3, #0
 8002af6:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002af8:	4b8e      	ldr	r3, [pc, #568]	; (8002d34 <HAL_DMA_IRQHandler+0x248>)
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	4a8e      	ldr	r2, [pc, #568]	; (8002d38 <HAL_DMA_IRQHandler+0x24c>)
 8002afe:	fba2 2303 	umull	r2, r3, r2, r3
 8002b02:	0a9b      	lsrs	r3, r3, #10
 8002b04:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b0a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002b0c:	693b      	ldr	r3, [r7, #16]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b16:	2208      	movs	r2, #8
 8002b18:	409a      	lsls	r2, r3
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	4013      	ands	r3, r2
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d01a      	beq.n	8002b58 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	f003 0304 	and.w	r3, r3, #4
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d013      	beq.n	8002b58 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	681a      	ldr	r2, [r3, #0]
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	f022 0204 	bic.w	r2, r2, #4
 8002b3e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b44:	2208      	movs	r2, #8
 8002b46:	409a      	lsls	r2, r3
 8002b48:	693b      	ldr	r3, [r7, #16]
 8002b4a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b50:	f043 0201 	orr.w	r2, r3, #1
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b5c:	2201      	movs	r2, #1
 8002b5e:	409a      	lsls	r2, r3
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	4013      	ands	r3, r2
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d012      	beq.n	8002b8e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	695b      	ldr	r3, [r3, #20]
 8002b6e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d00b      	beq.n	8002b8e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b7a:	2201      	movs	r2, #1
 8002b7c:	409a      	lsls	r2, r3
 8002b7e:	693b      	ldr	r3, [r7, #16]
 8002b80:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b86:	f043 0202 	orr.w	r2, r3, #2
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b92:	2204      	movs	r2, #4
 8002b94:	409a      	lsls	r2, r3
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	4013      	ands	r3, r2
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d012      	beq.n	8002bc4 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	f003 0302 	and.w	r3, r3, #2
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d00b      	beq.n	8002bc4 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002bb0:	2204      	movs	r2, #4
 8002bb2:	409a      	lsls	r2, r3
 8002bb4:	693b      	ldr	r3, [r7, #16]
 8002bb6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002bbc:	f043 0204 	orr.w	r2, r3, #4
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002bc8:	2210      	movs	r2, #16
 8002bca:	409a      	lsls	r2, r3
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	4013      	ands	r3, r2
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d043      	beq.n	8002c5c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	f003 0308 	and.w	r3, r3, #8
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d03c      	beq.n	8002c5c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002be6:	2210      	movs	r2, #16
 8002be8:	409a      	lsls	r2, r3
 8002bea:	693b      	ldr	r3, [r7, #16]
 8002bec:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d018      	beq.n	8002c2e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d108      	bne.n	8002c1c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d024      	beq.n	8002c5c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c16:	6878      	ldr	r0, [r7, #4]
 8002c18:	4798      	blx	r3
 8002c1a:	e01f      	b.n	8002c5c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d01b      	beq.n	8002c5c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002c28:	6878      	ldr	r0, [r7, #4]
 8002c2a:	4798      	blx	r3
 8002c2c:	e016      	b.n	8002c5c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d107      	bne.n	8002c4c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	681a      	ldr	r2, [r3, #0]
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	f022 0208 	bic.w	r2, r2, #8
 8002c4a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d003      	beq.n	8002c5c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c58:	6878      	ldr	r0, [r7, #4]
 8002c5a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c60:	2220      	movs	r2, #32
 8002c62:	409a      	lsls	r2, r3
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	4013      	ands	r3, r2
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	f000 808f 	beq.w	8002d8c <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	f003 0310 	and.w	r3, r3, #16
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	f000 8087 	beq.w	8002d8c <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c82:	2220      	movs	r2, #32
 8002c84:	409a      	lsls	r2, r3
 8002c86:	693b      	ldr	r3, [r7, #16]
 8002c88:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002c90:	b2db      	uxtb	r3, r3
 8002c92:	2b05      	cmp	r3, #5
 8002c94:	d136      	bne.n	8002d04 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	681a      	ldr	r2, [r3, #0]
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	f022 0216 	bic.w	r2, r2, #22
 8002ca4:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	695a      	ldr	r2, [r3, #20]
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002cb4:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d103      	bne.n	8002cc6 <HAL_DMA_IRQHandler+0x1da>
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d007      	beq.n	8002cd6 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	681a      	ldr	r2, [r3, #0]
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	f022 0208 	bic.w	r2, r2, #8
 8002cd4:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002cda:	223f      	movs	r2, #63	; 0x3f
 8002cdc:	409a      	lsls	r2, r3
 8002cde:	693b      	ldr	r3, [r7, #16]
 8002ce0:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	2201      	movs	r2, #1
 8002ce6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	2200      	movs	r2, #0
 8002cee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d07e      	beq.n	8002df8 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002cfe:	6878      	ldr	r0, [r7, #4]
 8002d00:	4798      	blx	r3
        }
        return;
 8002d02:	e079      	b.n	8002df8 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d01d      	beq.n	8002d4e <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d10d      	bne.n	8002d3c <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d031      	beq.n	8002d8c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d2c:	6878      	ldr	r0, [r7, #4]
 8002d2e:	4798      	blx	r3
 8002d30:	e02c      	b.n	8002d8c <HAL_DMA_IRQHandler+0x2a0>
 8002d32:	bf00      	nop
 8002d34:	20000004 	.word	0x20000004
 8002d38:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d023      	beq.n	8002d8c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d48:	6878      	ldr	r0, [r7, #4]
 8002d4a:	4798      	blx	r3
 8002d4c:	e01e      	b.n	8002d8c <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d10f      	bne.n	8002d7c <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	681a      	ldr	r2, [r3, #0]
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	f022 0210 	bic.w	r2, r2, #16
 8002d6a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	2201      	movs	r2, #1
 8002d70:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	2200      	movs	r2, #0
 8002d78:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d003      	beq.n	8002d8c <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d88:	6878      	ldr	r0, [r7, #4]
 8002d8a:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d032      	beq.n	8002dfa <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d98:	f003 0301 	and.w	r3, r3, #1
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d022      	beq.n	8002de6 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	2205      	movs	r2, #5
 8002da4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	681a      	ldr	r2, [r3, #0]
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	f022 0201 	bic.w	r2, r2, #1
 8002db6:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002db8:	68bb      	ldr	r3, [r7, #8]
 8002dba:	3301      	adds	r3, #1
 8002dbc:	60bb      	str	r3, [r7, #8]
 8002dbe:	697a      	ldr	r2, [r7, #20]
 8002dc0:	429a      	cmp	r2, r3
 8002dc2:	d307      	bcc.n	8002dd4 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	f003 0301 	and.w	r3, r3, #1
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d1f2      	bne.n	8002db8 <HAL_DMA_IRQHandler+0x2cc>
 8002dd2:	e000      	b.n	8002dd6 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002dd4:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	2201      	movs	r2, #1
 8002dda:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	2200      	movs	r2, #0
 8002de2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d005      	beq.n	8002dfa <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002df2:	6878      	ldr	r0, [r7, #4]
 8002df4:	4798      	blx	r3
 8002df6:	e000      	b.n	8002dfa <HAL_DMA_IRQHandler+0x30e>
        return;
 8002df8:	bf00      	nop
    }
  }
}
 8002dfa:	3718      	adds	r7, #24
 8002dfc:	46bd      	mov	sp, r7
 8002dfe:	bd80      	pop	{r7, pc}

08002e00 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002e00:	b480      	push	{r7}
 8002e02:	b085      	sub	sp, #20
 8002e04:	af00      	add	r7, sp, #0
 8002e06:	60f8      	str	r0, [r7, #12]
 8002e08:	60b9      	str	r1, [r7, #8]
 8002e0a:	607a      	str	r2, [r7, #4]
 8002e0c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	681a      	ldr	r2, [r3, #0]
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002e1c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	683a      	ldr	r2, [r7, #0]
 8002e24:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	689b      	ldr	r3, [r3, #8]
 8002e2a:	2b40      	cmp	r3, #64	; 0x40
 8002e2c:	d108      	bne.n	8002e40 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	687a      	ldr	r2, [r7, #4]
 8002e34:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	68ba      	ldr	r2, [r7, #8]
 8002e3c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002e3e:	e007      	b.n	8002e50 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	68ba      	ldr	r2, [r7, #8]
 8002e46:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	687a      	ldr	r2, [r7, #4]
 8002e4e:	60da      	str	r2, [r3, #12]
}
 8002e50:	bf00      	nop
 8002e52:	3714      	adds	r7, #20
 8002e54:	46bd      	mov	sp, r7
 8002e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e5a:	4770      	bx	lr

08002e5c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002e5c:	b480      	push	{r7}
 8002e5e:	b085      	sub	sp, #20
 8002e60:	af00      	add	r7, sp, #0
 8002e62:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	b2db      	uxtb	r3, r3
 8002e6a:	3b10      	subs	r3, #16
 8002e6c:	4a14      	ldr	r2, [pc, #80]	; (8002ec0 <DMA_CalcBaseAndBitshift+0x64>)
 8002e6e:	fba2 2303 	umull	r2, r3, r2, r3
 8002e72:	091b      	lsrs	r3, r3, #4
 8002e74:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002e76:	4a13      	ldr	r2, [pc, #76]	; (8002ec4 <DMA_CalcBaseAndBitshift+0x68>)
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	4413      	add	r3, r2
 8002e7c:	781b      	ldrb	r3, [r3, #0]
 8002e7e:	461a      	mov	r2, r3
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	2b03      	cmp	r3, #3
 8002e88:	d909      	bls.n	8002e9e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002e92:	f023 0303 	bic.w	r3, r3, #3
 8002e96:	1d1a      	adds	r2, r3, #4
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	659a      	str	r2, [r3, #88]	; 0x58
 8002e9c:	e007      	b.n	8002eae <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002ea6:	f023 0303 	bic.w	r3, r3, #3
 8002eaa:	687a      	ldr	r2, [r7, #4]
 8002eac:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002eb2:	4618      	mov	r0, r3
 8002eb4:	3714      	adds	r7, #20
 8002eb6:	46bd      	mov	sp, r7
 8002eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ebc:	4770      	bx	lr
 8002ebe:	bf00      	nop
 8002ec0:	aaaaaaab 	.word	0xaaaaaaab
 8002ec4:	08009a68 	.word	0x08009a68

08002ec8 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002ec8:	b480      	push	{r7}
 8002eca:	b085      	sub	sp, #20
 8002ecc:	af00      	add	r7, sp, #0
 8002ece:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002ed0:	2300      	movs	r3, #0
 8002ed2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ed8:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	699b      	ldr	r3, [r3, #24]
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d11f      	bne.n	8002f22 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002ee2:	68bb      	ldr	r3, [r7, #8]
 8002ee4:	2b03      	cmp	r3, #3
 8002ee6:	d856      	bhi.n	8002f96 <DMA_CheckFifoParam+0xce>
 8002ee8:	a201      	add	r2, pc, #4	; (adr r2, 8002ef0 <DMA_CheckFifoParam+0x28>)
 8002eea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002eee:	bf00      	nop
 8002ef0:	08002f01 	.word	0x08002f01
 8002ef4:	08002f13 	.word	0x08002f13
 8002ef8:	08002f01 	.word	0x08002f01
 8002efc:	08002f97 	.word	0x08002f97
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f04:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d046      	beq.n	8002f9a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002f0c:	2301      	movs	r3, #1
 8002f0e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002f10:	e043      	b.n	8002f9a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f16:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002f1a:	d140      	bne.n	8002f9e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002f1c:	2301      	movs	r3, #1
 8002f1e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002f20:	e03d      	b.n	8002f9e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	699b      	ldr	r3, [r3, #24]
 8002f26:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002f2a:	d121      	bne.n	8002f70 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002f2c:	68bb      	ldr	r3, [r7, #8]
 8002f2e:	2b03      	cmp	r3, #3
 8002f30:	d837      	bhi.n	8002fa2 <DMA_CheckFifoParam+0xda>
 8002f32:	a201      	add	r2, pc, #4	; (adr r2, 8002f38 <DMA_CheckFifoParam+0x70>)
 8002f34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f38:	08002f49 	.word	0x08002f49
 8002f3c:	08002f4f 	.word	0x08002f4f
 8002f40:	08002f49 	.word	0x08002f49
 8002f44:	08002f61 	.word	0x08002f61
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002f48:	2301      	movs	r3, #1
 8002f4a:	73fb      	strb	r3, [r7, #15]
      break;
 8002f4c:	e030      	b.n	8002fb0 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f52:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d025      	beq.n	8002fa6 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002f5a:	2301      	movs	r3, #1
 8002f5c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002f5e:	e022      	b.n	8002fa6 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f64:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002f68:	d11f      	bne.n	8002faa <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002f6a:	2301      	movs	r3, #1
 8002f6c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002f6e:	e01c      	b.n	8002faa <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002f70:	68bb      	ldr	r3, [r7, #8]
 8002f72:	2b02      	cmp	r3, #2
 8002f74:	d903      	bls.n	8002f7e <DMA_CheckFifoParam+0xb6>
 8002f76:	68bb      	ldr	r3, [r7, #8]
 8002f78:	2b03      	cmp	r3, #3
 8002f7a:	d003      	beq.n	8002f84 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002f7c:	e018      	b.n	8002fb0 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002f7e:	2301      	movs	r3, #1
 8002f80:	73fb      	strb	r3, [r7, #15]
      break;
 8002f82:	e015      	b.n	8002fb0 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f88:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d00e      	beq.n	8002fae <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002f90:	2301      	movs	r3, #1
 8002f92:	73fb      	strb	r3, [r7, #15]
      break;
 8002f94:	e00b      	b.n	8002fae <DMA_CheckFifoParam+0xe6>
      break;
 8002f96:	bf00      	nop
 8002f98:	e00a      	b.n	8002fb0 <DMA_CheckFifoParam+0xe8>
      break;
 8002f9a:	bf00      	nop
 8002f9c:	e008      	b.n	8002fb0 <DMA_CheckFifoParam+0xe8>
      break;
 8002f9e:	bf00      	nop
 8002fa0:	e006      	b.n	8002fb0 <DMA_CheckFifoParam+0xe8>
      break;
 8002fa2:	bf00      	nop
 8002fa4:	e004      	b.n	8002fb0 <DMA_CheckFifoParam+0xe8>
      break;
 8002fa6:	bf00      	nop
 8002fa8:	e002      	b.n	8002fb0 <DMA_CheckFifoParam+0xe8>
      break;   
 8002faa:	bf00      	nop
 8002fac:	e000      	b.n	8002fb0 <DMA_CheckFifoParam+0xe8>
      break;
 8002fae:	bf00      	nop
    }
  } 
  
  return status; 
 8002fb0:	7bfb      	ldrb	r3, [r7, #15]
}
 8002fb2:	4618      	mov	r0, r3
 8002fb4:	3714      	adds	r7, #20
 8002fb6:	46bd      	mov	sp, r7
 8002fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fbc:	4770      	bx	lr
 8002fbe:	bf00      	nop

08002fc0 <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8002fc0:	b580      	push	{r7, lr}
 8002fc2:	b086      	sub	sp, #24
 8002fc4:	af00      	add	r7, sp, #0
 8002fc6:	60f8      	str	r0, [r7, #12]
 8002fc8:	60b9      	str	r1, [r7, #8]
 8002fca:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 8002fce:	2301      	movs	r3, #1
 8002fd0:	75fb      	strb	r3, [r7, #23]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8002fd2:	4b23      	ldr	r3, [pc, #140]	; (8003060 <HAL_FLASH_Program+0xa0>)
 8002fd4:	7e1b      	ldrb	r3, [r3, #24]
 8002fd6:	2b01      	cmp	r3, #1
 8002fd8:	d101      	bne.n	8002fde <HAL_FLASH_Program+0x1e>
 8002fda:	2302      	movs	r3, #2
 8002fdc:	e03b      	b.n	8003056 <HAL_FLASH_Program+0x96>
 8002fde:	4b20      	ldr	r3, [pc, #128]	; (8003060 <HAL_FLASH_Program+0xa0>)
 8002fe0:	2201      	movs	r2, #1
 8002fe2:	761a      	strb	r2, [r3, #24]
  
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002fe4:	f24c 3050 	movw	r0, #50000	; 0xc350
 8002fe8:	f000 f870 	bl	80030cc <FLASH_WaitForLastOperation>
 8002fec:	4603      	mov	r3, r0
 8002fee:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
 8002ff0:	7dfb      	ldrb	r3, [r7, #23]
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d12b      	bne.n	800304e <HAL_FLASH_Program+0x8e>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d105      	bne.n	8003008 <HAL_FLASH_Program+0x48>
    {
      /*Program byte (8-bit) at a specified address.*/
      FLASH_Program_Byte(Address, (uint8_t) Data);
 8002ffc:	783b      	ldrb	r3, [r7, #0]
 8002ffe:	4619      	mov	r1, r3
 8003000:	68b8      	ldr	r0, [r7, #8]
 8003002:	f000 f91b 	bl	800323c <FLASH_Program_Byte>
 8003006:	e016      	b.n	8003036 <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	2b01      	cmp	r3, #1
 800300c:	d105      	bne.n	800301a <HAL_FLASH_Program+0x5a>
    {
      /*Program halfword (16-bit) at a specified address.*/
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 800300e:	883b      	ldrh	r3, [r7, #0]
 8003010:	4619      	mov	r1, r3
 8003012:	68b8      	ldr	r0, [r7, #8]
 8003014:	f000 f8ee 	bl	80031f4 <FLASH_Program_HalfWord>
 8003018:	e00d      	b.n	8003036 <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	2b02      	cmp	r3, #2
 800301e:	d105      	bne.n	800302c <HAL_FLASH_Program+0x6c>
    {
      /*Program word (32-bit) at a specified address.*/
      FLASH_Program_Word(Address, (uint32_t) Data);
 8003020:	683b      	ldr	r3, [r7, #0]
 8003022:	4619      	mov	r1, r3
 8003024:	68b8      	ldr	r0, [r7, #8]
 8003026:	f000 f8c3 	bl	80031b0 <FLASH_Program_Word>
 800302a:	e004      	b.n	8003036 <HAL_FLASH_Program+0x76>
    }
    else
    {
      /*Program double word (64-bit) at a specified address.*/
      FLASH_Program_DoubleWord(Address, Data);
 800302c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003030:	68b8      	ldr	r0, [r7, #8]
 8003032:	f000 f88b 	bl	800314c <FLASH_Program_DoubleWord>
    }
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8003036:	f24c 3050 	movw	r0, #50000	; 0xc350
 800303a:	f000 f847 	bl	80030cc <FLASH_WaitForLastOperation>
 800303e:	4603      	mov	r3, r0
 8003040:	75fb      	strb	r3, [r7, #23]
    
    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);  
 8003042:	4b08      	ldr	r3, [pc, #32]	; (8003064 <HAL_FLASH_Program+0xa4>)
 8003044:	691b      	ldr	r3, [r3, #16]
 8003046:	4a07      	ldr	r2, [pc, #28]	; (8003064 <HAL_FLASH_Program+0xa4>)
 8003048:	f023 0301 	bic.w	r3, r3, #1
 800304c:	6113      	str	r3, [r2, #16]
  }
  
  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800304e:	4b04      	ldr	r3, [pc, #16]	; (8003060 <HAL_FLASH_Program+0xa0>)
 8003050:	2200      	movs	r2, #0
 8003052:	761a      	strb	r2, [r3, #24]
  
  return status;
 8003054:	7dfb      	ldrb	r3, [r7, #23]
}
 8003056:	4618      	mov	r0, r3
 8003058:	3718      	adds	r7, #24
 800305a:	46bd      	mov	sp, r7
 800305c:	bd80      	pop	{r7, pc}
 800305e:	bf00      	nop
 8003060:	2000a42c 	.word	0x2000a42c
 8003064:	40023c00 	.word	0x40023c00

08003068 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8003068:	b480      	push	{r7}
 800306a:	b083      	sub	sp, #12
 800306c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 800306e:	2300      	movs	r3, #0
 8003070:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8003072:	4b0b      	ldr	r3, [pc, #44]	; (80030a0 <HAL_FLASH_Unlock+0x38>)
 8003074:	691b      	ldr	r3, [r3, #16]
 8003076:	2b00      	cmp	r3, #0
 8003078:	da0b      	bge.n	8003092 <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 800307a:	4b09      	ldr	r3, [pc, #36]	; (80030a0 <HAL_FLASH_Unlock+0x38>)
 800307c:	4a09      	ldr	r2, [pc, #36]	; (80030a4 <HAL_FLASH_Unlock+0x3c>)
 800307e:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8003080:	4b07      	ldr	r3, [pc, #28]	; (80030a0 <HAL_FLASH_Unlock+0x38>)
 8003082:	4a09      	ldr	r2, [pc, #36]	; (80030a8 <HAL_FLASH_Unlock+0x40>)
 8003084:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8003086:	4b06      	ldr	r3, [pc, #24]	; (80030a0 <HAL_FLASH_Unlock+0x38>)
 8003088:	691b      	ldr	r3, [r3, #16]
 800308a:	2b00      	cmp	r3, #0
 800308c:	da01      	bge.n	8003092 <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 800308e:	2301      	movs	r3, #1
 8003090:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 8003092:	79fb      	ldrb	r3, [r7, #7]
}
 8003094:	4618      	mov	r0, r3
 8003096:	370c      	adds	r7, #12
 8003098:	46bd      	mov	sp, r7
 800309a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800309e:	4770      	bx	lr
 80030a0:	40023c00 	.word	0x40023c00
 80030a4:	45670123 	.word	0x45670123
 80030a8:	cdef89ab 	.word	0xcdef89ab

080030ac <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 80030ac:	b480      	push	{r7}
 80030ae:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 80030b0:	4b05      	ldr	r3, [pc, #20]	; (80030c8 <HAL_FLASH_Lock+0x1c>)
 80030b2:	691b      	ldr	r3, [r3, #16]
 80030b4:	4a04      	ldr	r2, [pc, #16]	; (80030c8 <HAL_FLASH_Lock+0x1c>)
 80030b6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80030ba:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 80030bc:	2300      	movs	r3, #0
}
 80030be:	4618      	mov	r0, r3
 80030c0:	46bd      	mov	sp, r7
 80030c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030c6:	4770      	bx	lr
 80030c8:	40023c00 	.word	0x40023c00

080030cc <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{ 
 80030cc:	b580      	push	{r7, lr}
 80030ce:	b084      	sub	sp, #16
 80030d0:	af00      	add	r7, sp, #0
 80030d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80030d4:	2300      	movs	r3, #0
 80030d6:	60fb      	str	r3, [r7, #12]
  
  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80030d8:	4b1a      	ldr	r3, [pc, #104]	; (8003144 <FLASH_WaitForLastOperation+0x78>)
 80030da:	2200      	movs	r2, #0
 80030dc:	61da      	str	r2, [r3, #28]
  
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 80030de:	f7ff fa2b 	bl	8002538 <HAL_GetTick>
 80030e2:	60f8      	str	r0, [r7, #12]

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 80030e4:	e010      	b.n	8003108 <FLASH_WaitForLastOperation+0x3c>
  { 
    if(Timeout != HAL_MAX_DELAY)
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030ec:	d00c      	beq.n	8003108 <FLASH_WaitForLastOperation+0x3c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d007      	beq.n	8003104 <FLASH_WaitForLastOperation+0x38>
 80030f4:	f7ff fa20 	bl	8002538 <HAL_GetTick>
 80030f8:	4602      	mov	r2, r0
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	1ad3      	subs	r3, r2, r3
 80030fe:	687a      	ldr	r2, [r7, #4]
 8003100:	429a      	cmp	r2, r3
 8003102:	d201      	bcs.n	8003108 <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 8003104:	2303      	movs	r3, #3
 8003106:	e019      	b.n	800313c <FLASH_WaitForLastOperation+0x70>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8003108:	4b0f      	ldr	r3, [pc, #60]	; (8003148 <FLASH_WaitForLastOperation+0x7c>)
 800310a:	68db      	ldr	r3, [r3, #12]
 800310c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003110:	2b00      	cmp	r3, #0
 8003112:	d1e8      	bne.n	80030e6 <FLASH_WaitForLastOperation+0x1a>
      }
    } 
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 8003114:	4b0c      	ldr	r3, [pc, #48]	; (8003148 <FLASH_WaitForLastOperation+0x7c>)
 8003116:	68db      	ldr	r3, [r3, #12]
 8003118:	f003 0301 	and.w	r3, r3, #1
 800311c:	2b00      	cmp	r3, #0
 800311e:	d002      	beq.n	8003126 <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8003120:	4b09      	ldr	r3, [pc, #36]	; (8003148 <FLASH_WaitForLastOperation+0x7c>)
 8003122:	2201      	movs	r2, #1
 8003124:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)  
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR | FLASH_FLAG_RDERR)) != RESET)
#else
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 8003126:	4b08      	ldr	r3, [pc, #32]	; (8003148 <FLASH_WaitForLastOperation+0x7c>)
 8003128:	68db      	ldr	r3, [r3, #12]
 800312a:	f003 03f2 	and.w	r3, r3, #242	; 0xf2
 800312e:	2b00      	cmp	r3, #0
 8003130:	d003      	beq.n	800313a <FLASH_WaitForLastOperation+0x6e>
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8003132:	f000 f8a5 	bl	8003280 <FLASH_SetErrorCode>
    return HAL_ERROR;
 8003136:	2301      	movs	r3, #1
 8003138:	e000      	b.n	800313c <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 800313a:	2300      	movs	r3, #0
  
}  
 800313c:	4618      	mov	r0, r3
 800313e:	3710      	adds	r7, #16
 8003140:	46bd      	mov	sp, r7
 8003142:	bd80      	pop	{r7, pc}
 8003144:	2000a42c 	.word	0x2000a42c
 8003148:	40023c00 	.word	0x40023c00

0800314c <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 800314c:	b480      	push	{r7}
 800314e:	b085      	sub	sp, #20
 8003150:	af00      	add	r7, sp, #0
 8003152:	60f8      	str	r0, [r7, #12]
 8003154:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8003158:	4b14      	ldr	r3, [pc, #80]	; (80031ac <FLASH_Program_DoubleWord+0x60>)
 800315a:	691b      	ldr	r3, [r3, #16]
 800315c:	4a13      	ldr	r2, [pc, #76]	; (80031ac <FLASH_Program_DoubleWord+0x60>)
 800315e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003162:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 8003164:	4b11      	ldr	r3, [pc, #68]	; (80031ac <FLASH_Program_DoubleWord+0x60>)
 8003166:	691b      	ldr	r3, [r3, #16]
 8003168:	4a10      	ldr	r2, [pc, #64]	; (80031ac <FLASH_Program_DoubleWord+0x60>)
 800316a:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 800316e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8003170:	4b0e      	ldr	r3, [pc, #56]	; (80031ac <FLASH_Program_DoubleWord+0x60>)
 8003172:	691b      	ldr	r3, [r3, #16]
 8003174:	4a0d      	ldr	r2, [pc, #52]	; (80031ac <FLASH_Program_DoubleWord+0x60>)
 8003176:	f043 0301 	orr.w	r3, r3, #1
 800317a:	6113      	str	r3, [r2, #16]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	683a      	ldr	r2, [r7, #0]
 8003180:	601a      	str	r2, [r3, #0]
           so that all instructions following the ISB are fetched from cache or memory,
           after the instruction has been completed.
 */
__STATIC_FORCEINLINE void __ISB(void)
{
  __ASM volatile ("isb 0xF":::"memory");
 8003182:	f3bf 8f6f 	isb	sy
}
 8003186:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
 8003188:	e9d7 0100 	ldrd	r0, r1, [r7]
 800318c:	f04f 0200 	mov.w	r2, #0
 8003190:	f04f 0300 	mov.w	r3, #0
 8003194:	000a      	movs	r2, r1
 8003196:	2300      	movs	r3, #0
 8003198:	68f9      	ldr	r1, [r7, #12]
 800319a:	3104      	adds	r1, #4
 800319c:	4613      	mov	r3, r2
 800319e:	600b      	str	r3, [r1, #0]
}
 80031a0:	bf00      	nop
 80031a2:	3714      	adds	r7, #20
 80031a4:	46bd      	mov	sp, r7
 80031a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031aa:	4770      	bx	lr
 80031ac:	40023c00 	.word	0x40023c00

080031b0 <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 80031b0:	b480      	push	{r7}
 80031b2:	b083      	sub	sp, #12
 80031b4:	af00      	add	r7, sp, #0
 80031b6:	6078      	str	r0, [r7, #4]
 80031b8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80031ba:	4b0d      	ldr	r3, [pc, #52]	; (80031f0 <FLASH_Program_Word+0x40>)
 80031bc:	691b      	ldr	r3, [r3, #16]
 80031be:	4a0c      	ldr	r2, [pc, #48]	; (80031f0 <FLASH_Program_Word+0x40>)
 80031c0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80031c4:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 80031c6:	4b0a      	ldr	r3, [pc, #40]	; (80031f0 <FLASH_Program_Word+0x40>)
 80031c8:	691b      	ldr	r3, [r3, #16]
 80031ca:	4a09      	ldr	r2, [pc, #36]	; (80031f0 <FLASH_Program_Word+0x40>)
 80031cc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80031d0:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 80031d2:	4b07      	ldr	r3, [pc, #28]	; (80031f0 <FLASH_Program_Word+0x40>)
 80031d4:	691b      	ldr	r3, [r3, #16]
 80031d6:	4a06      	ldr	r2, [pc, #24]	; (80031f0 <FLASH_Program_Word+0x40>)
 80031d8:	f043 0301 	orr.w	r3, r3, #1
 80031dc:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t*)Address = Data;
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	683a      	ldr	r2, [r7, #0]
 80031e2:	601a      	str	r2, [r3, #0]
}
 80031e4:	bf00      	nop
 80031e6:	370c      	adds	r7, #12
 80031e8:	46bd      	mov	sp, r7
 80031ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ee:	4770      	bx	lr
 80031f0:	40023c00 	.word	0x40023c00

080031f4 <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 80031f4:	b480      	push	{r7}
 80031f6:	b083      	sub	sp, #12
 80031f8:	af00      	add	r7, sp, #0
 80031fa:	6078      	str	r0, [r7, #4]
 80031fc:	460b      	mov	r3, r1
 80031fe:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8003200:	4b0d      	ldr	r3, [pc, #52]	; (8003238 <FLASH_Program_HalfWord+0x44>)
 8003202:	691b      	ldr	r3, [r3, #16]
 8003204:	4a0c      	ldr	r2, [pc, #48]	; (8003238 <FLASH_Program_HalfWord+0x44>)
 8003206:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800320a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 800320c:	4b0a      	ldr	r3, [pc, #40]	; (8003238 <FLASH_Program_HalfWord+0x44>)
 800320e:	691b      	ldr	r3, [r3, #16]
 8003210:	4a09      	ldr	r2, [pc, #36]	; (8003238 <FLASH_Program_HalfWord+0x44>)
 8003212:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003216:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8003218:	4b07      	ldr	r3, [pc, #28]	; (8003238 <FLASH_Program_HalfWord+0x44>)
 800321a:	691b      	ldr	r3, [r3, #16]
 800321c:	4a06      	ldr	r2, [pc, #24]	; (8003238 <FLASH_Program_HalfWord+0x44>)
 800321e:	f043 0301 	orr.w	r3, r3, #1
 8003222:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t*)Address = Data;
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	887a      	ldrh	r2, [r7, #2]
 8003228:	801a      	strh	r2, [r3, #0]
}
 800322a:	bf00      	nop
 800322c:	370c      	adds	r7, #12
 800322e:	46bd      	mov	sp, r7
 8003230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003234:	4770      	bx	lr
 8003236:	bf00      	nop
 8003238:	40023c00 	.word	0x40023c00

0800323c <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 800323c:	b480      	push	{r7}
 800323e:	b083      	sub	sp, #12
 8003240:	af00      	add	r7, sp, #0
 8003242:	6078      	str	r0, [r7, #4]
 8003244:	460b      	mov	r3, r1
 8003246:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8003248:	4b0c      	ldr	r3, [pc, #48]	; (800327c <FLASH_Program_Byte+0x40>)
 800324a:	691b      	ldr	r3, [r3, #16]
 800324c:	4a0b      	ldr	r2, [pc, #44]	; (800327c <FLASH_Program_Byte+0x40>)
 800324e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003252:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 8003254:	4b09      	ldr	r3, [pc, #36]	; (800327c <FLASH_Program_Byte+0x40>)
 8003256:	4a09      	ldr	r2, [pc, #36]	; (800327c <FLASH_Program_Byte+0x40>)
 8003258:	691b      	ldr	r3, [r3, #16]
 800325a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 800325c:	4b07      	ldr	r3, [pc, #28]	; (800327c <FLASH_Program_Byte+0x40>)
 800325e:	691b      	ldr	r3, [r3, #16]
 8003260:	4a06      	ldr	r2, [pc, #24]	; (800327c <FLASH_Program_Byte+0x40>)
 8003262:	f043 0301 	orr.w	r3, r3, #1
 8003266:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t*)Address = Data;
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	78fa      	ldrb	r2, [r7, #3]
 800326c:	701a      	strb	r2, [r3, #0]
}
 800326e:	bf00      	nop
 8003270:	370c      	adds	r7, #12
 8003272:	46bd      	mov	sp, r7
 8003274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003278:	4770      	bx	lr
 800327a:	bf00      	nop
 800327c:	40023c00 	.word	0x40023c00

08003280 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
 8003280:	b480      	push	{r7}
 8003282:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 8003284:	4b27      	ldr	r3, [pc, #156]	; (8003324 <FLASH_SetErrorCode+0xa4>)
 8003286:	68db      	ldr	r3, [r3, #12]
 8003288:	f003 0310 	and.w	r3, r3, #16
 800328c:	2b00      	cmp	r3, #0
 800328e:	d008      	beq.n	80032a2 <FLASH_SetErrorCode+0x22>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8003290:	4b25      	ldr	r3, [pc, #148]	; (8003328 <FLASH_SetErrorCode+0xa8>)
 8003292:	69db      	ldr	r3, [r3, #28]
 8003294:	f043 0310 	orr.w	r3, r3, #16
 8003298:	4a23      	ldr	r2, [pc, #140]	; (8003328 <FLASH_SetErrorCode+0xa8>)
 800329a:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 800329c:	4b21      	ldr	r3, [pc, #132]	; (8003324 <FLASH_SetErrorCode+0xa4>)
 800329e:	2210      	movs	r2, #16
 80032a0:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 80032a2:	4b20      	ldr	r3, [pc, #128]	; (8003324 <FLASH_SetErrorCode+0xa4>)
 80032a4:	68db      	ldr	r3, [r3, #12]
 80032a6:	f003 0320 	and.w	r3, r3, #32
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d008      	beq.n	80032c0 <FLASH_SetErrorCode+0x40>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 80032ae:	4b1e      	ldr	r3, [pc, #120]	; (8003328 <FLASH_SetErrorCode+0xa8>)
 80032b0:	69db      	ldr	r3, [r3, #28]
 80032b2:	f043 0308 	orr.w	r3, r3, #8
 80032b6:	4a1c      	ldr	r2, [pc, #112]	; (8003328 <FLASH_SetErrorCode+0xa8>)
 80032b8:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 80032ba:	4b1a      	ldr	r3, [pc, #104]	; (8003324 <FLASH_SetErrorCode+0xa4>)
 80032bc:	2220      	movs	r2, #32
 80032be:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 80032c0:	4b18      	ldr	r3, [pc, #96]	; (8003324 <FLASH_SetErrorCode+0xa4>)
 80032c2:	68db      	ldr	r3, [r3, #12]
 80032c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d008      	beq.n	80032de <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 80032cc:	4b16      	ldr	r3, [pc, #88]	; (8003328 <FLASH_SetErrorCode+0xa8>)
 80032ce:	69db      	ldr	r3, [r3, #28]
 80032d0:	f043 0304 	orr.w	r3, r3, #4
 80032d4:	4a14      	ldr	r2, [pc, #80]	; (8003328 <FLASH_SetErrorCode+0xa8>)
 80032d6:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 80032d8:	4b12      	ldr	r3, [pc, #72]	; (8003324 <FLASH_SetErrorCode+0xa4>)
 80032da:	2240      	movs	r2, #64	; 0x40
 80032dc:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 80032de:	4b11      	ldr	r3, [pc, #68]	; (8003324 <FLASH_SetErrorCode+0xa4>)
 80032e0:	68db      	ldr	r3, [r3, #12]
 80032e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d008      	beq.n	80032fc <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 80032ea:	4b0f      	ldr	r3, [pc, #60]	; (8003328 <FLASH_SetErrorCode+0xa8>)
 80032ec:	69db      	ldr	r3, [r3, #28]
 80032ee:	f043 0302 	orr.w	r3, r3, #2
 80032f2:	4a0d      	ldr	r2, [pc, #52]	; (8003328 <FLASH_SetErrorCode+0xa8>)
 80032f4:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 80032f6:	4b0b      	ldr	r3, [pc, #44]	; (8003324 <FLASH_SetErrorCode+0xa4>)
 80032f8:	2280      	movs	r2, #128	; 0x80
 80032fa:	60da      	str	r2, [r3, #12]
    
    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
  }
#endif /* FLASH_SR_RDERR */  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 80032fc:	4b09      	ldr	r3, [pc, #36]	; (8003324 <FLASH_SetErrorCode+0xa4>)
 80032fe:	68db      	ldr	r3, [r3, #12]
 8003300:	f003 0302 	and.w	r3, r3, #2
 8003304:	2b00      	cmp	r3, #0
 8003306:	d008      	beq.n	800331a <FLASH_SetErrorCode+0x9a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 8003308:	4b07      	ldr	r3, [pc, #28]	; (8003328 <FLASH_SetErrorCode+0xa8>)
 800330a:	69db      	ldr	r3, [r3, #28]
 800330c:	f043 0320 	orr.w	r3, r3, #32
 8003310:	4a05      	ldr	r2, [pc, #20]	; (8003328 <FLASH_SetErrorCode+0xa8>)
 8003312:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 8003314:	4b03      	ldr	r3, [pc, #12]	; (8003324 <FLASH_SetErrorCode+0xa4>)
 8003316:	2202      	movs	r2, #2
 8003318:	60da      	str	r2, [r3, #12]
  }
}
 800331a:	bf00      	nop
 800331c:	46bd      	mov	sp, r7
 800331e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003322:	4770      	bx	lr
 8003324:	40023c00 	.word	0x40023c00
 8003328:	2000a42c 	.word	0x2000a42c

0800332c <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  *
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 800332c:	b480      	push	{r7}
 800332e:	b085      	sub	sp, #20
 8003330:	af00      	add	r7, sp, #0
 8003332:	6078      	str	r0, [r7, #4]
 8003334:	460b      	mov	r3, r1
 8003336:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 8003338:	2300      	movs	r3, #0
 800333a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));

  if (VoltageRange == FLASH_VOLTAGE_RANGE_1)
 800333c:	78fb      	ldrb	r3, [r7, #3]
 800333e:	2b00      	cmp	r3, #0
 8003340:	d102      	bne.n	8003348 <FLASH_Erase_Sector+0x1c>
  {
    tmp_psize = FLASH_PSIZE_BYTE;
 8003342:	2300      	movs	r3, #0
 8003344:	60fb      	str	r3, [r7, #12]
 8003346:	e010      	b.n	800336a <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_2)
 8003348:	78fb      	ldrb	r3, [r7, #3]
 800334a:	2b01      	cmp	r3, #1
 800334c:	d103      	bne.n	8003356 <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 800334e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003352:	60fb      	str	r3, [r7, #12]
 8003354:	e009      	b.n	800336a <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_3)
 8003356:	78fb      	ldrb	r3, [r7, #3]
 8003358:	2b02      	cmp	r3, #2
 800335a:	d103      	bne.n	8003364 <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 800335c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003360:	60fb      	str	r3, [r7, #12]
 8003362:	e002      	b.n	800336a <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 8003364:	f44f 7340 	mov.w	r3, #768	; 0x300
 8003368:	60fb      	str	r3, [r7, #12]
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800336a:	4b13      	ldr	r3, [pc, #76]	; (80033b8 <FLASH_Erase_Sector+0x8c>)
 800336c:	691b      	ldr	r3, [r3, #16]
 800336e:	4a12      	ldr	r2, [pc, #72]	; (80033b8 <FLASH_Erase_Sector+0x8c>)
 8003370:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003374:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 8003376:	4b10      	ldr	r3, [pc, #64]	; (80033b8 <FLASH_Erase_Sector+0x8c>)
 8003378:	691a      	ldr	r2, [r3, #16]
 800337a:	490f      	ldr	r1, [pc, #60]	; (80033b8 <FLASH_Erase_Sector+0x8c>)
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	4313      	orrs	r3, r2
 8003380:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 8003382:	4b0d      	ldr	r3, [pc, #52]	; (80033b8 <FLASH_Erase_Sector+0x8c>)
 8003384:	691b      	ldr	r3, [r3, #16]
 8003386:	4a0c      	ldr	r2, [pc, #48]	; (80033b8 <FLASH_Erase_Sector+0x8c>)
 8003388:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800338c:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 800338e:	4b0a      	ldr	r3, [pc, #40]	; (80033b8 <FLASH_Erase_Sector+0x8c>)
 8003390:	691a      	ldr	r2, [r3, #16]
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	00db      	lsls	r3, r3, #3
 8003396:	4313      	orrs	r3, r2
 8003398:	4a07      	ldr	r2, [pc, #28]	; (80033b8 <FLASH_Erase_Sector+0x8c>)
 800339a:	f043 0302 	orr.w	r3, r3, #2
 800339e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 80033a0:	4b05      	ldr	r3, [pc, #20]	; (80033b8 <FLASH_Erase_Sector+0x8c>)
 80033a2:	691b      	ldr	r3, [r3, #16]
 80033a4:	4a04      	ldr	r2, [pc, #16]	; (80033b8 <FLASH_Erase_Sector+0x8c>)
 80033a6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80033aa:	6113      	str	r3, [r2, #16]
}
 80033ac:	bf00      	nop
 80033ae:	3714      	adds	r7, #20
 80033b0:	46bd      	mov	sp, r7
 80033b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033b6:	4770      	bx	lr
 80033b8:	40023c00 	.word	0x40023c00

080033bc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80033bc:	b480      	push	{r7}
 80033be:	b089      	sub	sp, #36	; 0x24
 80033c0:	af00      	add	r7, sp, #0
 80033c2:	6078      	str	r0, [r7, #4]
 80033c4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80033c6:	2300      	movs	r3, #0
 80033c8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80033ca:	2300      	movs	r3, #0
 80033cc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80033ce:	2300      	movs	r3, #0
 80033d0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80033d2:	2300      	movs	r3, #0
 80033d4:	61fb      	str	r3, [r7, #28]
 80033d6:	e16b      	b.n	80036b0 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80033d8:	2201      	movs	r2, #1
 80033da:	69fb      	ldr	r3, [r7, #28]
 80033dc:	fa02 f303 	lsl.w	r3, r2, r3
 80033e0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80033e2:	683b      	ldr	r3, [r7, #0]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	697a      	ldr	r2, [r7, #20]
 80033e8:	4013      	ands	r3, r2
 80033ea:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80033ec:	693a      	ldr	r2, [r7, #16]
 80033ee:	697b      	ldr	r3, [r7, #20]
 80033f0:	429a      	cmp	r2, r3
 80033f2:	f040 815a 	bne.w	80036aa <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80033f6:	683b      	ldr	r3, [r7, #0]
 80033f8:	685b      	ldr	r3, [r3, #4]
 80033fa:	f003 0303 	and.w	r3, r3, #3
 80033fe:	2b01      	cmp	r3, #1
 8003400:	d005      	beq.n	800340e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003402:	683b      	ldr	r3, [r7, #0]
 8003404:	685b      	ldr	r3, [r3, #4]
 8003406:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800340a:	2b02      	cmp	r3, #2
 800340c:	d130      	bne.n	8003470 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	689b      	ldr	r3, [r3, #8]
 8003412:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003414:	69fb      	ldr	r3, [r7, #28]
 8003416:	005b      	lsls	r3, r3, #1
 8003418:	2203      	movs	r2, #3
 800341a:	fa02 f303 	lsl.w	r3, r2, r3
 800341e:	43db      	mvns	r3, r3
 8003420:	69ba      	ldr	r2, [r7, #24]
 8003422:	4013      	ands	r3, r2
 8003424:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003426:	683b      	ldr	r3, [r7, #0]
 8003428:	68da      	ldr	r2, [r3, #12]
 800342a:	69fb      	ldr	r3, [r7, #28]
 800342c:	005b      	lsls	r3, r3, #1
 800342e:	fa02 f303 	lsl.w	r3, r2, r3
 8003432:	69ba      	ldr	r2, [r7, #24]
 8003434:	4313      	orrs	r3, r2
 8003436:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	69ba      	ldr	r2, [r7, #24]
 800343c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	685b      	ldr	r3, [r3, #4]
 8003442:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003444:	2201      	movs	r2, #1
 8003446:	69fb      	ldr	r3, [r7, #28]
 8003448:	fa02 f303 	lsl.w	r3, r2, r3
 800344c:	43db      	mvns	r3, r3
 800344e:	69ba      	ldr	r2, [r7, #24]
 8003450:	4013      	ands	r3, r2
 8003452:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003454:	683b      	ldr	r3, [r7, #0]
 8003456:	685b      	ldr	r3, [r3, #4]
 8003458:	091b      	lsrs	r3, r3, #4
 800345a:	f003 0201 	and.w	r2, r3, #1
 800345e:	69fb      	ldr	r3, [r7, #28]
 8003460:	fa02 f303 	lsl.w	r3, r2, r3
 8003464:	69ba      	ldr	r2, [r7, #24]
 8003466:	4313      	orrs	r3, r2
 8003468:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	69ba      	ldr	r2, [r7, #24]
 800346e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003470:	683b      	ldr	r3, [r7, #0]
 8003472:	685b      	ldr	r3, [r3, #4]
 8003474:	f003 0303 	and.w	r3, r3, #3
 8003478:	2b03      	cmp	r3, #3
 800347a:	d017      	beq.n	80034ac <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	68db      	ldr	r3, [r3, #12]
 8003480:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003482:	69fb      	ldr	r3, [r7, #28]
 8003484:	005b      	lsls	r3, r3, #1
 8003486:	2203      	movs	r2, #3
 8003488:	fa02 f303 	lsl.w	r3, r2, r3
 800348c:	43db      	mvns	r3, r3
 800348e:	69ba      	ldr	r2, [r7, #24]
 8003490:	4013      	ands	r3, r2
 8003492:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003494:	683b      	ldr	r3, [r7, #0]
 8003496:	689a      	ldr	r2, [r3, #8]
 8003498:	69fb      	ldr	r3, [r7, #28]
 800349a:	005b      	lsls	r3, r3, #1
 800349c:	fa02 f303 	lsl.w	r3, r2, r3
 80034a0:	69ba      	ldr	r2, [r7, #24]
 80034a2:	4313      	orrs	r3, r2
 80034a4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	69ba      	ldr	r2, [r7, #24]
 80034aa:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80034ac:	683b      	ldr	r3, [r7, #0]
 80034ae:	685b      	ldr	r3, [r3, #4]
 80034b0:	f003 0303 	and.w	r3, r3, #3
 80034b4:	2b02      	cmp	r3, #2
 80034b6:	d123      	bne.n	8003500 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80034b8:	69fb      	ldr	r3, [r7, #28]
 80034ba:	08da      	lsrs	r2, r3, #3
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	3208      	adds	r2, #8
 80034c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80034c4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80034c6:	69fb      	ldr	r3, [r7, #28]
 80034c8:	f003 0307 	and.w	r3, r3, #7
 80034cc:	009b      	lsls	r3, r3, #2
 80034ce:	220f      	movs	r2, #15
 80034d0:	fa02 f303 	lsl.w	r3, r2, r3
 80034d4:	43db      	mvns	r3, r3
 80034d6:	69ba      	ldr	r2, [r7, #24]
 80034d8:	4013      	ands	r3, r2
 80034da:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80034dc:	683b      	ldr	r3, [r7, #0]
 80034de:	691a      	ldr	r2, [r3, #16]
 80034e0:	69fb      	ldr	r3, [r7, #28]
 80034e2:	f003 0307 	and.w	r3, r3, #7
 80034e6:	009b      	lsls	r3, r3, #2
 80034e8:	fa02 f303 	lsl.w	r3, r2, r3
 80034ec:	69ba      	ldr	r2, [r7, #24]
 80034ee:	4313      	orrs	r3, r2
 80034f0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80034f2:	69fb      	ldr	r3, [r7, #28]
 80034f4:	08da      	lsrs	r2, r3, #3
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	3208      	adds	r2, #8
 80034fa:	69b9      	ldr	r1, [r7, #24]
 80034fc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003506:	69fb      	ldr	r3, [r7, #28]
 8003508:	005b      	lsls	r3, r3, #1
 800350a:	2203      	movs	r2, #3
 800350c:	fa02 f303 	lsl.w	r3, r2, r3
 8003510:	43db      	mvns	r3, r3
 8003512:	69ba      	ldr	r2, [r7, #24]
 8003514:	4013      	ands	r3, r2
 8003516:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003518:	683b      	ldr	r3, [r7, #0]
 800351a:	685b      	ldr	r3, [r3, #4]
 800351c:	f003 0203 	and.w	r2, r3, #3
 8003520:	69fb      	ldr	r3, [r7, #28]
 8003522:	005b      	lsls	r3, r3, #1
 8003524:	fa02 f303 	lsl.w	r3, r2, r3
 8003528:	69ba      	ldr	r2, [r7, #24]
 800352a:	4313      	orrs	r3, r2
 800352c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	69ba      	ldr	r2, [r7, #24]
 8003532:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003534:	683b      	ldr	r3, [r7, #0]
 8003536:	685b      	ldr	r3, [r3, #4]
 8003538:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800353c:	2b00      	cmp	r3, #0
 800353e:	f000 80b4 	beq.w	80036aa <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003542:	2300      	movs	r3, #0
 8003544:	60fb      	str	r3, [r7, #12]
 8003546:	4b60      	ldr	r3, [pc, #384]	; (80036c8 <HAL_GPIO_Init+0x30c>)
 8003548:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800354a:	4a5f      	ldr	r2, [pc, #380]	; (80036c8 <HAL_GPIO_Init+0x30c>)
 800354c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003550:	6453      	str	r3, [r2, #68]	; 0x44
 8003552:	4b5d      	ldr	r3, [pc, #372]	; (80036c8 <HAL_GPIO_Init+0x30c>)
 8003554:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003556:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800355a:	60fb      	str	r3, [r7, #12]
 800355c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800355e:	4a5b      	ldr	r2, [pc, #364]	; (80036cc <HAL_GPIO_Init+0x310>)
 8003560:	69fb      	ldr	r3, [r7, #28]
 8003562:	089b      	lsrs	r3, r3, #2
 8003564:	3302      	adds	r3, #2
 8003566:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800356a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800356c:	69fb      	ldr	r3, [r7, #28]
 800356e:	f003 0303 	and.w	r3, r3, #3
 8003572:	009b      	lsls	r3, r3, #2
 8003574:	220f      	movs	r2, #15
 8003576:	fa02 f303 	lsl.w	r3, r2, r3
 800357a:	43db      	mvns	r3, r3
 800357c:	69ba      	ldr	r2, [r7, #24]
 800357e:	4013      	ands	r3, r2
 8003580:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	4a52      	ldr	r2, [pc, #328]	; (80036d0 <HAL_GPIO_Init+0x314>)
 8003586:	4293      	cmp	r3, r2
 8003588:	d02b      	beq.n	80035e2 <HAL_GPIO_Init+0x226>
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	4a51      	ldr	r2, [pc, #324]	; (80036d4 <HAL_GPIO_Init+0x318>)
 800358e:	4293      	cmp	r3, r2
 8003590:	d025      	beq.n	80035de <HAL_GPIO_Init+0x222>
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	4a50      	ldr	r2, [pc, #320]	; (80036d8 <HAL_GPIO_Init+0x31c>)
 8003596:	4293      	cmp	r3, r2
 8003598:	d01f      	beq.n	80035da <HAL_GPIO_Init+0x21e>
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	4a4f      	ldr	r2, [pc, #316]	; (80036dc <HAL_GPIO_Init+0x320>)
 800359e:	4293      	cmp	r3, r2
 80035a0:	d019      	beq.n	80035d6 <HAL_GPIO_Init+0x21a>
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	4a4e      	ldr	r2, [pc, #312]	; (80036e0 <HAL_GPIO_Init+0x324>)
 80035a6:	4293      	cmp	r3, r2
 80035a8:	d013      	beq.n	80035d2 <HAL_GPIO_Init+0x216>
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	4a4d      	ldr	r2, [pc, #308]	; (80036e4 <HAL_GPIO_Init+0x328>)
 80035ae:	4293      	cmp	r3, r2
 80035b0:	d00d      	beq.n	80035ce <HAL_GPIO_Init+0x212>
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	4a4c      	ldr	r2, [pc, #304]	; (80036e8 <HAL_GPIO_Init+0x32c>)
 80035b6:	4293      	cmp	r3, r2
 80035b8:	d007      	beq.n	80035ca <HAL_GPIO_Init+0x20e>
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	4a4b      	ldr	r2, [pc, #300]	; (80036ec <HAL_GPIO_Init+0x330>)
 80035be:	4293      	cmp	r3, r2
 80035c0:	d101      	bne.n	80035c6 <HAL_GPIO_Init+0x20a>
 80035c2:	2307      	movs	r3, #7
 80035c4:	e00e      	b.n	80035e4 <HAL_GPIO_Init+0x228>
 80035c6:	2308      	movs	r3, #8
 80035c8:	e00c      	b.n	80035e4 <HAL_GPIO_Init+0x228>
 80035ca:	2306      	movs	r3, #6
 80035cc:	e00a      	b.n	80035e4 <HAL_GPIO_Init+0x228>
 80035ce:	2305      	movs	r3, #5
 80035d0:	e008      	b.n	80035e4 <HAL_GPIO_Init+0x228>
 80035d2:	2304      	movs	r3, #4
 80035d4:	e006      	b.n	80035e4 <HAL_GPIO_Init+0x228>
 80035d6:	2303      	movs	r3, #3
 80035d8:	e004      	b.n	80035e4 <HAL_GPIO_Init+0x228>
 80035da:	2302      	movs	r3, #2
 80035dc:	e002      	b.n	80035e4 <HAL_GPIO_Init+0x228>
 80035de:	2301      	movs	r3, #1
 80035e0:	e000      	b.n	80035e4 <HAL_GPIO_Init+0x228>
 80035e2:	2300      	movs	r3, #0
 80035e4:	69fa      	ldr	r2, [r7, #28]
 80035e6:	f002 0203 	and.w	r2, r2, #3
 80035ea:	0092      	lsls	r2, r2, #2
 80035ec:	4093      	lsls	r3, r2
 80035ee:	69ba      	ldr	r2, [r7, #24]
 80035f0:	4313      	orrs	r3, r2
 80035f2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80035f4:	4935      	ldr	r1, [pc, #212]	; (80036cc <HAL_GPIO_Init+0x310>)
 80035f6:	69fb      	ldr	r3, [r7, #28]
 80035f8:	089b      	lsrs	r3, r3, #2
 80035fa:	3302      	adds	r3, #2
 80035fc:	69ba      	ldr	r2, [r7, #24]
 80035fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003602:	4b3b      	ldr	r3, [pc, #236]	; (80036f0 <HAL_GPIO_Init+0x334>)
 8003604:	689b      	ldr	r3, [r3, #8]
 8003606:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003608:	693b      	ldr	r3, [r7, #16]
 800360a:	43db      	mvns	r3, r3
 800360c:	69ba      	ldr	r2, [r7, #24]
 800360e:	4013      	ands	r3, r2
 8003610:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003612:	683b      	ldr	r3, [r7, #0]
 8003614:	685b      	ldr	r3, [r3, #4]
 8003616:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800361a:	2b00      	cmp	r3, #0
 800361c:	d003      	beq.n	8003626 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800361e:	69ba      	ldr	r2, [r7, #24]
 8003620:	693b      	ldr	r3, [r7, #16]
 8003622:	4313      	orrs	r3, r2
 8003624:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003626:	4a32      	ldr	r2, [pc, #200]	; (80036f0 <HAL_GPIO_Init+0x334>)
 8003628:	69bb      	ldr	r3, [r7, #24]
 800362a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800362c:	4b30      	ldr	r3, [pc, #192]	; (80036f0 <HAL_GPIO_Init+0x334>)
 800362e:	68db      	ldr	r3, [r3, #12]
 8003630:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003632:	693b      	ldr	r3, [r7, #16]
 8003634:	43db      	mvns	r3, r3
 8003636:	69ba      	ldr	r2, [r7, #24]
 8003638:	4013      	ands	r3, r2
 800363a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800363c:	683b      	ldr	r3, [r7, #0]
 800363e:	685b      	ldr	r3, [r3, #4]
 8003640:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003644:	2b00      	cmp	r3, #0
 8003646:	d003      	beq.n	8003650 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8003648:	69ba      	ldr	r2, [r7, #24]
 800364a:	693b      	ldr	r3, [r7, #16]
 800364c:	4313      	orrs	r3, r2
 800364e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003650:	4a27      	ldr	r2, [pc, #156]	; (80036f0 <HAL_GPIO_Init+0x334>)
 8003652:	69bb      	ldr	r3, [r7, #24]
 8003654:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003656:	4b26      	ldr	r3, [pc, #152]	; (80036f0 <HAL_GPIO_Init+0x334>)
 8003658:	685b      	ldr	r3, [r3, #4]
 800365a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800365c:	693b      	ldr	r3, [r7, #16]
 800365e:	43db      	mvns	r3, r3
 8003660:	69ba      	ldr	r2, [r7, #24]
 8003662:	4013      	ands	r3, r2
 8003664:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003666:	683b      	ldr	r3, [r7, #0]
 8003668:	685b      	ldr	r3, [r3, #4]
 800366a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800366e:	2b00      	cmp	r3, #0
 8003670:	d003      	beq.n	800367a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8003672:	69ba      	ldr	r2, [r7, #24]
 8003674:	693b      	ldr	r3, [r7, #16]
 8003676:	4313      	orrs	r3, r2
 8003678:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800367a:	4a1d      	ldr	r2, [pc, #116]	; (80036f0 <HAL_GPIO_Init+0x334>)
 800367c:	69bb      	ldr	r3, [r7, #24]
 800367e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003680:	4b1b      	ldr	r3, [pc, #108]	; (80036f0 <HAL_GPIO_Init+0x334>)
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003686:	693b      	ldr	r3, [r7, #16]
 8003688:	43db      	mvns	r3, r3
 800368a:	69ba      	ldr	r2, [r7, #24]
 800368c:	4013      	ands	r3, r2
 800368e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003690:	683b      	ldr	r3, [r7, #0]
 8003692:	685b      	ldr	r3, [r3, #4]
 8003694:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003698:	2b00      	cmp	r3, #0
 800369a:	d003      	beq.n	80036a4 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 800369c:	69ba      	ldr	r2, [r7, #24]
 800369e:	693b      	ldr	r3, [r7, #16]
 80036a0:	4313      	orrs	r3, r2
 80036a2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80036a4:	4a12      	ldr	r2, [pc, #72]	; (80036f0 <HAL_GPIO_Init+0x334>)
 80036a6:	69bb      	ldr	r3, [r7, #24]
 80036a8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80036aa:	69fb      	ldr	r3, [r7, #28]
 80036ac:	3301      	adds	r3, #1
 80036ae:	61fb      	str	r3, [r7, #28]
 80036b0:	69fb      	ldr	r3, [r7, #28]
 80036b2:	2b0f      	cmp	r3, #15
 80036b4:	f67f ae90 	bls.w	80033d8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80036b8:	bf00      	nop
 80036ba:	bf00      	nop
 80036bc:	3724      	adds	r7, #36	; 0x24
 80036be:	46bd      	mov	sp, r7
 80036c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036c4:	4770      	bx	lr
 80036c6:	bf00      	nop
 80036c8:	40023800 	.word	0x40023800
 80036cc:	40013800 	.word	0x40013800
 80036d0:	40020000 	.word	0x40020000
 80036d4:	40020400 	.word	0x40020400
 80036d8:	40020800 	.word	0x40020800
 80036dc:	40020c00 	.word	0x40020c00
 80036e0:	40021000 	.word	0x40021000
 80036e4:	40021400 	.word	0x40021400
 80036e8:	40021800 	.word	0x40021800
 80036ec:	40021c00 	.word	0x40021c00
 80036f0:	40013c00 	.word	0x40013c00

080036f4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80036f4:	b480      	push	{r7}
 80036f6:	b083      	sub	sp, #12
 80036f8:	af00      	add	r7, sp, #0
 80036fa:	6078      	str	r0, [r7, #4]
 80036fc:	460b      	mov	r3, r1
 80036fe:	807b      	strh	r3, [r7, #2]
 8003700:	4613      	mov	r3, r2
 8003702:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003704:	787b      	ldrb	r3, [r7, #1]
 8003706:	2b00      	cmp	r3, #0
 8003708:	d003      	beq.n	8003712 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800370a:	887a      	ldrh	r2, [r7, #2]
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003710:	e003      	b.n	800371a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003712:	887b      	ldrh	r3, [r7, #2]
 8003714:	041a      	lsls	r2, r3, #16
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	619a      	str	r2, [r3, #24]
}
 800371a:	bf00      	nop
 800371c:	370c      	adds	r7, #12
 800371e:	46bd      	mov	sp, r7
 8003720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003724:	4770      	bx	lr
	...

08003728 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8003728:	b580      	push	{r7, lr}
 800372a:	b088      	sub	sp, #32
 800372c:	af00      	add	r7, sp, #0
 800372e:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	2b00      	cmp	r3, #0
 8003734:	d101      	bne.n	800373a <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8003736:	2301      	movs	r3, #1
 8003738:	e128      	b.n	800398c <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003740:	b2db      	uxtb	r3, r3
 8003742:	2b00      	cmp	r3, #0
 8003744:	d109      	bne.n	800375a <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	2200      	movs	r2, #0
 800374a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	4a90      	ldr	r2, [pc, #576]	; (8003994 <HAL_I2S_Init+0x26c>)
 8003752:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8003754:	6878      	ldr	r0, [r7, #4]
 8003756:	f7fe fbb7 	bl	8001ec8 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	2202      	movs	r2, #2
 800375e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	69db      	ldr	r3, [r3, #28]
 8003768:	687a      	ldr	r2, [r7, #4]
 800376a:	6812      	ldr	r2, [r2, #0]
 800376c:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8003770:	f023 030f 	bic.w	r3, r3, #15
 8003774:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	2202      	movs	r2, #2
 800377c:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	695b      	ldr	r3, [r3, #20]
 8003782:	2b02      	cmp	r3, #2
 8003784:	d060      	beq.n	8003848 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	68db      	ldr	r3, [r3, #12]
 800378a:	2b00      	cmp	r3, #0
 800378c:	d102      	bne.n	8003794 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 800378e:	2310      	movs	r3, #16
 8003790:	617b      	str	r3, [r7, #20]
 8003792:	e001      	b.n	8003798 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8003794:	2320      	movs	r3, #32
 8003796:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	689b      	ldr	r3, [r3, #8]
 800379c:	2b20      	cmp	r3, #32
 800379e:	d802      	bhi.n	80037a6 <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 80037a0:	697b      	ldr	r3, [r7, #20]
 80037a2:	005b      	lsls	r3, r3, #1
 80037a4:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 80037a6:	2001      	movs	r0, #1
 80037a8:	f001 fc12 	bl	8004fd0 <HAL_RCCEx_GetPeriphCLKFreq>
 80037ac:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	691b      	ldr	r3, [r3, #16]
 80037b2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80037b6:	d125      	bne.n	8003804 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	68db      	ldr	r3, [r3, #12]
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d010      	beq.n	80037e2 <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80037c0:	697b      	ldr	r3, [r7, #20]
 80037c2:	009b      	lsls	r3, r3, #2
 80037c4:	68fa      	ldr	r2, [r7, #12]
 80037c6:	fbb2 f2f3 	udiv	r2, r2, r3
 80037ca:	4613      	mov	r3, r2
 80037cc:	009b      	lsls	r3, r3, #2
 80037ce:	4413      	add	r3, r2
 80037d0:	005b      	lsls	r3, r3, #1
 80037d2:	461a      	mov	r2, r3
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	695b      	ldr	r3, [r3, #20]
 80037d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80037dc:	3305      	adds	r3, #5
 80037de:	613b      	str	r3, [r7, #16]
 80037e0:	e01f      	b.n	8003822 <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80037e2:	697b      	ldr	r3, [r7, #20]
 80037e4:	00db      	lsls	r3, r3, #3
 80037e6:	68fa      	ldr	r2, [r7, #12]
 80037e8:	fbb2 f2f3 	udiv	r2, r2, r3
 80037ec:	4613      	mov	r3, r2
 80037ee:	009b      	lsls	r3, r3, #2
 80037f0:	4413      	add	r3, r2
 80037f2:	005b      	lsls	r3, r3, #1
 80037f4:	461a      	mov	r2, r3
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	695b      	ldr	r3, [r3, #20]
 80037fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80037fe:	3305      	adds	r3, #5
 8003800:	613b      	str	r3, [r7, #16]
 8003802:	e00e      	b.n	8003822 <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003804:	68fa      	ldr	r2, [r7, #12]
 8003806:	697b      	ldr	r3, [r7, #20]
 8003808:	fbb2 f2f3 	udiv	r2, r2, r3
 800380c:	4613      	mov	r3, r2
 800380e:	009b      	lsls	r3, r3, #2
 8003810:	4413      	add	r3, r2
 8003812:	005b      	lsls	r3, r3, #1
 8003814:	461a      	mov	r2, r3
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	695b      	ldr	r3, [r3, #20]
 800381a:	fbb2 f3f3 	udiv	r3, r2, r3
 800381e:	3305      	adds	r3, #5
 8003820:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8003822:	693b      	ldr	r3, [r7, #16]
 8003824:	4a5c      	ldr	r2, [pc, #368]	; (8003998 <HAL_I2S_Init+0x270>)
 8003826:	fba2 2303 	umull	r2, r3, r2, r3
 800382a:	08db      	lsrs	r3, r3, #3
 800382c:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 800382e:	693b      	ldr	r3, [r7, #16]
 8003830:	f003 0301 	and.w	r3, r3, #1
 8003834:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8003836:	693a      	ldr	r2, [r7, #16]
 8003838:	69bb      	ldr	r3, [r7, #24]
 800383a:	1ad3      	subs	r3, r2, r3
 800383c:	085b      	lsrs	r3, r3, #1
 800383e:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8003840:	69bb      	ldr	r3, [r7, #24]
 8003842:	021b      	lsls	r3, r3, #8
 8003844:	61bb      	str	r3, [r7, #24]
 8003846:	e003      	b.n	8003850 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8003848:	2302      	movs	r3, #2
 800384a:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 800384c:	2300      	movs	r3, #0
 800384e:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8003850:	69fb      	ldr	r3, [r7, #28]
 8003852:	2b01      	cmp	r3, #1
 8003854:	d902      	bls.n	800385c <HAL_I2S_Init+0x134>
 8003856:	69fb      	ldr	r3, [r7, #28]
 8003858:	2bff      	cmp	r3, #255	; 0xff
 800385a:	d907      	bls.n	800386c <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003860:	f043 0210 	orr.w	r2, r3, #16
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 8003868:	2301      	movs	r3, #1
 800386a:	e08f      	b.n	800398c <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	691a      	ldr	r2, [r3, #16]
 8003870:	69bb      	ldr	r3, [r7, #24]
 8003872:	ea42 0103 	orr.w	r1, r2, r3
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	69fa      	ldr	r2, [r7, #28]
 800387c:	430a      	orrs	r2, r1
 800387e:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	69db      	ldr	r3, [r3, #28]
 8003886:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 800388a:	f023 030f 	bic.w	r3, r3, #15
 800388e:	687a      	ldr	r2, [r7, #4]
 8003890:	6851      	ldr	r1, [r2, #4]
 8003892:	687a      	ldr	r2, [r7, #4]
 8003894:	6892      	ldr	r2, [r2, #8]
 8003896:	4311      	orrs	r1, r2
 8003898:	687a      	ldr	r2, [r7, #4]
 800389a:	68d2      	ldr	r2, [r2, #12]
 800389c:	4311      	orrs	r1, r2
 800389e:	687a      	ldr	r2, [r7, #4]
 80038a0:	6992      	ldr	r2, [r2, #24]
 80038a2:	430a      	orrs	r2, r1
 80038a4:	431a      	orrs	r2, r3
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80038ae:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	6a1b      	ldr	r3, [r3, #32]
 80038b4:	2b01      	cmp	r3, #1
 80038b6:	d161      	bne.n	800397c <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	4a38      	ldr	r2, [pc, #224]	; (800399c <HAL_I2S_Init+0x274>)
 80038bc:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	4a37      	ldr	r2, [pc, #220]	; (80039a0 <HAL_I2S_Init+0x278>)
 80038c4:	4293      	cmp	r3, r2
 80038c6:	d101      	bne.n	80038cc <HAL_I2S_Init+0x1a4>
 80038c8:	4b36      	ldr	r3, [pc, #216]	; (80039a4 <HAL_I2S_Init+0x27c>)
 80038ca:	e001      	b.n	80038d0 <HAL_I2S_Init+0x1a8>
 80038cc:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80038d0:	69db      	ldr	r3, [r3, #28]
 80038d2:	687a      	ldr	r2, [r7, #4]
 80038d4:	6812      	ldr	r2, [r2, #0]
 80038d6:	4932      	ldr	r1, [pc, #200]	; (80039a0 <HAL_I2S_Init+0x278>)
 80038d8:	428a      	cmp	r2, r1
 80038da:	d101      	bne.n	80038e0 <HAL_I2S_Init+0x1b8>
 80038dc:	4a31      	ldr	r2, [pc, #196]	; (80039a4 <HAL_I2S_Init+0x27c>)
 80038de:	e001      	b.n	80038e4 <HAL_I2S_Init+0x1bc>
 80038e0:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 80038e4:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 80038e8:	f023 030f 	bic.w	r3, r3, #15
 80038ec:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	4a2b      	ldr	r2, [pc, #172]	; (80039a0 <HAL_I2S_Init+0x278>)
 80038f4:	4293      	cmp	r3, r2
 80038f6:	d101      	bne.n	80038fc <HAL_I2S_Init+0x1d4>
 80038f8:	4b2a      	ldr	r3, [pc, #168]	; (80039a4 <HAL_I2S_Init+0x27c>)
 80038fa:	e001      	b.n	8003900 <HAL_I2S_Init+0x1d8>
 80038fc:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003900:	2202      	movs	r2, #2
 8003902:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	4a25      	ldr	r2, [pc, #148]	; (80039a0 <HAL_I2S_Init+0x278>)
 800390a:	4293      	cmp	r3, r2
 800390c:	d101      	bne.n	8003912 <HAL_I2S_Init+0x1ea>
 800390e:	4b25      	ldr	r3, [pc, #148]	; (80039a4 <HAL_I2S_Init+0x27c>)
 8003910:	e001      	b.n	8003916 <HAL_I2S_Init+0x1ee>
 8003912:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003916:	69db      	ldr	r3, [r3, #28]
 8003918:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	685b      	ldr	r3, [r3, #4]
 800391e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003922:	d003      	beq.n	800392c <HAL_I2S_Init+0x204>
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	685b      	ldr	r3, [r3, #4]
 8003928:	2b00      	cmp	r3, #0
 800392a:	d103      	bne.n	8003934 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 800392c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003930:	613b      	str	r3, [r7, #16]
 8003932:	e001      	b.n	8003938 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8003934:	2300      	movs	r3, #0
 8003936:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 8003938:	693b      	ldr	r3, [r7, #16]
 800393a:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	689b      	ldr	r3, [r3, #8]
 8003940:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8003942:	4313      	orrs	r3, r2
 8003944:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	68db      	ldr	r3, [r3, #12]
 800394a:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 800394c:	4313      	orrs	r3, r2
 800394e:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	699b      	ldr	r3, [r3, #24]
 8003954:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8003956:	4313      	orrs	r3, r2
 8003958:	b29a      	uxth	r2, r3
 800395a:	897b      	ldrh	r3, [r7, #10]
 800395c:	4313      	orrs	r3, r2
 800395e:	b29b      	uxth	r3, r3
 8003960:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003964:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	4a0d      	ldr	r2, [pc, #52]	; (80039a0 <HAL_I2S_Init+0x278>)
 800396c:	4293      	cmp	r3, r2
 800396e:	d101      	bne.n	8003974 <HAL_I2S_Init+0x24c>
 8003970:	4b0c      	ldr	r3, [pc, #48]	; (80039a4 <HAL_I2S_Init+0x27c>)
 8003972:	e001      	b.n	8003978 <HAL_I2S_Init+0x250>
 8003974:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003978:	897a      	ldrh	r2, [r7, #10]
 800397a:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	2200      	movs	r2, #0
 8003980:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	2201      	movs	r2, #1
 8003986:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 800398a:	2300      	movs	r3, #0
}
 800398c:	4618      	mov	r0, r3
 800398e:	3720      	adds	r7, #32
 8003990:	46bd      	mov	sp, r7
 8003992:	bd80      	pop	{r7, pc}
 8003994:	08003a9f 	.word	0x08003a9f
 8003998:	cccccccd 	.word	0xcccccccd
 800399c:	08003ec9 	.word	0x08003ec9
 80039a0:	40003800 	.word	0x40003800
 80039a4:	40003400 	.word	0x40003400

080039a8 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80039a8:	b480      	push	{r7}
 80039aa:	b083      	sub	sp, #12
 80039ac:	af00      	add	r7, sp, #0
 80039ae:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 80039b0:	bf00      	nop
 80039b2:	370c      	adds	r7, #12
 80039b4:	46bd      	mov	sp, r7
 80039b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ba:	4770      	bx	lr

080039bc <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80039bc:	b480      	push	{r7}
 80039be:	b083      	sub	sp, #12
 80039c0:	af00      	add	r7, sp, #0
 80039c2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 80039c4:	bf00      	nop
 80039c6:	370c      	adds	r7, #12
 80039c8:	46bd      	mov	sp, r7
 80039ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ce:	4770      	bx	lr

080039d0 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 80039d0:	b480      	push	{r7}
 80039d2:	b083      	sub	sp, #12
 80039d4:	af00      	add	r7, sp, #0
 80039d6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 80039d8:	bf00      	nop
 80039da:	370c      	adds	r7, #12
 80039dc:	46bd      	mov	sp, r7
 80039de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039e2:	4770      	bx	lr

080039e4 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 80039e4:	b580      	push	{r7, lr}
 80039e6:	b082      	sub	sp, #8
 80039e8:	af00      	add	r7, sp, #0
 80039ea:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039f0:	881a      	ldrh	r2, [r3, #0]
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039fc:	1c9a      	adds	r2, r3, #2
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a06:	b29b      	uxth	r3, r3
 8003a08:	3b01      	subs	r3, #1
 8003a0a:	b29a      	uxth	r2, r3
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a14:	b29b      	uxth	r3, r3
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d10e      	bne.n	8003a38 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	685a      	ldr	r2, [r3, #4]
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003a28:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	2201      	movs	r2, #1
 8003a2e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8003a32:	6878      	ldr	r0, [r7, #4]
 8003a34:	f7ff ffb8 	bl	80039a8 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8003a38:	bf00      	nop
 8003a3a:	3708      	adds	r7, #8
 8003a3c:	46bd      	mov	sp, r7
 8003a3e:	bd80      	pop	{r7, pc}

08003a40 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8003a40:	b580      	push	{r7, lr}
 8003a42:	b082      	sub	sp, #8
 8003a44:	af00      	add	r7, sp, #0
 8003a46:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	68da      	ldr	r2, [r3, #12]
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a52:	b292      	uxth	r2, r2
 8003a54:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a5a:	1c9a      	adds	r2, r3, #2
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003a64:	b29b      	uxth	r3, r3
 8003a66:	3b01      	subs	r3, #1
 8003a68:	b29a      	uxth	r2, r3
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003a72:	b29b      	uxth	r3, r3
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d10e      	bne.n	8003a96 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	685a      	ldr	r2, [r3, #4]
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003a86:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	2201      	movs	r2, #1
 8003a8c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8003a90:	6878      	ldr	r0, [r7, #4]
 8003a92:	f7ff ff93 	bl	80039bc <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8003a96:	bf00      	nop
 8003a98:	3708      	adds	r7, #8
 8003a9a:	46bd      	mov	sp, r7
 8003a9c:	bd80      	pop	{r7, pc}

08003a9e <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8003a9e:	b580      	push	{r7, lr}
 8003aa0:	b086      	sub	sp, #24
 8003aa2:	af00      	add	r7, sp, #0
 8003aa4:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	689b      	ldr	r3, [r3, #8]
 8003aac:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003ab4:	b2db      	uxtb	r3, r3
 8003ab6:	2b04      	cmp	r3, #4
 8003ab8:	d13a      	bne.n	8003b30 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8003aba:	697b      	ldr	r3, [r7, #20]
 8003abc:	f003 0301 	and.w	r3, r3, #1
 8003ac0:	2b01      	cmp	r3, #1
 8003ac2:	d109      	bne.n	8003ad8 <I2S_IRQHandler+0x3a>
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	685b      	ldr	r3, [r3, #4]
 8003aca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ace:	2b40      	cmp	r3, #64	; 0x40
 8003ad0:	d102      	bne.n	8003ad8 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8003ad2:	6878      	ldr	r0, [r7, #4]
 8003ad4:	f7ff ffb4 	bl	8003a40 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8003ad8:	697b      	ldr	r3, [r7, #20]
 8003ada:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ade:	2b40      	cmp	r3, #64	; 0x40
 8003ae0:	d126      	bne.n	8003b30 <I2S_IRQHandler+0x92>
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	685b      	ldr	r3, [r3, #4]
 8003ae8:	f003 0320 	and.w	r3, r3, #32
 8003aec:	2b20      	cmp	r3, #32
 8003aee:	d11f      	bne.n	8003b30 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	685a      	ldr	r2, [r3, #4]
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003afe:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8003b00:	2300      	movs	r3, #0
 8003b02:	613b      	str	r3, [r7, #16]
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	68db      	ldr	r3, [r3, #12]
 8003b0a:	613b      	str	r3, [r7, #16]
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	689b      	ldr	r3, [r3, #8]
 8003b12:	613b      	str	r3, [r7, #16]
 8003b14:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	2201      	movs	r2, #1
 8003b1a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b22:	f043 0202 	orr.w	r2, r3, #2
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003b2a:	6878      	ldr	r0, [r7, #4]
 8003b2c:	f7ff ff50 	bl	80039d0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003b36:	b2db      	uxtb	r3, r3
 8003b38:	2b03      	cmp	r3, #3
 8003b3a:	d136      	bne.n	8003baa <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8003b3c:	697b      	ldr	r3, [r7, #20]
 8003b3e:	f003 0302 	and.w	r3, r3, #2
 8003b42:	2b02      	cmp	r3, #2
 8003b44:	d109      	bne.n	8003b5a <I2S_IRQHandler+0xbc>
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	685b      	ldr	r3, [r3, #4]
 8003b4c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b50:	2b80      	cmp	r3, #128	; 0x80
 8003b52:	d102      	bne.n	8003b5a <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8003b54:	6878      	ldr	r0, [r7, #4]
 8003b56:	f7ff ff45 	bl	80039e4 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8003b5a:	697b      	ldr	r3, [r7, #20]
 8003b5c:	f003 0308 	and.w	r3, r3, #8
 8003b60:	2b08      	cmp	r3, #8
 8003b62:	d122      	bne.n	8003baa <I2S_IRQHandler+0x10c>
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	685b      	ldr	r3, [r3, #4]
 8003b6a:	f003 0320 	and.w	r3, r3, #32
 8003b6e:	2b20      	cmp	r3, #32
 8003b70:	d11b      	bne.n	8003baa <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	685a      	ldr	r2, [r3, #4]
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003b80:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8003b82:	2300      	movs	r3, #0
 8003b84:	60fb      	str	r3, [r7, #12]
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	689b      	ldr	r3, [r3, #8]
 8003b8c:	60fb      	str	r3, [r7, #12]
 8003b8e:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	2201      	movs	r2, #1
 8003b94:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b9c:	f043 0204 	orr.w	r2, r3, #4
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003ba4:	6878      	ldr	r0, [r7, #4]
 8003ba6:	f7ff ff13 	bl	80039d0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003baa:	bf00      	nop
 8003bac:	3718      	adds	r7, #24
 8003bae:	46bd      	mov	sp, r7
 8003bb0:	bd80      	pop	{r7, pc}
	...

08003bb4 <HAL_I2SEx_TransmitReceive_DMA>:
  */
HAL_StatusTypeDef HAL_I2SEx_TransmitReceive_DMA(I2S_HandleTypeDef *hi2s,
                                                uint16_t *pTxData,
                                                uint16_t *pRxData,
                                                uint16_t Size)
{
 8003bb4:	b580      	push	{r7, lr}
 8003bb6:	b088      	sub	sp, #32
 8003bb8:	af00      	add	r7, sp, #0
 8003bba:	60f8      	str	r0, [r7, #12]
 8003bbc:	60b9      	str	r1, [r7, #8]
 8003bbe:	607a      	str	r2, [r7, #4]
 8003bc0:	807b      	strh	r3, [r7, #2]
  uint32_t *tmp = NULL;
 8003bc2:	2300      	movs	r3, #0
 8003bc4:	61bb      	str	r3, [r7, #24]
  uint32_t tmp1 = 0U;
 8003bc6:	2300      	movs	r3, #0
 8003bc8:	617b      	str	r3, [r7, #20]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003bca:	2300      	movs	r3, #0
 8003bcc:	77fb      	strb	r3, [r7, #31]

  if (hi2s->State != HAL_I2S_STATE_READY)
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003bd4:	b2db      	uxtb	r3, r3
 8003bd6:	2b01      	cmp	r3, #1
 8003bd8:	d002      	beq.n	8003be0 <HAL_I2SEx_TransmitReceive_DMA+0x2c>
  {
    errorcode = HAL_BUSY;
 8003bda:	2302      	movs	r3, #2
 8003bdc:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003bde:	e160      	b.n	8003ea2 <HAL_I2SEx_TransmitReceive_DMA+0x2ee>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003be0:	68bb      	ldr	r3, [r7, #8]
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d005      	beq.n	8003bf2 <HAL_I2SEx_TransmitReceive_DMA+0x3e>
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d002      	beq.n	8003bf2 <HAL_I2SEx_TransmitReceive_DMA+0x3e>
 8003bec:	887b      	ldrh	r3, [r7, #2]
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d101      	bne.n	8003bf6 <HAL_I2SEx_TransmitReceive_DMA+0x42>
  {
    return  HAL_ERROR;
 8003bf2:	2301      	movs	r3, #1
 8003bf4:	e15a      	b.n	8003eac <HAL_I2SEx_TransmitReceive_DMA+0x2f8>
  }

  /* Process Locked */
  __HAL_LOCK(hi2s);
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003bfc:	b2db      	uxtb	r3, r3
 8003bfe:	2b01      	cmp	r3, #1
 8003c00:	d101      	bne.n	8003c06 <HAL_I2SEx_TransmitReceive_DMA+0x52>
 8003c02:	2302      	movs	r3, #2
 8003c04:	e152      	b.n	8003eac <HAL_I2SEx_TransmitReceive_DMA+0x2f8>
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	2201      	movs	r2, #1
 8003c0a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  hi2s->pTxBuffPtr = pTxData;
 8003c0e:	68ba      	ldr	r2, [r7, #8]
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->pRxBuffPtr = pRxData;
 8003c14:	687a      	ldr	r2, [r7, #4]
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	62da      	str	r2, [r3, #44]	; 0x2c

  tmp1 = hi2s->Instance->I2SCFGR & (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN);
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	69db      	ldr	r3, [r3, #28]
 8003c20:	f003 0307 	and.w	r3, r3, #7
 8003c24:	617b      	str	r3, [r7, #20]
  /* Check the Data format: When a 16-bit data frame or a 16-bit data frame extended
  is selected during the I2S configuration phase, the Size parameter means the number
  of 16-bit data length in the transaction and when a 24-bit data frame or a 32-bit data
  frame is selected the Size parameter means the number of 16-bit data length. */
  if ((tmp1 == I2S_DATAFORMAT_24B) || (tmp1 == I2S_DATAFORMAT_32B))
 8003c26:	697b      	ldr	r3, [r7, #20]
 8003c28:	2b03      	cmp	r3, #3
 8003c2a:	d002      	beq.n	8003c32 <HAL_I2SEx_TransmitReceive_DMA+0x7e>
 8003c2c:	697b      	ldr	r3, [r7, #20]
 8003c2e:	2b05      	cmp	r3, #5
 8003c30:	d114      	bne.n	8003c5c <HAL_I2SEx_TransmitReceive_DMA+0xa8>
  {
    hi2s->TxXferSize  = (Size << 1U);
 8003c32:	887b      	ldrh	r3, [r7, #2]
 8003c34:	005b      	lsls	r3, r3, #1
 8003c36:	b29a      	uxth	r2, r3
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2s->TxXferCount = (Size << 1U);
 8003c3c:	887b      	ldrh	r3, [r7, #2]
 8003c3e:	005b      	lsls	r3, r3, #1
 8003c40:	b29a      	uxth	r2, r3
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2s->RxXferSize  = (Size << 1U);
 8003c46:	887b      	ldrh	r3, [r7, #2]
 8003c48:	005b      	lsls	r3, r3, #1
 8003c4a:	b29a      	uxth	r2, r3
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	861a      	strh	r2, [r3, #48]	; 0x30
    hi2s->RxXferCount = (Size << 1U);
 8003c50:	887b      	ldrh	r3, [r7, #2]
 8003c52:	005b      	lsls	r3, r3, #1
 8003c54:	b29a      	uxth	r2, r3
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	865a      	strh	r2, [r3, #50]	; 0x32
 8003c5a:	e00b      	b.n	8003c74 <HAL_I2SEx_TransmitReceive_DMA+0xc0>
  }
  else
  {
    hi2s->TxXferSize  = Size;
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	887a      	ldrh	r2, [r7, #2]
 8003c60:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2s->TxXferCount = Size;
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	887a      	ldrh	r2, [r7, #2]
 8003c66:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2s->RxXferSize  = Size;
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	887a      	ldrh	r2, [r7, #2]
 8003c6c:	861a      	strh	r2, [r3, #48]	; 0x30
    hi2s->RxXferCount = Size;
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	887a      	ldrh	r2, [r7, #2]
 8003c72:	865a      	strh	r2, [r3, #50]	; 0x32
  }

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	2200      	movs	r2, #0
 8003c78:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_BUSY_TX_RX;
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	2205      	movs	r2, #5
 8003c7e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Set the I2S Rx DMA Half transfer complete callback */
  hi2s->hdmarx->XferHalfCpltCallback = I2SEx_TxRxDMAHalfCplt;
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c86:	4a8b      	ldr	r2, [pc, #556]	; (8003eb4 <HAL_I2SEx_TransmitReceive_DMA+0x300>)
 8003c88:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the I2S Rx DMA transfer complete callback */
  hi2s->hdmarx->XferCpltCallback  = I2SEx_TxRxDMACplt;
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c8e:	4a8a      	ldr	r2, [pc, #552]	; (8003eb8 <HAL_I2SEx_TransmitReceive_DMA+0x304>)
 8003c90:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the I2S Rx DMA error callback */
  hi2s->hdmarx->XferErrorCallback = I2SEx_TxRxDMAError;
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c96:	4a89      	ldr	r2, [pc, #548]	; (8003ebc <HAL_I2SEx_TransmitReceive_DMA+0x308>)
 8003c98:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the I2S Tx DMA Half transfer complete callback as NULL */
  hi2s->hdmatx->XferHalfCpltCallback  = NULL;
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c9e:	2200      	movs	r2, #0
 8003ca0:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the I2S Tx DMA transfer complete callback as NULL */
  hi2s->hdmatx->XferCpltCallback  = NULL;
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ca6:	2200      	movs	r2, #0
 8003ca8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the I2S Tx DMA error callback */
  hi2s->hdmatx->XferErrorCallback = I2SEx_TxRxDMAError;
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cae:	4a83      	ldr	r2, [pc, #524]	; (8003ebc <HAL_I2SEx_TransmitReceive_DMA+0x308>)
 8003cb0:	64da      	str	r2, [r3, #76]	; 0x4c

  tmp1 = hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SCFG;
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	69db      	ldr	r3, [r3, #28]
 8003cb8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003cbc:	617b      	str	r3, [r7, #20]
  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((tmp1 == I2S_MODE_MASTER_TX) || (tmp1 == I2S_MODE_SLAVE_TX))
 8003cbe:	697b      	ldr	r3, [r7, #20]
 8003cc0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003cc4:	d002      	beq.n	8003ccc <HAL_I2SEx_TransmitReceive_DMA+0x118>
 8003cc6:	697b      	ldr	r3, [r7, #20]
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d16b      	bne.n	8003da4 <HAL_I2SEx_TransmitReceive_DMA+0x1f0>
  {
    /* Enable the Rx DMA Stream */
    tmp = (uint32_t *)&pRxData;
 8003ccc:	1d3b      	adds	r3, r7, #4
 8003cce:	61bb      	str	r3, [r7, #24]
    HAL_DMA_Start_IT(hi2s->hdmarx, (uint32_t)&I2SxEXT(hi2s->Instance)->DR, *(uint32_t *)tmp, hi2s->RxXferSize);
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	4a79      	ldr	r2, [pc, #484]	; (8003ec0 <HAL_I2SEx_TransmitReceive_DMA+0x30c>)
 8003cda:	4293      	cmp	r3, r2
 8003cdc:	d101      	bne.n	8003ce2 <HAL_I2SEx_TransmitReceive_DMA+0x12e>
 8003cde:	4b79      	ldr	r3, [pc, #484]	; (8003ec4 <HAL_I2SEx_TransmitReceive_DMA+0x310>)
 8003ce0:	e001      	b.n	8003ce6 <HAL_I2SEx_TransmitReceive_DMA+0x132>
 8003ce2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003ce6:	330c      	adds	r3, #12
 8003ce8:	4619      	mov	r1, r3
 8003cea:	69bb      	ldr	r3, [r7, #24]
 8003cec:	681a      	ldr	r2, [r3, #0]
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 8003cf2:	b29b      	uxth	r3, r3
 8003cf4:	f7fe fe10 	bl	8002918 <HAL_DMA_Start_IT>

    /* Enable Rx DMA Request */
    SET_BIT(I2SxEXT(hi2s->Instance)->CR2, SPI_CR2_RXDMAEN);
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	4a70      	ldr	r2, [pc, #448]	; (8003ec0 <HAL_I2SEx_TransmitReceive_DMA+0x30c>)
 8003cfe:	4293      	cmp	r3, r2
 8003d00:	d101      	bne.n	8003d06 <HAL_I2SEx_TransmitReceive_DMA+0x152>
 8003d02:	4b70      	ldr	r3, [pc, #448]	; (8003ec4 <HAL_I2SEx_TransmitReceive_DMA+0x310>)
 8003d04:	e001      	b.n	8003d0a <HAL_I2SEx_TransmitReceive_DMA+0x156>
 8003d06:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003d0a:	685a      	ldr	r2, [r3, #4]
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	496b      	ldr	r1, [pc, #428]	; (8003ec0 <HAL_I2SEx_TransmitReceive_DMA+0x30c>)
 8003d12:	428b      	cmp	r3, r1
 8003d14:	d101      	bne.n	8003d1a <HAL_I2SEx_TransmitReceive_DMA+0x166>
 8003d16:	4b6b      	ldr	r3, [pc, #428]	; (8003ec4 <HAL_I2SEx_TransmitReceive_DMA+0x310>)
 8003d18:	e001      	b.n	8003d1e <HAL_I2SEx_TransmitReceive_DMA+0x16a>
 8003d1a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003d1e:	f042 0201 	orr.w	r2, r2, #1
 8003d22:	605a      	str	r2, [r3, #4]

    /* Enable the Tx DMA Stream */
    tmp = (uint32_t *)&pTxData;
 8003d24:	f107 0308 	add.w	r3, r7, #8
 8003d28:	61bb      	str	r3, [r7, #24]
    HAL_DMA_Start_IT(hi2s->hdmatx, *(uint32_t *)tmp, (uint32_t)&hi2s->Instance->DR, hi2s->TxXferSize);
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8003d2e:	69bb      	ldr	r3, [r7, #24]
 8003d30:	6819      	ldr	r1, [r3, #0]
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	330c      	adds	r3, #12
 8003d38:	461a      	mov	r2, r3
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d3e:	b29b      	uxth	r3, r3
 8003d40:	f7fe fdea 	bl	8002918 <HAL_DMA_Start_IT>

    /* Enable Tx DMA Request */
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	685a      	ldr	r2, [r3, #4]
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	f042 0202 	orr.w	r2, r2, #2
 8003d52:	605a      	str	r2, [r3, #4]

    /* Check if the I2S is already enabled */
    if ((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SE) != SPI_I2SCFGR_I2SE)
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	69db      	ldr	r3, [r3, #28]
 8003d5a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003d5e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003d62:	f000 809e 	beq.w	8003ea2 <HAL_I2SEx_TransmitReceive_DMA+0x2ee>
    {
      /* Enable I2Sext(receiver) before enabling I2Sx peripheral */
      __HAL_I2SEXT_ENABLE(hi2s);
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	4a55      	ldr	r2, [pc, #340]	; (8003ec0 <HAL_I2SEx_TransmitReceive_DMA+0x30c>)
 8003d6c:	4293      	cmp	r3, r2
 8003d6e:	d101      	bne.n	8003d74 <HAL_I2SEx_TransmitReceive_DMA+0x1c0>
 8003d70:	4b54      	ldr	r3, [pc, #336]	; (8003ec4 <HAL_I2SEx_TransmitReceive_DMA+0x310>)
 8003d72:	e001      	b.n	8003d78 <HAL_I2SEx_TransmitReceive_DMA+0x1c4>
 8003d74:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003d78:	69da      	ldr	r2, [r3, #28]
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	4950      	ldr	r1, [pc, #320]	; (8003ec0 <HAL_I2SEx_TransmitReceive_DMA+0x30c>)
 8003d80:	428b      	cmp	r3, r1
 8003d82:	d101      	bne.n	8003d88 <HAL_I2SEx_TransmitReceive_DMA+0x1d4>
 8003d84:	4b4f      	ldr	r3, [pc, #316]	; (8003ec4 <HAL_I2SEx_TransmitReceive_DMA+0x310>)
 8003d86:	e001      	b.n	8003d8c <HAL_I2SEx_TransmitReceive_DMA+0x1d8>
 8003d88:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003d8c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003d90:	61da      	str	r2, [r3, #28]

      /* Enable I2S peripheral after the I2Sext */
      __HAL_I2S_ENABLE(hi2s);
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	69da      	ldr	r2, [r3, #28]
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003da0:	61da      	str	r2, [r3, #28]
    if ((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SE) != SPI_I2SCFGR_I2SE)
 8003da2:	e07e      	b.n	8003ea2 <HAL_I2SEx_TransmitReceive_DMA+0x2ee>
    }
  }
  else
  {
    /* Check if Master Receiver mode is selected */
    if ((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SCFG) == I2S_MODE_MASTER_RX)
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	69db      	ldr	r3, [r3, #28]
 8003daa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003dae:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003db2:	d10a      	bne.n	8003dca <HAL_I2SEx_TransmitReceive_DMA+0x216>
    {
      /* Clear the Overrun Flag by a read operation on the SPI_DR register followed by a read
      access to the SPI_SR register. */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8003db4:	2300      	movs	r3, #0
 8003db6:	613b      	str	r3, [r7, #16]
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	68db      	ldr	r3, [r3, #12]
 8003dbe:	613b      	str	r3, [r7, #16]
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	689b      	ldr	r3, [r3, #8]
 8003dc6:	613b      	str	r3, [r7, #16]
 8003dc8:	693b      	ldr	r3, [r7, #16]
    }
    /* Enable the Tx DMA Stream */
    tmp = (uint32_t *)&pTxData;
 8003dca:	f107 0308 	add.w	r3, r7, #8
 8003dce:	61bb      	str	r3, [r7, #24]
    HAL_DMA_Start_IT(hi2s->hdmatx, *(uint32_t *)tmp, (uint32_t)&I2SxEXT(hi2s->Instance)->DR, hi2s->TxXferSize);
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8003dd4:	69bb      	ldr	r3, [r7, #24]
 8003dd6:	6819      	ldr	r1, [r3, #0]
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	4a38      	ldr	r2, [pc, #224]	; (8003ec0 <HAL_I2SEx_TransmitReceive_DMA+0x30c>)
 8003dde:	4293      	cmp	r3, r2
 8003de0:	d101      	bne.n	8003de6 <HAL_I2SEx_TransmitReceive_DMA+0x232>
 8003de2:	4b38      	ldr	r3, [pc, #224]	; (8003ec4 <HAL_I2SEx_TransmitReceive_DMA+0x310>)
 8003de4:	e001      	b.n	8003dea <HAL_I2SEx_TransmitReceive_DMA+0x236>
 8003de6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003dea:	330c      	adds	r3, #12
 8003dec:	461a      	mov	r2, r3
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003df2:	b29b      	uxth	r3, r3
 8003df4:	f7fe fd90 	bl	8002918 <HAL_DMA_Start_IT>

    /* Enable Tx DMA Request */
    SET_BIT(I2SxEXT(hi2s->Instance)->CR2, SPI_CR2_TXDMAEN);
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	4a30      	ldr	r2, [pc, #192]	; (8003ec0 <HAL_I2SEx_TransmitReceive_DMA+0x30c>)
 8003dfe:	4293      	cmp	r3, r2
 8003e00:	d101      	bne.n	8003e06 <HAL_I2SEx_TransmitReceive_DMA+0x252>
 8003e02:	4b30      	ldr	r3, [pc, #192]	; (8003ec4 <HAL_I2SEx_TransmitReceive_DMA+0x310>)
 8003e04:	e001      	b.n	8003e0a <HAL_I2SEx_TransmitReceive_DMA+0x256>
 8003e06:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003e0a:	685a      	ldr	r2, [r3, #4]
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	492b      	ldr	r1, [pc, #172]	; (8003ec0 <HAL_I2SEx_TransmitReceive_DMA+0x30c>)
 8003e12:	428b      	cmp	r3, r1
 8003e14:	d101      	bne.n	8003e1a <HAL_I2SEx_TransmitReceive_DMA+0x266>
 8003e16:	4b2b      	ldr	r3, [pc, #172]	; (8003ec4 <HAL_I2SEx_TransmitReceive_DMA+0x310>)
 8003e18:	e001      	b.n	8003e1e <HAL_I2SEx_TransmitReceive_DMA+0x26a>
 8003e1a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003e1e:	f042 0202 	orr.w	r2, r2, #2
 8003e22:	605a      	str	r2, [r3, #4]

    /* Enable the Rx DMA Stream */
    tmp = (uint32_t *)&pRxData;
 8003e24:	1d3b      	adds	r3, r7, #4
 8003e26:	61bb      	str	r3, [r7, #24]
    HAL_DMA_Start_IT(hi2s->hdmarx, (uint32_t)&hi2s->Instance->DR, *(uint32_t *)tmp, hi2s->RxXferSize);
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	330c      	adds	r3, #12
 8003e32:	4619      	mov	r1, r3
 8003e34:	69bb      	ldr	r3, [r7, #24]
 8003e36:	681a      	ldr	r2, [r3, #0]
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 8003e3c:	b29b      	uxth	r3, r3
 8003e3e:	f7fe fd6b 	bl	8002918 <HAL_DMA_Start_IT>

    /* Enable Rx DMA Request */
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	685a      	ldr	r2, [r3, #4]
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	f042 0201 	orr.w	r2, r2, #1
 8003e50:	605a      	str	r2, [r3, #4]

    /* Check if the I2S is already enabled */
    if ((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SE) != SPI_I2SCFGR_I2SE)
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	69db      	ldr	r3, [r3, #28]
 8003e58:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003e5c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003e60:	d01e      	beq.n	8003ea0 <HAL_I2SEx_TransmitReceive_DMA+0x2ec>
    {
      /* Enable I2Sext(transmitter) before enabling I2Sx peripheral */
      __HAL_I2SEXT_ENABLE(hi2s);
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	4a16      	ldr	r2, [pc, #88]	; (8003ec0 <HAL_I2SEx_TransmitReceive_DMA+0x30c>)
 8003e68:	4293      	cmp	r3, r2
 8003e6a:	d101      	bne.n	8003e70 <HAL_I2SEx_TransmitReceive_DMA+0x2bc>
 8003e6c:	4b15      	ldr	r3, [pc, #84]	; (8003ec4 <HAL_I2SEx_TransmitReceive_DMA+0x310>)
 8003e6e:	e001      	b.n	8003e74 <HAL_I2SEx_TransmitReceive_DMA+0x2c0>
 8003e70:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003e74:	69da      	ldr	r2, [r3, #28]
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	4911      	ldr	r1, [pc, #68]	; (8003ec0 <HAL_I2SEx_TransmitReceive_DMA+0x30c>)
 8003e7c:	428b      	cmp	r3, r1
 8003e7e:	d101      	bne.n	8003e84 <HAL_I2SEx_TransmitReceive_DMA+0x2d0>
 8003e80:	4b10      	ldr	r3, [pc, #64]	; (8003ec4 <HAL_I2SEx_TransmitReceive_DMA+0x310>)
 8003e82:	e001      	b.n	8003e88 <HAL_I2SEx_TransmitReceive_DMA+0x2d4>
 8003e84:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003e88:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003e8c:	61da      	str	r2, [r3, #28]
      /* Enable I2S peripheral before the I2Sext */
      __HAL_I2S_ENABLE(hi2s);
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	69da      	ldr	r2, [r3, #28]
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003e9c:	61da      	str	r2, [r3, #28]
 8003e9e:	e000      	b.n	8003ea2 <HAL_I2SEx_TransmitReceive_DMA+0x2ee>
    }
  }

error :
 8003ea0:	bf00      	nop
  __HAL_UNLOCK(hi2s);
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	2200      	movs	r2, #0
 8003ea6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  return errorcode;
 8003eaa:	7ffb      	ldrb	r3, [r7, #31]
}
 8003eac:	4618      	mov	r0, r3
 8003eae:	3720      	adds	r7, #32
 8003eb0:	46bd      	mov	sp, r7
 8003eb2:	bd80      	pop	{r7, pc}
 8003eb4:	08004171 	.word	0x08004171
 8003eb8:	0800418d 	.word	0x0800418d
 8003ebc:	08004265 	.word	0x08004265
 8003ec0:	40003800 	.word	0x40003800
 8003ec4:	40003400 	.word	0x40003400

08003ec8 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8003ec8:	b580      	push	{r7, lr}
 8003eca:	b088      	sub	sp, #32
 8003ecc:	af00      	add	r7, sp, #0
 8003ece:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	689b      	ldr	r3, [r3, #8]
 8003ed6:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	4a92      	ldr	r2, [pc, #584]	; (8004128 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003ede:	4293      	cmp	r3, r2
 8003ee0:	d101      	bne.n	8003ee6 <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8003ee2:	4b92      	ldr	r3, [pc, #584]	; (800412c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003ee4:	e001      	b.n	8003eea <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8003ee6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003eea:	689b      	ldr	r3, [r3, #8]
 8003eec:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	685b      	ldr	r3, [r3, #4]
 8003ef4:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	4a8b      	ldr	r2, [pc, #556]	; (8004128 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003efc:	4293      	cmp	r3, r2
 8003efe:	d101      	bne.n	8003f04 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8003f00:	4b8a      	ldr	r3, [pc, #552]	; (800412c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003f02:	e001      	b.n	8003f08 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8003f04:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003f08:	685b      	ldr	r3, [r3, #4]
 8003f0a:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	685b      	ldr	r3, [r3, #4]
 8003f10:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003f14:	d004      	beq.n	8003f20 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	685b      	ldr	r3, [r3, #4]
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	f040 8099 	bne.w	8004052 <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8003f20:	69fb      	ldr	r3, [r7, #28]
 8003f22:	f003 0302 	and.w	r3, r3, #2
 8003f26:	2b02      	cmp	r3, #2
 8003f28:	d107      	bne.n	8003f3a <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8003f2a:	697b      	ldr	r3, [r7, #20]
 8003f2c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	d002      	beq.n	8003f3a <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8003f34:	6878      	ldr	r0, [r7, #4]
 8003f36:	f000 f9d5 	bl	80042e4 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8003f3a:	69bb      	ldr	r3, [r7, #24]
 8003f3c:	f003 0301 	and.w	r3, r3, #1
 8003f40:	2b01      	cmp	r3, #1
 8003f42:	d107      	bne.n	8003f54 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8003f44:	693b      	ldr	r3, [r7, #16]
 8003f46:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d002      	beq.n	8003f54 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 8003f4e:	6878      	ldr	r0, [r7, #4]
 8003f50:	f000 fa78 	bl	8004444 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8003f54:	69bb      	ldr	r3, [r7, #24]
 8003f56:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f5a:	2b40      	cmp	r3, #64	; 0x40
 8003f5c:	d13a      	bne.n	8003fd4 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8003f5e:	693b      	ldr	r3, [r7, #16]
 8003f60:	f003 0320 	and.w	r3, r3, #32
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d035      	beq.n	8003fd4 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	4a6e      	ldr	r2, [pc, #440]	; (8004128 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003f6e:	4293      	cmp	r3, r2
 8003f70:	d101      	bne.n	8003f76 <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 8003f72:	4b6e      	ldr	r3, [pc, #440]	; (800412c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003f74:	e001      	b.n	8003f7a <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8003f76:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003f7a:	685a      	ldr	r2, [r3, #4]
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	4969      	ldr	r1, [pc, #420]	; (8004128 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003f82:	428b      	cmp	r3, r1
 8003f84:	d101      	bne.n	8003f8a <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 8003f86:	4b69      	ldr	r3, [pc, #420]	; (800412c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003f88:	e001      	b.n	8003f8e <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8003f8a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003f8e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003f92:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	685a      	ldr	r2, [r3, #4]
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003fa2:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8003fa4:	2300      	movs	r3, #0
 8003fa6:	60fb      	str	r3, [r7, #12]
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	68db      	ldr	r3, [r3, #12]
 8003fae:	60fb      	str	r3, [r7, #12]
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	689b      	ldr	r3, [r3, #8]
 8003fb6:	60fb      	str	r3, [r7, #12]
 8003fb8:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	2201      	movs	r2, #1
 8003fbe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003fc6:	f043 0202 	orr.w	r2, r3, #2
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003fce:	6878      	ldr	r0, [r7, #4]
 8003fd0:	f7ff fcfe 	bl	80039d0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003fd4:	69fb      	ldr	r3, [r7, #28]
 8003fd6:	f003 0308 	and.w	r3, r3, #8
 8003fda:	2b08      	cmp	r3, #8
 8003fdc:	f040 80c3 	bne.w	8004166 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 8003fe0:	697b      	ldr	r3, [r7, #20]
 8003fe2:	f003 0320 	and.w	r3, r3, #32
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	f000 80bd 	beq.w	8004166 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	685a      	ldr	r2, [r3, #4]
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003ffa:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	4a49      	ldr	r2, [pc, #292]	; (8004128 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004002:	4293      	cmp	r3, r2
 8004004:	d101      	bne.n	800400a <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 8004006:	4b49      	ldr	r3, [pc, #292]	; (800412c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004008:	e001      	b.n	800400e <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 800400a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800400e:	685a      	ldr	r2, [r3, #4]
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	4944      	ldr	r1, [pc, #272]	; (8004128 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004016:	428b      	cmp	r3, r1
 8004018:	d101      	bne.n	800401e <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 800401a:	4b44      	ldr	r3, [pc, #272]	; (800412c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800401c:	e001      	b.n	8004022 <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 800401e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004022:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004026:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8004028:	2300      	movs	r3, #0
 800402a:	60bb      	str	r3, [r7, #8]
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	689b      	ldr	r3, [r3, #8]
 8004032:	60bb      	str	r3, [r7, #8]
 8004034:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	2201      	movs	r2, #1
 800403a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004042:	f043 0204 	orr.w	r2, r3, #4
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800404a:	6878      	ldr	r0, [r7, #4]
 800404c:	f7ff fcc0 	bl	80039d0 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8004050:	e089      	b.n	8004166 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8004052:	69bb      	ldr	r3, [r7, #24]
 8004054:	f003 0302 	and.w	r3, r3, #2
 8004058:	2b02      	cmp	r3, #2
 800405a:	d107      	bne.n	800406c <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 800405c:	693b      	ldr	r3, [r7, #16]
 800405e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004062:	2b00      	cmp	r3, #0
 8004064:	d002      	beq.n	800406c <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 8004066:	6878      	ldr	r0, [r7, #4]
 8004068:	f000 f96e 	bl	8004348 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 800406c:	69fb      	ldr	r3, [r7, #28]
 800406e:	f003 0301 	and.w	r3, r3, #1
 8004072:	2b01      	cmp	r3, #1
 8004074:	d107      	bne.n	8004086 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 8004076:	697b      	ldr	r3, [r7, #20]
 8004078:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800407c:	2b00      	cmp	r3, #0
 800407e:	d002      	beq.n	8004086 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8004080:	6878      	ldr	r0, [r7, #4]
 8004082:	f000 f9ad 	bl	80043e0 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8004086:	69fb      	ldr	r3, [r7, #28]
 8004088:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800408c:	2b40      	cmp	r3, #64	; 0x40
 800408e:	d12f      	bne.n	80040f0 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8004090:	697b      	ldr	r3, [r7, #20]
 8004092:	f003 0320 	and.w	r3, r3, #32
 8004096:	2b00      	cmp	r3, #0
 8004098:	d02a      	beq.n	80040f0 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	685a      	ldr	r2, [r3, #4]
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80040a8:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	4a1e      	ldr	r2, [pc, #120]	; (8004128 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80040b0:	4293      	cmp	r3, r2
 80040b2:	d101      	bne.n	80040b8 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 80040b4:	4b1d      	ldr	r3, [pc, #116]	; (800412c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80040b6:	e001      	b.n	80040bc <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 80040b8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80040bc:	685a      	ldr	r2, [r3, #4]
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	4919      	ldr	r1, [pc, #100]	; (8004128 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80040c4:	428b      	cmp	r3, r1
 80040c6:	d101      	bne.n	80040cc <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 80040c8:	4b18      	ldr	r3, [pc, #96]	; (800412c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80040ca:	e001      	b.n	80040d0 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 80040cc:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80040d0:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80040d4:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	2201      	movs	r2, #1
 80040da:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80040e2:	f043 0202 	orr.w	r2, r3, #2
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80040ea:	6878      	ldr	r0, [r7, #4]
 80040ec:	f7ff fc70 	bl	80039d0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 80040f0:	69bb      	ldr	r3, [r7, #24]
 80040f2:	f003 0308 	and.w	r3, r3, #8
 80040f6:	2b08      	cmp	r3, #8
 80040f8:	d136      	bne.n	8004168 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 80040fa:	693b      	ldr	r3, [r7, #16]
 80040fc:	f003 0320 	and.w	r3, r3, #32
 8004100:	2b00      	cmp	r3, #0
 8004102:	d031      	beq.n	8004168 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	4a07      	ldr	r2, [pc, #28]	; (8004128 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800410a:	4293      	cmp	r3, r2
 800410c:	d101      	bne.n	8004112 <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 800410e:	4b07      	ldr	r3, [pc, #28]	; (800412c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004110:	e001      	b.n	8004116 <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 8004112:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004116:	685a      	ldr	r2, [r3, #4]
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	4902      	ldr	r1, [pc, #8]	; (8004128 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800411e:	428b      	cmp	r3, r1
 8004120:	d106      	bne.n	8004130 <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 8004122:	4b02      	ldr	r3, [pc, #8]	; (800412c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004124:	e006      	b.n	8004134 <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 8004126:	bf00      	nop
 8004128:	40003800 	.word	0x40003800
 800412c:	40003400 	.word	0x40003400
 8004130:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004134:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004138:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	685a      	ldr	r2, [r3, #4]
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004148:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	2201      	movs	r2, #1
 800414e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004156:	f043 0204 	orr.w	r2, r3, #4
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800415e:	6878      	ldr	r0, [r7, #4]
 8004160:	f7ff fc36 	bl	80039d0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004164:	e000      	b.n	8004168 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8004166:	bf00      	nop
}
 8004168:	bf00      	nop
 800416a:	3720      	adds	r7, #32
 800416c:	46bd      	mov	sp, r7
 800416e:	bd80      	pop	{r7, pc}

08004170 <I2SEx_TxRxDMAHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void I2SEx_TxRxDMAHalfCplt(DMA_HandleTypeDef *hdma)
{
 8004170:	b580      	push	{r7, lr}
 8004172:	b084      	sub	sp, #16
 8004174:	af00      	add	r7, sp, #0
 8004176:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800417c:	60fb      	str	r3, [r7, #12]

  /* Call user TxRx Half complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->TxRxHalfCpltCallback(hi2s);
#else
  HAL_I2SEx_TxRxHalfCpltCallback(hi2s);
 800417e:	68f8      	ldr	r0, [r7, #12]
 8004180:	f7fd f950 	bl	8001424 <HAL_I2SEx_TxRxHalfCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8004184:	bf00      	nop
 8004186:	3710      	adds	r7, #16
 8004188:	46bd      	mov	sp, r7
 800418a:	bd80      	pop	{r7, pc}

0800418c <I2SEx_TxRxDMACplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void I2SEx_TxRxDMACplt(DMA_HandleTypeDef *hdma)
{
 800418c:	b580      	push	{r7, lr}
 800418e:	b084      	sub	sp, #16
 8004190:	af00      	add	r7, sp, #0
 8004192:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004198:	60fb      	str	r3, [r7, #12]

  /* If DMA is configured in DMA_NORMAL mode */
  if (hdma->Init.Mode == DMA_NORMAL)
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	69db      	ldr	r3, [r3, #28]
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d155      	bne.n	800424e <I2SEx_TxRxDMACplt+0xc2>
  {
    if (((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SCFG) == I2S_MODE_MASTER_TX) || \
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	69db      	ldr	r3, [r3, #28]
 80041a8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80041ac:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80041b0:	d006      	beq.n	80041c0 <I2SEx_TxRxDMACplt+0x34>
        ((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SCFG) == I2S_MODE_SLAVE_TX))
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	69db      	ldr	r3, [r3, #28]
 80041b8:	f403 7340 	and.w	r3, r3, #768	; 0x300
    if (((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SCFG) == I2S_MODE_MASTER_TX) || \
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d11e      	bne.n	80041fe <I2SEx_TxRxDMACplt+0x72>
    /* Disable Tx & Rx DMA Requests */
    {
      CLEAR_BIT(I2SxEXT(hi2s->Instance)->CR2, SPI_CR2_RXDMAEN);
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	4a25      	ldr	r2, [pc, #148]	; (800425c <I2SEx_TxRxDMACplt+0xd0>)
 80041c6:	4293      	cmp	r3, r2
 80041c8:	d101      	bne.n	80041ce <I2SEx_TxRxDMACplt+0x42>
 80041ca:	4b25      	ldr	r3, [pc, #148]	; (8004260 <I2SEx_TxRxDMACplt+0xd4>)
 80041cc:	e001      	b.n	80041d2 <I2SEx_TxRxDMACplt+0x46>
 80041ce:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80041d2:	685a      	ldr	r2, [r3, #4]
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	4920      	ldr	r1, [pc, #128]	; (800425c <I2SEx_TxRxDMACplt+0xd0>)
 80041da:	428b      	cmp	r3, r1
 80041dc:	d101      	bne.n	80041e2 <I2SEx_TxRxDMACplt+0x56>
 80041de:	4b20      	ldr	r3, [pc, #128]	; (8004260 <I2SEx_TxRxDMACplt+0xd4>)
 80041e0:	e001      	b.n	80041e6 <I2SEx_TxRxDMACplt+0x5a>
 80041e2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80041e6:	f022 0201 	bic.w	r2, r2, #1
 80041ea:	605a      	str	r2, [r3, #4]
      CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	685a      	ldr	r2, [r3, #4]
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	f022 0202 	bic.w	r2, r2, #2
 80041fa:	605a      	str	r2, [r3, #4]
 80041fc:	e01d      	b.n	800423a <I2SEx_TxRxDMACplt+0xae>
    }
    else
    {
      CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	685a      	ldr	r2, [r3, #4]
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	f022 0201 	bic.w	r2, r2, #1
 800420c:	605a      	str	r2, [r3, #4]
      CLEAR_BIT(I2SxEXT(hi2s->Instance)->CR2, SPI_CR2_TXDMAEN);
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	4a12      	ldr	r2, [pc, #72]	; (800425c <I2SEx_TxRxDMACplt+0xd0>)
 8004214:	4293      	cmp	r3, r2
 8004216:	d101      	bne.n	800421c <I2SEx_TxRxDMACplt+0x90>
 8004218:	4b11      	ldr	r3, [pc, #68]	; (8004260 <I2SEx_TxRxDMACplt+0xd4>)
 800421a:	e001      	b.n	8004220 <I2SEx_TxRxDMACplt+0x94>
 800421c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004220:	685a      	ldr	r2, [r3, #4]
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	490d      	ldr	r1, [pc, #52]	; (800425c <I2SEx_TxRxDMACplt+0xd0>)
 8004228:	428b      	cmp	r3, r1
 800422a:	d101      	bne.n	8004230 <I2SEx_TxRxDMACplt+0xa4>
 800422c:	4b0c      	ldr	r3, [pc, #48]	; (8004260 <I2SEx_TxRxDMACplt+0xd4>)
 800422e:	e001      	b.n	8004234 <I2SEx_TxRxDMACplt+0xa8>
 8004230:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004234:	f022 0202 	bic.w	r2, r2, #2
 8004238:	605a      	str	r2, [r3, #4]
    }

    hi2s->RxXferCount = 0U;
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	2200      	movs	r2, #0
 800423e:	865a      	strh	r2, [r3, #50]	; 0x32
    hi2s->TxXferCount = 0U;
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	2200      	movs	r2, #0
 8004244:	855a      	strh	r2, [r3, #42]	; 0x2a

    hi2s->State = HAL_I2S_STATE_READY;
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	2201      	movs	r2, #1
 800424a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->TxRxCpltCallback(hi2s);
#else
  HAL_I2SEx_TxRxCpltCallback(hi2s);
 800424e:	68f8      	ldr	r0, [r7, #12]
 8004250:	f7fd f8f8 	bl	8001444 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8004254:	bf00      	nop
 8004256:	3710      	adds	r7, #16
 8004258:	46bd      	mov	sp, r7
 800425a:	bd80      	pop	{r7, pc}
 800425c:	40003800 	.word	0x40003800
 8004260:	40003400 	.word	0x40003400

08004264 <I2SEx_TxRxDMAError>:
  * @brief  DMA I2S communication error callback
  * @param  hdma DMA handle
  * @retval None
  */
static void I2SEx_TxRxDMAError(DMA_HandleTypeDef *hdma)
{
 8004264:	b580      	push	{r7, lr}
 8004266:	b084      	sub	sp, #16
 8004268:	af00      	add	r7, sp, #0
 800426a:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004270:	60fb      	str	r3, [r7, #12]

  /* Disable Rx and Tx DMA Request */
  CLEAR_BIT(hi2s->Instance->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	685a      	ldr	r2, [r3, #4]
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	f022 0203 	bic.w	r2, r2, #3
 8004280:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(I2SxEXT(hi2s->Instance)->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	4a15      	ldr	r2, [pc, #84]	; (80042dc <I2SEx_TxRxDMAError+0x78>)
 8004288:	4293      	cmp	r3, r2
 800428a:	d101      	bne.n	8004290 <I2SEx_TxRxDMAError+0x2c>
 800428c:	4b14      	ldr	r3, [pc, #80]	; (80042e0 <I2SEx_TxRxDMAError+0x7c>)
 800428e:	e001      	b.n	8004294 <I2SEx_TxRxDMAError+0x30>
 8004290:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004294:	685a      	ldr	r2, [r3, #4]
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	4910      	ldr	r1, [pc, #64]	; (80042dc <I2SEx_TxRxDMAError+0x78>)
 800429c:	428b      	cmp	r3, r1
 800429e:	d101      	bne.n	80042a4 <I2SEx_TxRxDMAError+0x40>
 80042a0:	4b0f      	ldr	r3, [pc, #60]	; (80042e0 <I2SEx_TxRxDMAError+0x7c>)
 80042a2:	e001      	b.n	80042a8 <I2SEx_TxRxDMAError+0x44>
 80042a4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80042a8:	f022 0203 	bic.w	r2, r2, #3
 80042ac:	605a      	str	r2, [r3, #4]

  hi2s->TxXferCount = 0U;
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	2200      	movs	r2, #0
 80042b2:	855a      	strh	r2, [r3, #42]	; 0x2a
  hi2s->RxXferCount = 0U;
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	2200      	movs	r2, #0
 80042b8:	865a      	strh	r2, [r3, #50]	; 0x32

  hi2s->State = HAL_I2S_STATE_READY;
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	2201      	movs	r2, #1
 80042be:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Set the error code and execute error callback*/
  SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80042c6:	f043 0208 	orr.w	r2, r3, #8
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	645a      	str	r2, [r3, #68]	; 0x44
  /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->ErrorCallback(hi2s);
#else
  HAL_I2S_ErrorCallback(hi2s);
 80042ce:	68f8      	ldr	r0, [r7, #12]
 80042d0:	f7ff fb7e 	bl	80039d0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 80042d4:	bf00      	nop
 80042d6:	3710      	adds	r7, #16
 80042d8:	46bd      	mov	sp, r7
 80042da:	bd80      	pop	{r7, pc}
 80042dc:	40003800 	.word	0x40003800
 80042e0:	40003400 	.word	0x40003400

080042e4 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 80042e4:	b580      	push	{r7, lr}
 80042e6:	b082      	sub	sp, #8
 80042e8:	af00      	add	r7, sp, #0
 80042ea:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042f0:	1c99      	adds	r1, r3, #2
 80042f2:	687a      	ldr	r2, [r7, #4]
 80042f4:	6251      	str	r1, [r2, #36]	; 0x24
 80042f6:	881a      	ldrh	r2, [r3, #0]
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004302:	b29b      	uxth	r3, r3
 8004304:	3b01      	subs	r3, #1
 8004306:	b29a      	uxth	r2, r3
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004310:	b29b      	uxth	r3, r3
 8004312:	2b00      	cmp	r3, #0
 8004314:	d113      	bne.n	800433e <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	685a      	ldr	r2, [r3, #4]
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004324:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800432a:	b29b      	uxth	r3, r3
 800432c:	2b00      	cmp	r3, #0
 800432e:	d106      	bne.n	800433e <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	2201      	movs	r2, #1
 8004334:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004338:	6878      	ldr	r0, [r7, #4]
 800433a:	f7fd f883 	bl	8001444 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800433e:	bf00      	nop
 8004340:	3708      	adds	r7, #8
 8004342:	46bd      	mov	sp, r7
 8004344:	bd80      	pop	{r7, pc}
	...

08004348 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8004348:	b580      	push	{r7, lr}
 800434a:	b082      	sub	sp, #8
 800434c:	af00      	add	r7, sp, #0
 800434e:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004354:	1c99      	adds	r1, r3, #2
 8004356:	687a      	ldr	r2, [r7, #4]
 8004358:	6251      	str	r1, [r2, #36]	; 0x24
 800435a:	8819      	ldrh	r1, [r3, #0]
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	4a1d      	ldr	r2, [pc, #116]	; (80043d8 <I2SEx_TxISR_I2SExt+0x90>)
 8004362:	4293      	cmp	r3, r2
 8004364:	d101      	bne.n	800436a <I2SEx_TxISR_I2SExt+0x22>
 8004366:	4b1d      	ldr	r3, [pc, #116]	; (80043dc <I2SEx_TxISR_I2SExt+0x94>)
 8004368:	e001      	b.n	800436e <I2SEx_TxISR_I2SExt+0x26>
 800436a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800436e:	460a      	mov	r2, r1
 8004370:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004376:	b29b      	uxth	r3, r3
 8004378:	3b01      	subs	r3, #1
 800437a:	b29a      	uxth	r2, r3
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004384:	b29b      	uxth	r3, r3
 8004386:	2b00      	cmp	r3, #0
 8004388:	d121      	bne.n	80043ce <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	4a12      	ldr	r2, [pc, #72]	; (80043d8 <I2SEx_TxISR_I2SExt+0x90>)
 8004390:	4293      	cmp	r3, r2
 8004392:	d101      	bne.n	8004398 <I2SEx_TxISR_I2SExt+0x50>
 8004394:	4b11      	ldr	r3, [pc, #68]	; (80043dc <I2SEx_TxISR_I2SExt+0x94>)
 8004396:	e001      	b.n	800439c <I2SEx_TxISR_I2SExt+0x54>
 8004398:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800439c:	685a      	ldr	r2, [r3, #4]
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	490d      	ldr	r1, [pc, #52]	; (80043d8 <I2SEx_TxISR_I2SExt+0x90>)
 80043a4:	428b      	cmp	r3, r1
 80043a6:	d101      	bne.n	80043ac <I2SEx_TxISR_I2SExt+0x64>
 80043a8:	4b0c      	ldr	r3, [pc, #48]	; (80043dc <I2SEx_TxISR_I2SExt+0x94>)
 80043aa:	e001      	b.n	80043b0 <I2SEx_TxISR_I2SExt+0x68>
 80043ac:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80043b0:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80043b4:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80043ba:	b29b      	uxth	r3, r3
 80043bc:	2b00      	cmp	r3, #0
 80043be:	d106      	bne.n	80043ce <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	2201      	movs	r2, #1
 80043c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80043c8:	6878      	ldr	r0, [r7, #4]
 80043ca:	f7fd f83b 	bl	8001444 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80043ce:	bf00      	nop
 80043d0:	3708      	adds	r7, #8
 80043d2:	46bd      	mov	sp, r7
 80043d4:	bd80      	pop	{r7, pc}
 80043d6:	bf00      	nop
 80043d8:	40003800 	.word	0x40003800
 80043dc:	40003400 	.word	0x40003400

080043e0 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 80043e0:	b580      	push	{r7, lr}
 80043e2:	b082      	sub	sp, #8
 80043e4:	af00      	add	r7, sp, #0
 80043e6:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	68d8      	ldr	r0, [r3, #12]
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043f2:	1c99      	adds	r1, r3, #2
 80043f4:	687a      	ldr	r2, [r7, #4]
 80043f6:	62d1      	str	r1, [r2, #44]	; 0x2c
 80043f8:	b282      	uxth	r2, r0
 80043fa:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004400:	b29b      	uxth	r3, r3
 8004402:	3b01      	subs	r3, #1
 8004404:	b29a      	uxth	r2, r3
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800440e:	b29b      	uxth	r3, r3
 8004410:	2b00      	cmp	r3, #0
 8004412:	d113      	bne.n	800443c <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	685a      	ldr	r2, [r3, #4]
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004422:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004428:	b29b      	uxth	r3, r3
 800442a:	2b00      	cmp	r3, #0
 800442c:	d106      	bne.n	800443c <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	2201      	movs	r2, #1
 8004432:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004436:	6878      	ldr	r0, [r7, #4]
 8004438:	f7fd f804 	bl	8001444 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800443c:	bf00      	nop
 800443e:	3708      	adds	r7, #8
 8004440:	46bd      	mov	sp, r7
 8004442:	bd80      	pop	{r7, pc}

08004444 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8004444:	b580      	push	{r7, lr}
 8004446:	b082      	sub	sp, #8
 8004448:	af00      	add	r7, sp, #0
 800444a:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	4a20      	ldr	r2, [pc, #128]	; (80044d4 <I2SEx_RxISR_I2SExt+0x90>)
 8004452:	4293      	cmp	r3, r2
 8004454:	d101      	bne.n	800445a <I2SEx_RxISR_I2SExt+0x16>
 8004456:	4b20      	ldr	r3, [pc, #128]	; (80044d8 <I2SEx_RxISR_I2SExt+0x94>)
 8004458:	e001      	b.n	800445e <I2SEx_RxISR_I2SExt+0x1a>
 800445a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800445e:	68d8      	ldr	r0, [r3, #12]
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004464:	1c99      	adds	r1, r3, #2
 8004466:	687a      	ldr	r2, [r7, #4]
 8004468:	62d1      	str	r1, [r2, #44]	; 0x2c
 800446a:	b282      	uxth	r2, r0
 800446c:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004472:	b29b      	uxth	r3, r3
 8004474:	3b01      	subs	r3, #1
 8004476:	b29a      	uxth	r2, r3
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004480:	b29b      	uxth	r3, r3
 8004482:	2b00      	cmp	r3, #0
 8004484:	d121      	bne.n	80044ca <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	4a12      	ldr	r2, [pc, #72]	; (80044d4 <I2SEx_RxISR_I2SExt+0x90>)
 800448c:	4293      	cmp	r3, r2
 800448e:	d101      	bne.n	8004494 <I2SEx_RxISR_I2SExt+0x50>
 8004490:	4b11      	ldr	r3, [pc, #68]	; (80044d8 <I2SEx_RxISR_I2SExt+0x94>)
 8004492:	e001      	b.n	8004498 <I2SEx_RxISR_I2SExt+0x54>
 8004494:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004498:	685a      	ldr	r2, [r3, #4]
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	490d      	ldr	r1, [pc, #52]	; (80044d4 <I2SEx_RxISR_I2SExt+0x90>)
 80044a0:	428b      	cmp	r3, r1
 80044a2:	d101      	bne.n	80044a8 <I2SEx_RxISR_I2SExt+0x64>
 80044a4:	4b0c      	ldr	r3, [pc, #48]	; (80044d8 <I2SEx_RxISR_I2SExt+0x94>)
 80044a6:	e001      	b.n	80044ac <I2SEx_RxISR_I2SExt+0x68>
 80044a8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80044ac:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80044b0:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80044b6:	b29b      	uxth	r3, r3
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d106      	bne.n	80044ca <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	2201      	movs	r2, #1
 80044c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80044c4:	6878      	ldr	r0, [r7, #4]
 80044c6:	f7fc ffbd 	bl	8001444 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80044ca:	bf00      	nop
 80044cc:	3708      	adds	r7, #8
 80044ce:	46bd      	mov	sp, r7
 80044d0:	bd80      	pop	{r7, pc}
 80044d2:	bf00      	nop
 80044d4:	40003800 	.word	0x40003800
 80044d8:	40003400 	.word	0x40003400

080044dc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80044dc:	b580      	push	{r7, lr}
 80044de:	b086      	sub	sp, #24
 80044e0:	af00      	add	r7, sp, #0
 80044e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d101      	bne.n	80044ee <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80044ea:	2301      	movs	r3, #1
 80044ec:	e267      	b.n	80049be <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	f003 0301 	and.w	r3, r3, #1
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d075      	beq.n	80045e6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80044fa:	4b88      	ldr	r3, [pc, #544]	; (800471c <HAL_RCC_OscConfig+0x240>)
 80044fc:	689b      	ldr	r3, [r3, #8]
 80044fe:	f003 030c 	and.w	r3, r3, #12
 8004502:	2b04      	cmp	r3, #4
 8004504:	d00c      	beq.n	8004520 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004506:	4b85      	ldr	r3, [pc, #532]	; (800471c <HAL_RCC_OscConfig+0x240>)
 8004508:	689b      	ldr	r3, [r3, #8]
 800450a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800450e:	2b08      	cmp	r3, #8
 8004510:	d112      	bne.n	8004538 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004512:	4b82      	ldr	r3, [pc, #520]	; (800471c <HAL_RCC_OscConfig+0x240>)
 8004514:	685b      	ldr	r3, [r3, #4]
 8004516:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800451a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800451e:	d10b      	bne.n	8004538 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004520:	4b7e      	ldr	r3, [pc, #504]	; (800471c <HAL_RCC_OscConfig+0x240>)
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004528:	2b00      	cmp	r3, #0
 800452a:	d05b      	beq.n	80045e4 <HAL_RCC_OscConfig+0x108>
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	685b      	ldr	r3, [r3, #4]
 8004530:	2b00      	cmp	r3, #0
 8004532:	d157      	bne.n	80045e4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004534:	2301      	movs	r3, #1
 8004536:	e242      	b.n	80049be <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	685b      	ldr	r3, [r3, #4]
 800453c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004540:	d106      	bne.n	8004550 <HAL_RCC_OscConfig+0x74>
 8004542:	4b76      	ldr	r3, [pc, #472]	; (800471c <HAL_RCC_OscConfig+0x240>)
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	4a75      	ldr	r2, [pc, #468]	; (800471c <HAL_RCC_OscConfig+0x240>)
 8004548:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800454c:	6013      	str	r3, [r2, #0]
 800454e:	e01d      	b.n	800458c <HAL_RCC_OscConfig+0xb0>
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	685b      	ldr	r3, [r3, #4]
 8004554:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004558:	d10c      	bne.n	8004574 <HAL_RCC_OscConfig+0x98>
 800455a:	4b70      	ldr	r3, [pc, #448]	; (800471c <HAL_RCC_OscConfig+0x240>)
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	4a6f      	ldr	r2, [pc, #444]	; (800471c <HAL_RCC_OscConfig+0x240>)
 8004560:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004564:	6013      	str	r3, [r2, #0]
 8004566:	4b6d      	ldr	r3, [pc, #436]	; (800471c <HAL_RCC_OscConfig+0x240>)
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	4a6c      	ldr	r2, [pc, #432]	; (800471c <HAL_RCC_OscConfig+0x240>)
 800456c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004570:	6013      	str	r3, [r2, #0]
 8004572:	e00b      	b.n	800458c <HAL_RCC_OscConfig+0xb0>
 8004574:	4b69      	ldr	r3, [pc, #420]	; (800471c <HAL_RCC_OscConfig+0x240>)
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	4a68      	ldr	r2, [pc, #416]	; (800471c <HAL_RCC_OscConfig+0x240>)
 800457a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800457e:	6013      	str	r3, [r2, #0]
 8004580:	4b66      	ldr	r3, [pc, #408]	; (800471c <HAL_RCC_OscConfig+0x240>)
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	4a65      	ldr	r2, [pc, #404]	; (800471c <HAL_RCC_OscConfig+0x240>)
 8004586:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800458a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	685b      	ldr	r3, [r3, #4]
 8004590:	2b00      	cmp	r3, #0
 8004592:	d013      	beq.n	80045bc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004594:	f7fd ffd0 	bl	8002538 <HAL_GetTick>
 8004598:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800459a:	e008      	b.n	80045ae <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800459c:	f7fd ffcc 	bl	8002538 <HAL_GetTick>
 80045a0:	4602      	mov	r2, r0
 80045a2:	693b      	ldr	r3, [r7, #16]
 80045a4:	1ad3      	subs	r3, r2, r3
 80045a6:	2b64      	cmp	r3, #100	; 0x64
 80045a8:	d901      	bls.n	80045ae <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80045aa:	2303      	movs	r3, #3
 80045ac:	e207      	b.n	80049be <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80045ae:	4b5b      	ldr	r3, [pc, #364]	; (800471c <HAL_RCC_OscConfig+0x240>)
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d0f0      	beq.n	800459c <HAL_RCC_OscConfig+0xc0>
 80045ba:	e014      	b.n	80045e6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80045bc:	f7fd ffbc 	bl	8002538 <HAL_GetTick>
 80045c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80045c2:	e008      	b.n	80045d6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80045c4:	f7fd ffb8 	bl	8002538 <HAL_GetTick>
 80045c8:	4602      	mov	r2, r0
 80045ca:	693b      	ldr	r3, [r7, #16]
 80045cc:	1ad3      	subs	r3, r2, r3
 80045ce:	2b64      	cmp	r3, #100	; 0x64
 80045d0:	d901      	bls.n	80045d6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80045d2:	2303      	movs	r3, #3
 80045d4:	e1f3      	b.n	80049be <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80045d6:	4b51      	ldr	r3, [pc, #324]	; (800471c <HAL_RCC_OscConfig+0x240>)
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d1f0      	bne.n	80045c4 <HAL_RCC_OscConfig+0xe8>
 80045e2:	e000      	b.n	80045e6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80045e4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	f003 0302 	and.w	r3, r3, #2
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d063      	beq.n	80046ba <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80045f2:	4b4a      	ldr	r3, [pc, #296]	; (800471c <HAL_RCC_OscConfig+0x240>)
 80045f4:	689b      	ldr	r3, [r3, #8]
 80045f6:	f003 030c 	and.w	r3, r3, #12
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d00b      	beq.n	8004616 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80045fe:	4b47      	ldr	r3, [pc, #284]	; (800471c <HAL_RCC_OscConfig+0x240>)
 8004600:	689b      	ldr	r3, [r3, #8]
 8004602:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004606:	2b08      	cmp	r3, #8
 8004608:	d11c      	bne.n	8004644 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800460a:	4b44      	ldr	r3, [pc, #272]	; (800471c <HAL_RCC_OscConfig+0x240>)
 800460c:	685b      	ldr	r3, [r3, #4]
 800460e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004612:	2b00      	cmp	r3, #0
 8004614:	d116      	bne.n	8004644 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004616:	4b41      	ldr	r3, [pc, #260]	; (800471c <HAL_RCC_OscConfig+0x240>)
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	f003 0302 	and.w	r3, r3, #2
 800461e:	2b00      	cmp	r3, #0
 8004620:	d005      	beq.n	800462e <HAL_RCC_OscConfig+0x152>
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	68db      	ldr	r3, [r3, #12]
 8004626:	2b01      	cmp	r3, #1
 8004628:	d001      	beq.n	800462e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800462a:	2301      	movs	r3, #1
 800462c:	e1c7      	b.n	80049be <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800462e:	4b3b      	ldr	r3, [pc, #236]	; (800471c <HAL_RCC_OscConfig+0x240>)
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	691b      	ldr	r3, [r3, #16]
 800463a:	00db      	lsls	r3, r3, #3
 800463c:	4937      	ldr	r1, [pc, #220]	; (800471c <HAL_RCC_OscConfig+0x240>)
 800463e:	4313      	orrs	r3, r2
 8004640:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004642:	e03a      	b.n	80046ba <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	68db      	ldr	r3, [r3, #12]
 8004648:	2b00      	cmp	r3, #0
 800464a:	d020      	beq.n	800468e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800464c:	4b34      	ldr	r3, [pc, #208]	; (8004720 <HAL_RCC_OscConfig+0x244>)
 800464e:	2201      	movs	r2, #1
 8004650:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004652:	f7fd ff71 	bl	8002538 <HAL_GetTick>
 8004656:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004658:	e008      	b.n	800466c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800465a:	f7fd ff6d 	bl	8002538 <HAL_GetTick>
 800465e:	4602      	mov	r2, r0
 8004660:	693b      	ldr	r3, [r7, #16]
 8004662:	1ad3      	subs	r3, r2, r3
 8004664:	2b02      	cmp	r3, #2
 8004666:	d901      	bls.n	800466c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004668:	2303      	movs	r3, #3
 800466a:	e1a8      	b.n	80049be <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800466c:	4b2b      	ldr	r3, [pc, #172]	; (800471c <HAL_RCC_OscConfig+0x240>)
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	f003 0302 	and.w	r3, r3, #2
 8004674:	2b00      	cmp	r3, #0
 8004676:	d0f0      	beq.n	800465a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004678:	4b28      	ldr	r3, [pc, #160]	; (800471c <HAL_RCC_OscConfig+0x240>)
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	691b      	ldr	r3, [r3, #16]
 8004684:	00db      	lsls	r3, r3, #3
 8004686:	4925      	ldr	r1, [pc, #148]	; (800471c <HAL_RCC_OscConfig+0x240>)
 8004688:	4313      	orrs	r3, r2
 800468a:	600b      	str	r3, [r1, #0]
 800468c:	e015      	b.n	80046ba <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800468e:	4b24      	ldr	r3, [pc, #144]	; (8004720 <HAL_RCC_OscConfig+0x244>)
 8004690:	2200      	movs	r2, #0
 8004692:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004694:	f7fd ff50 	bl	8002538 <HAL_GetTick>
 8004698:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800469a:	e008      	b.n	80046ae <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800469c:	f7fd ff4c 	bl	8002538 <HAL_GetTick>
 80046a0:	4602      	mov	r2, r0
 80046a2:	693b      	ldr	r3, [r7, #16]
 80046a4:	1ad3      	subs	r3, r2, r3
 80046a6:	2b02      	cmp	r3, #2
 80046a8:	d901      	bls.n	80046ae <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80046aa:	2303      	movs	r3, #3
 80046ac:	e187      	b.n	80049be <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80046ae:	4b1b      	ldr	r3, [pc, #108]	; (800471c <HAL_RCC_OscConfig+0x240>)
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	f003 0302 	and.w	r3, r3, #2
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d1f0      	bne.n	800469c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	f003 0308 	and.w	r3, r3, #8
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d036      	beq.n	8004734 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	695b      	ldr	r3, [r3, #20]
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d016      	beq.n	80046fc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80046ce:	4b15      	ldr	r3, [pc, #84]	; (8004724 <HAL_RCC_OscConfig+0x248>)
 80046d0:	2201      	movs	r2, #1
 80046d2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80046d4:	f7fd ff30 	bl	8002538 <HAL_GetTick>
 80046d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80046da:	e008      	b.n	80046ee <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80046dc:	f7fd ff2c 	bl	8002538 <HAL_GetTick>
 80046e0:	4602      	mov	r2, r0
 80046e2:	693b      	ldr	r3, [r7, #16]
 80046e4:	1ad3      	subs	r3, r2, r3
 80046e6:	2b02      	cmp	r3, #2
 80046e8:	d901      	bls.n	80046ee <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80046ea:	2303      	movs	r3, #3
 80046ec:	e167      	b.n	80049be <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80046ee:	4b0b      	ldr	r3, [pc, #44]	; (800471c <HAL_RCC_OscConfig+0x240>)
 80046f0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80046f2:	f003 0302 	and.w	r3, r3, #2
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d0f0      	beq.n	80046dc <HAL_RCC_OscConfig+0x200>
 80046fa:	e01b      	b.n	8004734 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80046fc:	4b09      	ldr	r3, [pc, #36]	; (8004724 <HAL_RCC_OscConfig+0x248>)
 80046fe:	2200      	movs	r2, #0
 8004700:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004702:	f7fd ff19 	bl	8002538 <HAL_GetTick>
 8004706:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004708:	e00e      	b.n	8004728 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800470a:	f7fd ff15 	bl	8002538 <HAL_GetTick>
 800470e:	4602      	mov	r2, r0
 8004710:	693b      	ldr	r3, [r7, #16]
 8004712:	1ad3      	subs	r3, r2, r3
 8004714:	2b02      	cmp	r3, #2
 8004716:	d907      	bls.n	8004728 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004718:	2303      	movs	r3, #3
 800471a:	e150      	b.n	80049be <HAL_RCC_OscConfig+0x4e2>
 800471c:	40023800 	.word	0x40023800
 8004720:	42470000 	.word	0x42470000
 8004724:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004728:	4b88      	ldr	r3, [pc, #544]	; (800494c <HAL_RCC_OscConfig+0x470>)
 800472a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800472c:	f003 0302 	and.w	r3, r3, #2
 8004730:	2b00      	cmp	r3, #0
 8004732:	d1ea      	bne.n	800470a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	f003 0304 	and.w	r3, r3, #4
 800473c:	2b00      	cmp	r3, #0
 800473e:	f000 8097 	beq.w	8004870 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004742:	2300      	movs	r3, #0
 8004744:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004746:	4b81      	ldr	r3, [pc, #516]	; (800494c <HAL_RCC_OscConfig+0x470>)
 8004748:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800474a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800474e:	2b00      	cmp	r3, #0
 8004750:	d10f      	bne.n	8004772 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004752:	2300      	movs	r3, #0
 8004754:	60bb      	str	r3, [r7, #8]
 8004756:	4b7d      	ldr	r3, [pc, #500]	; (800494c <HAL_RCC_OscConfig+0x470>)
 8004758:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800475a:	4a7c      	ldr	r2, [pc, #496]	; (800494c <HAL_RCC_OscConfig+0x470>)
 800475c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004760:	6413      	str	r3, [r2, #64]	; 0x40
 8004762:	4b7a      	ldr	r3, [pc, #488]	; (800494c <HAL_RCC_OscConfig+0x470>)
 8004764:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004766:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800476a:	60bb      	str	r3, [r7, #8]
 800476c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800476e:	2301      	movs	r3, #1
 8004770:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004772:	4b77      	ldr	r3, [pc, #476]	; (8004950 <HAL_RCC_OscConfig+0x474>)
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800477a:	2b00      	cmp	r3, #0
 800477c:	d118      	bne.n	80047b0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800477e:	4b74      	ldr	r3, [pc, #464]	; (8004950 <HAL_RCC_OscConfig+0x474>)
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	4a73      	ldr	r2, [pc, #460]	; (8004950 <HAL_RCC_OscConfig+0x474>)
 8004784:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004788:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800478a:	f7fd fed5 	bl	8002538 <HAL_GetTick>
 800478e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004790:	e008      	b.n	80047a4 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004792:	f7fd fed1 	bl	8002538 <HAL_GetTick>
 8004796:	4602      	mov	r2, r0
 8004798:	693b      	ldr	r3, [r7, #16]
 800479a:	1ad3      	subs	r3, r2, r3
 800479c:	2b02      	cmp	r3, #2
 800479e:	d901      	bls.n	80047a4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80047a0:	2303      	movs	r3, #3
 80047a2:	e10c      	b.n	80049be <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80047a4:	4b6a      	ldr	r3, [pc, #424]	; (8004950 <HAL_RCC_OscConfig+0x474>)
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d0f0      	beq.n	8004792 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	689b      	ldr	r3, [r3, #8]
 80047b4:	2b01      	cmp	r3, #1
 80047b6:	d106      	bne.n	80047c6 <HAL_RCC_OscConfig+0x2ea>
 80047b8:	4b64      	ldr	r3, [pc, #400]	; (800494c <HAL_RCC_OscConfig+0x470>)
 80047ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80047bc:	4a63      	ldr	r2, [pc, #396]	; (800494c <HAL_RCC_OscConfig+0x470>)
 80047be:	f043 0301 	orr.w	r3, r3, #1
 80047c2:	6713      	str	r3, [r2, #112]	; 0x70
 80047c4:	e01c      	b.n	8004800 <HAL_RCC_OscConfig+0x324>
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	689b      	ldr	r3, [r3, #8]
 80047ca:	2b05      	cmp	r3, #5
 80047cc:	d10c      	bne.n	80047e8 <HAL_RCC_OscConfig+0x30c>
 80047ce:	4b5f      	ldr	r3, [pc, #380]	; (800494c <HAL_RCC_OscConfig+0x470>)
 80047d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80047d2:	4a5e      	ldr	r2, [pc, #376]	; (800494c <HAL_RCC_OscConfig+0x470>)
 80047d4:	f043 0304 	orr.w	r3, r3, #4
 80047d8:	6713      	str	r3, [r2, #112]	; 0x70
 80047da:	4b5c      	ldr	r3, [pc, #368]	; (800494c <HAL_RCC_OscConfig+0x470>)
 80047dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80047de:	4a5b      	ldr	r2, [pc, #364]	; (800494c <HAL_RCC_OscConfig+0x470>)
 80047e0:	f043 0301 	orr.w	r3, r3, #1
 80047e4:	6713      	str	r3, [r2, #112]	; 0x70
 80047e6:	e00b      	b.n	8004800 <HAL_RCC_OscConfig+0x324>
 80047e8:	4b58      	ldr	r3, [pc, #352]	; (800494c <HAL_RCC_OscConfig+0x470>)
 80047ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80047ec:	4a57      	ldr	r2, [pc, #348]	; (800494c <HAL_RCC_OscConfig+0x470>)
 80047ee:	f023 0301 	bic.w	r3, r3, #1
 80047f2:	6713      	str	r3, [r2, #112]	; 0x70
 80047f4:	4b55      	ldr	r3, [pc, #340]	; (800494c <HAL_RCC_OscConfig+0x470>)
 80047f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80047f8:	4a54      	ldr	r2, [pc, #336]	; (800494c <HAL_RCC_OscConfig+0x470>)
 80047fa:	f023 0304 	bic.w	r3, r3, #4
 80047fe:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	689b      	ldr	r3, [r3, #8]
 8004804:	2b00      	cmp	r3, #0
 8004806:	d015      	beq.n	8004834 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004808:	f7fd fe96 	bl	8002538 <HAL_GetTick>
 800480c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800480e:	e00a      	b.n	8004826 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004810:	f7fd fe92 	bl	8002538 <HAL_GetTick>
 8004814:	4602      	mov	r2, r0
 8004816:	693b      	ldr	r3, [r7, #16]
 8004818:	1ad3      	subs	r3, r2, r3
 800481a:	f241 3288 	movw	r2, #5000	; 0x1388
 800481e:	4293      	cmp	r3, r2
 8004820:	d901      	bls.n	8004826 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004822:	2303      	movs	r3, #3
 8004824:	e0cb      	b.n	80049be <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004826:	4b49      	ldr	r3, [pc, #292]	; (800494c <HAL_RCC_OscConfig+0x470>)
 8004828:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800482a:	f003 0302 	and.w	r3, r3, #2
 800482e:	2b00      	cmp	r3, #0
 8004830:	d0ee      	beq.n	8004810 <HAL_RCC_OscConfig+0x334>
 8004832:	e014      	b.n	800485e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004834:	f7fd fe80 	bl	8002538 <HAL_GetTick>
 8004838:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800483a:	e00a      	b.n	8004852 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800483c:	f7fd fe7c 	bl	8002538 <HAL_GetTick>
 8004840:	4602      	mov	r2, r0
 8004842:	693b      	ldr	r3, [r7, #16]
 8004844:	1ad3      	subs	r3, r2, r3
 8004846:	f241 3288 	movw	r2, #5000	; 0x1388
 800484a:	4293      	cmp	r3, r2
 800484c:	d901      	bls.n	8004852 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800484e:	2303      	movs	r3, #3
 8004850:	e0b5      	b.n	80049be <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004852:	4b3e      	ldr	r3, [pc, #248]	; (800494c <HAL_RCC_OscConfig+0x470>)
 8004854:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004856:	f003 0302 	and.w	r3, r3, #2
 800485a:	2b00      	cmp	r3, #0
 800485c:	d1ee      	bne.n	800483c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800485e:	7dfb      	ldrb	r3, [r7, #23]
 8004860:	2b01      	cmp	r3, #1
 8004862:	d105      	bne.n	8004870 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004864:	4b39      	ldr	r3, [pc, #228]	; (800494c <HAL_RCC_OscConfig+0x470>)
 8004866:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004868:	4a38      	ldr	r2, [pc, #224]	; (800494c <HAL_RCC_OscConfig+0x470>)
 800486a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800486e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	699b      	ldr	r3, [r3, #24]
 8004874:	2b00      	cmp	r3, #0
 8004876:	f000 80a1 	beq.w	80049bc <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800487a:	4b34      	ldr	r3, [pc, #208]	; (800494c <HAL_RCC_OscConfig+0x470>)
 800487c:	689b      	ldr	r3, [r3, #8]
 800487e:	f003 030c 	and.w	r3, r3, #12
 8004882:	2b08      	cmp	r3, #8
 8004884:	d05c      	beq.n	8004940 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	699b      	ldr	r3, [r3, #24]
 800488a:	2b02      	cmp	r3, #2
 800488c:	d141      	bne.n	8004912 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800488e:	4b31      	ldr	r3, [pc, #196]	; (8004954 <HAL_RCC_OscConfig+0x478>)
 8004890:	2200      	movs	r2, #0
 8004892:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004894:	f7fd fe50 	bl	8002538 <HAL_GetTick>
 8004898:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800489a:	e008      	b.n	80048ae <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800489c:	f7fd fe4c 	bl	8002538 <HAL_GetTick>
 80048a0:	4602      	mov	r2, r0
 80048a2:	693b      	ldr	r3, [r7, #16]
 80048a4:	1ad3      	subs	r3, r2, r3
 80048a6:	2b02      	cmp	r3, #2
 80048a8:	d901      	bls.n	80048ae <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80048aa:	2303      	movs	r3, #3
 80048ac:	e087      	b.n	80049be <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80048ae:	4b27      	ldr	r3, [pc, #156]	; (800494c <HAL_RCC_OscConfig+0x470>)
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d1f0      	bne.n	800489c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	69da      	ldr	r2, [r3, #28]
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	6a1b      	ldr	r3, [r3, #32]
 80048c2:	431a      	orrs	r2, r3
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048c8:	019b      	lsls	r3, r3, #6
 80048ca:	431a      	orrs	r2, r3
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048d0:	085b      	lsrs	r3, r3, #1
 80048d2:	3b01      	subs	r3, #1
 80048d4:	041b      	lsls	r3, r3, #16
 80048d6:	431a      	orrs	r2, r3
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048dc:	061b      	lsls	r3, r3, #24
 80048de:	491b      	ldr	r1, [pc, #108]	; (800494c <HAL_RCC_OscConfig+0x470>)
 80048e0:	4313      	orrs	r3, r2
 80048e2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80048e4:	4b1b      	ldr	r3, [pc, #108]	; (8004954 <HAL_RCC_OscConfig+0x478>)
 80048e6:	2201      	movs	r2, #1
 80048e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80048ea:	f7fd fe25 	bl	8002538 <HAL_GetTick>
 80048ee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80048f0:	e008      	b.n	8004904 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80048f2:	f7fd fe21 	bl	8002538 <HAL_GetTick>
 80048f6:	4602      	mov	r2, r0
 80048f8:	693b      	ldr	r3, [r7, #16]
 80048fa:	1ad3      	subs	r3, r2, r3
 80048fc:	2b02      	cmp	r3, #2
 80048fe:	d901      	bls.n	8004904 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004900:	2303      	movs	r3, #3
 8004902:	e05c      	b.n	80049be <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004904:	4b11      	ldr	r3, [pc, #68]	; (800494c <HAL_RCC_OscConfig+0x470>)
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800490c:	2b00      	cmp	r3, #0
 800490e:	d0f0      	beq.n	80048f2 <HAL_RCC_OscConfig+0x416>
 8004910:	e054      	b.n	80049bc <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004912:	4b10      	ldr	r3, [pc, #64]	; (8004954 <HAL_RCC_OscConfig+0x478>)
 8004914:	2200      	movs	r2, #0
 8004916:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004918:	f7fd fe0e 	bl	8002538 <HAL_GetTick>
 800491c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800491e:	e008      	b.n	8004932 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004920:	f7fd fe0a 	bl	8002538 <HAL_GetTick>
 8004924:	4602      	mov	r2, r0
 8004926:	693b      	ldr	r3, [r7, #16]
 8004928:	1ad3      	subs	r3, r2, r3
 800492a:	2b02      	cmp	r3, #2
 800492c:	d901      	bls.n	8004932 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800492e:	2303      	movs	r3, #3
 8004930:	e045      	b.n	80049be <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004932:	4b06      	ldr	r3, [pc, #24]	; (800494c <HAL_RCC_OscConfig+0x470>)
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800493a:	2b00      	cmp	r3, #0
 800493c:	d1f0      	bne.n	8004920 <HAL_RCC_OscConfig+0x444>
 800493e:	e03d      	b.n	80049bc <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	699b      	ldr	r3, [r3, #24]
 8004944:	2b01      	cmp	r3, #1
 8004946:	d107      	bne.n	8004958 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004948:	2301      	movs	r3, #1
 800494a:	e038      	b.n	80049be <HAL_RCC_OscConfig+0x4e2>
 800494c:	40023800 	.word	0x40023800
 8004950:	40007000 	.word	0x40007000
 8004954:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004958:	4b1b      	ldr	r3, [pc, #108]	; (80049c8 <HAL_RCC_OscConfig+0x4ec>)
 800495a:	685b      	ldr	r3, [r3, #4]
 800495c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	699b      	ldr	r3, [r3, #24]
 8004962:	2b01      	cmp	r3, #1
 8004964:	d028      	beq.n	80049b8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004970:	429a      	cmp	r2, r3
 8004972:	d121      	bne.n	80049b8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800497e:	429a      	cmp	r2, r3
 8004980:	d11a      	bne.n	80049b8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004982:	68fa      	ldr	r2, [r7, #12]
 8004984:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004988:	4013      	ands	r3, r2
 800498a:	687a      	ldr	r2, [r7, #4]
 800498c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800498e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004990:	4293      	cmp	r3, r2
 8004992:	d111      	bne.n	80049b8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800499e:	085b      	lsrs	r3, r3, #1
 80049a0:	3b01      	subs	r3, #1
 80049a2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80049a4:	429a      	cmp	r2, r3
 80049a6:	d107      	bne.n	80049b8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049b2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80049b4:	429a      	cmp	r2, r3
 80049b6:	d001      	beq.n	80049bc <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80049b8:	2301      	movs	r3, #1
 80049ba:	e000      	b.n	80049be <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80049bc:	2300      	movs	r3, #0
}
 80049be:	4618      	mov	r0, r3
 80049c0:	3718      	adds	r7, #24
 80049c2:	46bd      	mov	sp, r7
 80049c4:	bd80      	pop	{r7, pc}
 80049c6:	bf00      	nop
 80049c8:	40023800 	.word	0x40023800

080049cc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80049cc:	b580      	push	{r7, lr}
 80049ce:	b084      	sub	sp, #16
 80049d0:	af00      	add	r7, sp, #0
 80049d2:	6078      	str	r0, [r7, #4]
 80049d4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	2b00      	cmp	r3, #0
 80049da:	d101      	bne.n	80049e0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80049dc:	2301      	movs	r3, #1
 80049de:	e0cc      	b.n	8004b7a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80049e0:	4b68      	ldr	r3, [pc, #416]	; (8004b84 <HAL_RCC_ClockConfig+0x1b8>)
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	f003 0307 	and.w	r3, r3, #7
 80049e8:	683a      	ldr	r2, [r7, #0]
 80049ea:	429a      	cmp	r2, r3
 80049ec:	d90c      	bls.n	8004a08 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80049ee:	4b65      	ldr	r3, [pc, #404]	; (8004b84 <HAL_RCC_ClockConfig+0x1b8>)
 80049f0:	683a      	ldr	r2, [r7, #0]
 80049f2:	b2d2      	uxtb	r2, r2
 80049f4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80049f6:	4b63      	ldr	r3, [pc, #396]	; (8004b84 <HAL_RCC_ClockConfig+0x1b8>)
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	f003 0307 	and.w	r3, r3, #7
 80049fe:	683a      	ldr	r2, [r7, #0]
 8004a00:	429a      	cmp	r2, r3
 8004a02:	d001      	beq.n	8004a08 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004a04:	2301      	movs	r3, #1
 8004a06:	e0b8      	b.n	8004b7a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	f003 0302 	and.w	r3, r3, #2
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	d020      	beq.n	8004a56 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	f003 0304 	and.w	r3, r3, #4
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	d005      	beq.n	8004a2c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004a20:	4b59      	ldr	r3, [pc, #356]	; (8004b88 <HAL_RCC_ClockConfig+0x1bc>)
 8004a22:	689b      	ldr	r3, [r3, #8]
 8004a24:	4a58      	ldr	r2, [pc, #352]	; (8004b88 <HAL_RCC_ClockConfig+0x1bc>)
 8004a26:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004a2a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	f003 0308 	and.w	r3, r3, #8
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	d005      	beq.n	8004a44 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004a38:	4b53      	ldr	r3, [pc, #332]	; (8004b88 <HAL_RCC_ClockConfig+0x1bc>)
 8004a3a:	689b      	ldr	r3, [r3, #8]
 8004a3c:	4a52      	ldr	r2, [pc, #328]	; (8004b88 <HAL_RCC_ClockConfig+0x1bc>)
 8004a3e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004a42:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004a44:	4b50      	ldr	r3, [pc, #320]	; (8004b88 <HAL_RCC_ClockConfig+0x1bc>)
 8004a46:	689b      	ldr	r3, [r3, #8]
 8004a48:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	689b      	ldr	r3, [r3, #8]
 8004a50:	494d      	ldr	r1, [pc, #308]	; (8004b88 <HAL_RCC_ClockConfig+0x1bc>)
 8004a52:	4313      	orrs	r3, r2
 8004a54:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	f003 0301 	and.w	r3, r3, #1
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d044      	beq.n	8004aec <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	685b      	ldr	r3, [r3, #4]
 8004a66:	2b01      	cmp	r3, #1
 8004a68:	d107      	bne.n	8004a7a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004a6a:	4b47      	ldr	r3, [pc, #284]	; (8004b88 <HAL_RCC_ClockConfig+0x1bc>)
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d119      	bne.n	8004aaa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004a76:	2301      	movs	r3, #1
 8004a78:	e07f      	b.n	8004b7a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	685b      	ldr	r3, [r3, #4]
 8004a7e:	2b02      	cmp	r3, #2
 8004a80:	d003      	beq.n	8004a8a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004a86:	2b03      	cmp	r3, #3
 8004a88:	d107      	bne.n	8004a9a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004a8a:	4b3f      	ldr	r3, [pc, #252]	; (8004b88 <HAL_RCC_ClockConfig+0x1bc>)
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d109      	bne.n	8004aaa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004a96:	2301      	movs	r3, #1
 8004a98:	e06f      	b.n	8004b7a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004a9a:	4b3b      	ldr	r3, [pc, #236]	; (8004b88 <HAL_RCC_ClockConfig+0x1bc>)
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	f003 0302 	and.w	r3, r3, #2
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	d101      	bne.n	8004aaa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004aa6:	2301      	movs	r3, #1
 8004aa8:	e067      	b.n	8004b7a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004aaa:	4b37      	ldr	r3, [pc, #220]	; (8004b88 <HAL_RCC_ClockConfig+0x1bc>)
 8004aac:	689b      	ldr	r3, [r3, #8]
 8004aae:	f023 0203 	bic.w	r2, r3, #3
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	685b      	ldr	r3, [r3, #4]
 8004ab6:	4934      	ldr	r1, [pc, #208]	; (8004b88 <HAL_RCC_ClockConfig+0x1bc>)
 8004ab8:	4313      	orrs	r3, r2
 8004aba:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004abc:	f7fd fd3c 	bl	8002538 <HAL_GetTick>
 8004ac0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004ac2:	e00a      	b.n	8004ada <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004ac4:	f7fd fd38 	bl	8002538 <HAL_GetTick>
 8004ac8:	4602      	mov	r2, r0
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	1ad3      	subs	r3, r2, r3
 8004ace:	f241 3288 	movw	r2, #5000	; 0x1388
 8004ad2:	4293      	cmp	r3, r2
 8004ad4:	d901      	bls.n	8004ada <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004ad6:	2303      	movs	r3, #3
 8004ad8:	e04f      	b.n	8004b7a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004ada:	4b2b      	ldr	r3, [pc, #172]	; (8004b88 <HAL_RCC_ClockConfig+0x1bc>)
 8004adc:	689b      	ldr	r3, [r3, #8]
 8004ade:	f003 020c 	and.w	r2, r3, #12
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	685b      	ldr	r3, [r3, #4]
 8004ae6:	009b      	lsls	r3, r3, #2
 8004ae8:	429a      	cmp	r2, r3
 8004aea:	d1eb      	bne.n	8004ac4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004aec:	4b25      	ldr	r3, [pc, #148]	; (8004b84 <HAL_RCC_ClockConfig+0x1b8>)
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	f003 0307 	and.w	r3, r3, #7
 8004af4:	683a      	ldr	r2, [r7, #0]
 8004af6:	429a      	cmp	r2, r3
 8004af8:	d20c      	bcs.n	8004b14 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004afa:	4b22      	ldr	r3, [pc, #136]	; (8004b84 <HAL_RCC_ClockConfig+0x1b8>)
 8004afc:	683a      	ldr	r2, [r7, #0]
 8004afe:	b2d2      	uxtb	r2, r2
 8004b00:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004b02:	4b20      	ldr	r3, [pc, #128]	; (8004b84 <HAL_RCC_ClockConfig+0x1b8>)
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	f003 0307 	and.w	r3, r3, #7
 8004b0a:	683a      	ldr	r2, [r7, #0]
 8004b0c:	429a      	cmp	r2, r3
 8004b0e:	d001      	beq.n	8004b14 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004b10:	2301      	movs	r3, #1
 8004b12:	e032      	b.n	8004b7a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	f003 0304 	and.w	r3, r3, #4
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	d008      	beq.n	8004b32 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004b20:	4b19      	ldr	r3, [pc, #100]	; (8004b88 <HAL_RCC_ClockConfig+0x1bc>)
 8004b22:	689b      	ldr	r3, [r3, #8]
 8004b24:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	68db      	ldr	r3, [r3, #12]
 8004b2c:	4916      	ldr	r1, [pc, #88]	; (8004b88 <HAL_RCC_ClockConfig+0x1bc>)
 8004b2e:	4313      	orrs	r3, r2
 8004b30:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	f003 0308 	and.w	r3, r3, #8
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d009      	beq.n	8004b52 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004b3e:	4b12      	ldr	r3, [pc, #72]	; (8004b88 <HAL_RCC_ClockConfig+0x1bc>)
 8004b40:	689b      	ldr	r3, [r3, #8]
 8004b42:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	691b      	ldr	r3, [r3, #16]
 8004b4a:	00db      	lsls	r3, r3, #3
 8004b4c:	490e      	ldr	r1, [pc, #56]	; (8004b88 <HAL_RCC_ClockConfig+0x1bc>)
 8004b4e:	4313      	orrs	r3, r2
 8004b50:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004b52:	f000 f821 	bl	8004b98 <HAL_RCC_GetSysClockFreq>
 8004b56:	4602      	mov	r2, r0
 8004b58:	4b0b      	ldr	r3, [pc, #44]	; (8004b88 <HAL_RCC_ClockConfig+0x1bc>)
 8004b5a:	689b      	ldr	r3, [r3, #8]
 8004b5c:	091b      	lsrs	r3, r3, #4
 8004b5e:	f003 030f 	and.w	r3, r3, #15
 8004b62:	490a      	ldr	r1, [pc, #40]	; (8004b8c <HAL_RCC_ClockConfig+0x1c0>)
 8004b64:	5ccb      	ldrb	r3, [r1, r3]
 8004b66:	fa22 f303 	lsr.w	r3, r2, r3
 8004b6a:	4a09      	ldr	r2, [pc, #36]	; (8004b90 <HAL_RCC_ClockConfig+0x1c4>)
 8004b6c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004b6e:	4b09      	ldr	r3, [pc, #36]	; (8004b94 <HAL_RCC_ClockConfig+0x1c8>)
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	4618      	mov	r0, r3
 8004b74:	f7fd fc9c 	bl	80024b0 <HAL_InitTick>

  return HAL_OK;
 8004b78:	2300      	movs	r3, #0
}
 8004b7a:	4618      	mov	r0, r3
 8004b7c:	3710      	adds	r7, #16
 8004b7e:	46bd      	mov	sp, r7
 8004b80:	bd80      	pop	{r7, pc}
 8004b82:	bf00      	nop
 8004b84:	40023c00 	.word	0x40023c00
 8004b88:	40023800 	.word	0x40023800
 8004b8c:	08009a50 	.word	0x08009a50
 8004b90:	20000004 	.word	0x20000004
 8004b94:	20000008 	.word	0x20000008

08004b98 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004b98:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004b9c:	b094      	sub	sp, #80	; 0x50
 8004b9e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004ba0:	2300      	movs	r3, #0
 8004ba2:	647b      	str	r3, [r7, #68]	; 0x44
 8004ba4:	2300      	movs	r3, #0
 8004ba6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004ba8:	2300      	movs	r3, #0
 8004baa:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8004bac:	2300      	movs	r3, #0
 8004bae:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004bb0:	4b79      	ldr	r3, [pc, #484]	; (8004d98 <HAL_RCC_GetSysClockFreq+0x200>)
 8004bb2:	689b      	ldr	r3, [r3, #8]
 8004bb4:	f003 030c 	and.w	r3, r3, #12
 8004bb8:	2b08      	cmp	r3, #8
 8004bba:	d00d      	beq.n	8004bd8 <HAL_RCC_GetSysClockFreq+0x40>
 8004bbc:	2b08      	cmp	r3, #8
 8004bbe:	f200 80e1 	bhi.w	8004d84 <HAL_RCC_GetSysClockFreq+0x1ec>
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d002      	beq.n	8004bcc <HAL_RCC_GetSysClockFreq+0x34>
 8004bc6:	2b04      	cmp	r3, #4
 8004bc8:	d003      	beq.n	8004bd2 <HAL_RCC_GetSysClockFreq+0x3a>
 8004bca:	e0db      	b.n	8004d84 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004bcc:	4b73      	ldr	r3, [pc, #460]	; (8004d9c <HAL_RCC_GetSysClockFreq+0x204>)
 8004bce:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8004bd0:	e0db      	b.n	8004d8a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004bd2:	4b73      	ldr	r3, [pc, #460]	; (8004da0 <HAL_RCC_GetSysClockFreq+0x208>)
 8004bd4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004bd6:	e0d8      	b.n	8004d8a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004bd8:	4b6f      	ldr	r3, [pc, #444]	; (8004d98 <HAL_RCC_GetSysClockFreq+0x200>)
 8004bda:	685b      	ldr	r3, [r3, #4]
 8004bdc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004be0:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004be2:	4b6d      	ldr	r3, [pc, #436]	; (8004d98 <HAL_RCC_GetSysClockFreq+0x200>)
 8004be4:	685b      	ldr	r3, [r3, #4]
 8004be6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d063      	beq.n	8004cb6 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004bee:	4b6a      	ldr	r3, [pc, #424]	; (8004d98 <HAL_RCC_GetSysClockFreq+0x200>)
 8004bf0:	685b      	ldr	r3, [r3, #4]
 8004bf2:	099b      	lsrs	r3, r3, #6
 8004bf4:	2200      	movs	r2, #0
 8004bf6:	63bb      	str	r3, [r7, #56]	; 0x38
 8004bf8:	63fa      	str	r2, [r7, #60]	; 0x3c
 8004bfa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004bfc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004c00:	633b      	str	r3, [r7, #48]	; 0x30
 8004c02:	2300      	movs	r3, #0
 8004c04:	637b      	str	r3, [r7, #52]	; 0x34
 8004c06:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8004c0a:	4622      	mov	r2, r4
 8004c0c:	462b      	mov	r3, r5
 8004c0e:	f04f 0000 	mov.w	r0, #0
 8004c12:	f04f 0100 	mov.w	r1, #0
 8004c16:	0159      	lsls	r1, r3, #5
 8004c18:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004c1c:	0150      	lsls	r0, r2, #5
 8004c1e:	4602      	mov	r2, r0
 8004c20:	460b      	mov	r3, r1
 8004c22:	4621      	mov	r1, r4
 8004c24:	1a51      	subs	r1, r2, r1
 8004c26:	6139      	str	r1, [r7, #16]
 8004c28:	4629      	mov	r1, r5
 8004c2a:	eb63 0301 	sbc.w	r3, r3, r1
 8004c2e:	617b      	str	r3, [r7, #20]
 8004c30:	f04f 0200 	mov.w	r2, #0
 8004c34:	f04f 0300 	mov.w	r3, #0
 8004c38:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004c3c:	4659      	mov	r1, fp
 8004c3e:	018b      	lsls	r3, r1, #6
 8004c40:	4651      	mov	r1, sl
 8004c42:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004c46:	4651      	mov	r1, sl
 8004c48:	018a      	lsls	r2, r1, #6
 8004c4a:	4651      	mov	r1, sl
 8004c4c:	ebb2 0801 	subs.w	r8, r2, r1
 8004c50:	4659      	mov	r1, fp
 8004c52:	eb63 0901 	sbc.w	r9, r3, r1
 8004c56:	f04f 0200 	mov.w	r2, #0
 8004c5a:	f04f 0300 	mov.w	r3, #0
 8004c5e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004c62:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004c66:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004c6a:	4690      	mov	r8, r2
 8004c6c:	4699      	mov	r9, r3
 8004c6e:	4623      	mov	r3, r4
 8004c70:	eb18 0303 	adds.w	r3, r8, r3
 8004c74:	60bb      	str	r3, [r7, #8]
 8004c76:	462b      	mov	r3, r5
 8004c78:	eb49 0303 	adc.w	r3, r9, r3
 8004c7c:	60fb      	str	r3, [r7, #12]
 8004c7e:	f04f 0200 	mov.w	r2, #0
 8004c82:	f04f 0300 	mov.w	r3, #0
 8004c86:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004c8a:	4629      	mov	r1, r5
 8004c8c:	024b      	lsls	r3, r1, #9
 8004c8e:	4621      	mov	r1, r4
 8004c90:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004c94:	4621      	mov	r1, r4
 8004c96:	024a      	lsls	r2, r1, #9
 8004c98:	4610      	mov	r0, r2
 8004c9a:	4619      	mov	r1, r3
 8004c9c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004c9e:	2200      	movs	r2, #0
 8004ca0:	62bb      	str	r3, [r7, #40]	; 0x28
 8004ca2:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004ca4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004ca8:	f7fb ff8e 	bl	8000bc8 <__aeabi_uldivmod>
 8004cac:	4602      	mov	r2, r0
 8004cae:	460b      	mov	r3, r1
 8004cb0:	4613      	mov	r3, r2
 8004cb2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004cb4:	e058      	b.n	8004d68 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004cb6:	4b38      	ldr	r3, [pc, #224]	; (8004d98 <HAL_RCC_GetSysClockFreq+0x200>)
 8004cb8:	685b      	ldr	r3, [r3, #4]
 8004cba:	099b      	lsrs	r3, r3, #6
 8004cbc:	2200      	movs	r2, #0
 8004cbe:	4618      	mov	r0, r3
 8004cc0:	4611      	mov	r1, r2
 8004cc2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004cc6:	623b      	str	r3, [r7, #32]
 8004cc8:	2300      	movs	r3, #0
 8004cca:	627b      	str	r3, [r7, #36]	; 0x24
 8004ccc:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004cd0:	4642      	mov	r2, r8
 8004cd2:	464b      	mov	r3, r9
 8004cd4:	f04f 0000 	mov.w	r0, #0
 8004cd8:	f04f 0100 	mov.w	r1, #0
 8004cdc:	0159      	lsls	r1, r3, #5
 8004cde:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004ce2:	0150      	lsls	r0, r2, #5
 8004ce4:	4602      	mov	r2, r0
 8004ce6:	460b      	mov	r3, r1
 8004ce8:	4641      	mov	r1, r8
 8004cea:	ebb2 0a01 	subs.w	sl, r2, r1
 8004cee:	4649      	mov	r1, r9
 8004cf0:	eb63 0b01 	sbc.w	fp, r3, r1
 8004cf4:	f04f 0200 	mov.w	r2, #0
 8004cf8:	f04f 0300 	mov.w	r3, #0
 8004cfc:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004d00:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004d04:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004d08:	ebb2 040a 	subs.w	r4, r2, sl
 8004d0c:	eb63 050b 	sbc.w	r5, r3, fp
 8004d10:	f04f 0200 	mov.w	r2, #0
 8004d14:	f04f 0300 	mov.w	r3, #0
 8004d18:	00eb      	lsls	r3, r5, #3
 8004d1a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004d1e:	00e2      	lsls	r2, r4, #3
 8004d20:	4614      	mov	r4, r2
 8004d22:	461d      	mov	r5, r3
 8004d24:	4643      	mov	r3, r8
 8004d26:	18e3      	adds	r3, r4, r3
 8004d28:	603b      	str	r3, [r7, #0]
 8004d2a:	464b      	mov	r3, r9
 8004d2c:	eb45 0303 	adc.w	r3, r5, r3
 8004d30:	607b      	str	r3, [r7, #4]
 8004d32:	f04f 0200 	mov.w	r2, #0
 8004d36:	f04f 0300 	mov.w	r3, #0
 8004d3a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004d3e:	4629      	mov	r1, r5
 8004d40:	028b      	lsls	r3, r1, #10
 8004d42:	4621      	mov	r1, r4
 8004d44:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004d48:	4621      	mov	r1, r4
 8004d4a:	028a      	lsls	r2, r1, #10
 8004d4c:	4610      	mov	r0, r2
 8004d4e:	4619      	mov	r1, r3
 8004d50:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004d52:	2200      	movs	r2, #0
 8004d54:	61bb      	str	r3, [r7, #24]
 8004d56:	61fa      	str	r2, [r7, #28]
 8004d58:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004d5c:	f7fb ff34 	bl	8000bc8 <__aeabi_uldivmod>
 8004d60:	4602      	mov	r2, r0
 8004d62:	460b      	mov	r3, r1
 8004d64:	4613      	mov	r3, r2
 8004d66:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004d68:	4b0b      	ldr	r3, [pc, #44]	; (8004d98 <HAL_RCC_GetSysClockFreq+0x200>)
 8004d6a:	685b      	ldr	r3, [r3, #4]
 8004d6c:	0c1b      	lsrs	r3, r3, #16
 8004d6e:	f003 0303 	and.w	r3, r3, #3
 8004d72:	3301      	adds	r3, #1
 8004d74:	005b      	lsls	r3, r3, #1
 8004d76:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8004d78:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004d7a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004d7c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d80:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004d82:	e002      	b.n	8004d8a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004d84:	4b05      	ldr	r3, [pc, #20]	; (8004d9c <HAL_RCC_GetSysClockFreq+0x204>)
 8004d86:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004d88:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004d8a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8004d8c:	4618      	mov	r0, r3
 8004d8e:	3750      	adds	r7, #80	; 0x50
 8004d90:	46bd      	mov	sp, r7
 8004d92:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004d96:	bf00      	nop
 8004d98:	40023800 	.word	0x40023800
 8004d9c:	00f42400 	.word	0x00f42400
 8004da0:	007a1200 	.word	0x007a1200

08004da4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004da4:	b480      	push	{r7}
 8004da6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004da8:	4b03      	ldr	r3, [pc, #12]	; (8004db8 <HAL_RCC_GetHCLKFreq+0x14>)
 8004daa:	681b      	ldr	r3, [r3, #0]
}
 8004dac:	4618      	mov	r0, r3
 8004dae:	46bd      	mov	sp, r7
 8004db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004db4:	4770      	bx	lr
 8004db6:	bf00      	nop
 8004db8:	20000004 	.word	0x20000004

08004dbc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004dbc:	b580      	push	{r7, lr}
 8004dbe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004dc0:	f7ff fff0 	bl	8004da4 <HAL_RCC_GetHCLKFreq>
 8004dc4:	4602      	mov	r2, r0
 8004dc6:	4b05      	ldr	r3, [pc, #20]	; (8004ddc <HAL_RCC_GetPCLK1Freq+0x20>)
 8004dc8:	689b      	ldr	r3, [r3, #8]
 8004dca:	0a9b      	lsrs	r3, r3, #10
 8004dcc:	f003 0307 	and.w	r3, r3, #7
 8004dd0:	4903      	ldr	r1, [pc, #12]	; (8004de0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004dd2:	5ccb      	ldrb	r3, [r1, r3]
 8004dd4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004dd8:	4618      	mov	r0, r3
 8004dda:	bd80      	pop	{r7, pc}
 8004ddc:	40023800 	.word	0x40023800
 8004de0:	08009a60 	.word	0x08009a60

08004de4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004de4:	b580      	push	{r7, lr}
 8004de6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004de8:	f7ff ffdc 	bl	8004da4 <HAL_RCC_GetHCLKFreq>
 8004dec:	4602      	mov	r2, r0
 8004dee:	4b05      	ldr	r3, [pc, #20]	; (8004e04 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004df0:	689b      	ldr	r3, [r3, #8]
 8004df2:	0b5b      	lsrs	r3, r3, #13
 8004df4:	f003 0307 	and.w	r3, r3, #7
 8004df8:	4903      	ldr	r1, [pc, #12]	; (8004e08 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004dfa:	5ccb      	ldrb	r3, [r1, r3]
 8004dfc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004e00:	4618      	mov	r0, r3
 8004e02:	bd80      	pop	{r7, pc}
 8004e04:	40023800 	.word	0x40023800
 8004e08:	08009a60 	.word	0x08009a60

08004e0c <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004e0c:	b580      	push	{r7, lr}
 8004e0e:	b086      	sub	sp, #24
 8004e10:	af00      	add	r7, sp, #0
 8004e12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004e14:	2300      	movs	r3, #0
 8004e16:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8004e18:	2300      	movs	r3, #0
 8004e1a:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	f003 0301 	and.w	r3, r3, #1
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	d105      	bne.n	8004e34 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	d035      	beq.n	8004ea0 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004e34:	4b62      	ldr	r3, [pc, #392]	; (8004fc0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8004e36:	2200      	movs	r2, #0
 8004e38:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004e3a:	f7fd fb7d 	bl	8002538 <HAL_GetTick>
 8004e3e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004e40:	e008      	b.n	8004e54 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004e42:	f7fd fb79 	bl	8002538 <HAL_GetTick>
 8004e46:	4602      	mov	r2, r0
 8004e48:	697b      	ldr	r3, [r7, #20]
 8004e4a:	1ad3      	subs	r3, r2, r3
 8004e4c:	2b02      	cmp	r3, #2
 8004e4e:	d901      	bls.n	8004e54 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004e50:	2303      	movs	r3, #3
 8004e52:	e0b0      	b.n	8004fb6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004e54:	4b5b      	ldr	r3, [pc, #364]	; (8004fc4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	d1f0      	bne.n	8004e42 <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	685b      	ldr	r3, [r3, #4]
 8004e64:	019a      	lsls	r2, r3, #6
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	689b      	ldr	r3, [r3, #8]
 8004e6a:	071b      	lsls	r3, r3, #28
 8004e6c:	4955      	ldr	r1, [pc, #340]	; (8004fc4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004e6e:	4313      	orrs	r3, r2
 8004e70:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004e74:	4b52      	ldr	r3, [pc, #328]	; (8004fc0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8004e76:	2201      	movs	r2, #1
 8004e78:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004e7a:	f7fd fb5d 	bl	8002538 <HAL_GetTick>
 8004e7e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004e80:	e008      	b.n	8004e94 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004e82:	f7fd fb59 	bl	8002538 <HAL_GetTick>
 8004e86:	4602      	mov	r2, r0
 8004e88:	697b      	ldr	r3, [r7, #20]
 8004e8a:	1ad3      	subs	r3, r2, r3
 8004e8c:	2b02      	cmp	r3, #2
 8004e8e:	d901      	bls.n	8004e94 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004e90:	2303      	movs	r3, #3
 8004e92:	e090      	b.n	8004fb6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004e94:	4b4b      	ldr	r3, [pc, #300]	; (8004fc4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	d0f0      	beq.n	8004e82 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	f003 0302 	and.w	r3, r3, #2
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	f000 8083 	beq.w	8004fb4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004eae:	2300      	movs	r3, #0
 8004eb0:	60fb      	str	r3, [r7, #12]
 8004eb2:	4b44      	ldr	r3, [pc, #272]	; (8004fc4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004eb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004eb6:	4a43      	ldr	r2, [pc, #268]	; (8004fc4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004eb8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004ebc:	6413      	str	r3, [r2, #64]	; 0x40
 8004ebe:	4b41      	ldr	r3, [pc, #260]	; (8004fc4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004ec0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ec2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004ec6:	60fb      	str	r3, [r7, #12]
 8004ec8:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8004eca:	4b3f      	ldr	r3, [pc, #252]	; (8004fc8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	4a3e      	ldr	r2, [pc, #248]	; (8004fc8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004ed0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004ed4:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004ed6:	f7fd fb2f 	bl	8002538 <HAL_GetTick>
 8004eda:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004edc:	e008      	b.n	8004ef0 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8004ede:	f7fd fb2b 	bl	8002538 <HAL_GetTick>
 8004ee2:	4602      	mov	r2, r0
 8004ee4:	697b      	ldr	r3, [r7, #20]
 8004ee6:	1ad3      	subs	r3, r2, r3
 8004ee8:	2b02      	cmp	r3, #2
 8004eea:	d901      	bls.n	8004ef0 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8004eec:	2303      	movs	r3, #3
 8004eee:	e062      	b.n	8004fb6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004ef0:	4b35      	ldr	r3, [pc, #212]	; (8004fc8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	d0f0      	beq.n	8004ede <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004efc:	4b31      	ldr	r3, [pc, #196]	; (8004fc4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004efe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f00:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004f04:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004f06:	693b      	ldr	r3, [r7, #16]
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	d02f      	beq.n	8004f6c <HAL_RCCEx_PeriphCLKConfig+0x160>
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	68db      	ldr	r3, [r3, #12]
 8004f10:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004f14:	693a      	ldr	r2, [r7, #16]
 8004f16:	429a      	cmp	r2, r3
 8004f18:	d028      	beq.n	8004f6c <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004f1a:	4b2a      	ldr	r3, [pc, #168]	; (8004fc4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004f1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f1e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004f22:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004f24:	4b29      	ldr	r3, [pc, #164]	; (8004fcc <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8004f26:	2201      	movs	r2, #1
 8004f28:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004f2a:	4b28      	ldr	r3, [pc, #160]	; (8004fcc <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8004f2c:	2200      	movs	r2, #0
 8004f2e:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8004f30:	4a24      	ldr	r2, [pc, #144]	; (8004fc4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004f32:	693b      	ldr	r3, [r7, #16]
 8004f34:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004f36:	4b23      	ldr	r3, [pc, #140]	; (8004fc4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004f38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f3a:	f003 0301 	and.w	r3, r3, #1
 8004f3e:	2b01      	cmp	r3, #1
 8004f40:	d114      	bne.n	8004f6c <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8004f42:	f7fd faf9 	bl	8002538 <HAL_GetTick>
 8004f46:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004f48:	e00a      	b.n	8004f60 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004f4a:	f7fd faf5 	bl	8002538 <HAL_GetTick>
 8004f4e:	4602      	mov	r2, r0
 8004f50:	697b      	ldr	r3, [r7, #20]
 8004f52:	1ad3      	subs	r3, r2, r3
 8004f54:	f241 3288 	movw	r2, #5000	; 0x1388
 8004f58:	4293      	cmp	r3, r2
 8004f5a:	d901      	bls.n	8004f60 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8004f5c:	2303      	movs	r3, #3
 8004f5e:	e02a      	b.n	8004fb6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004f60:	4b18      	ldr	r3, [pc, #96]	; (8004fc4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004f62:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f64:	f003 0302 	and.w	r3, r3, #2
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d0ee      	beq.n	8004f4a <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	68db      	ldr	r3, [r3, #12]
 8004f70:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004f74:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004f78:	d10d      	bne.n	8004f96 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8004f7a:	4b12      	ldr	r3, [pc, #72]	; (8004fc4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004f7c:	689b      	ldr	r3, [r3, #8]
 8004f7e:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	68db      	ldr	r3, [r3, #12]
 8004f86:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8004f8a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004f8e:	490d      	ldr	r1, [pc, #52]	; (8004fc4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004f90:	4313      	orrs	r3, r2
 8004f92:	608b      	str	r3, [r1, #8]
 8004f94:	e005      	b.n	8004fa2 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8004f96:	4b0b      	ldr	r3, [pc, #44]	; (8004fc4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004f98:	689b      	ldr	r3, [r3, #8]
 8004f9a:	4a0a      	ldr	r2, [pc, #40]	; (8004fc4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004f9c:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8004fa0:	6093      	str	r3, [r2, #8]
 8004fa2:	4b08      	ldr	r3, [pc, #32]	; (8004fc4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004fa4:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	68db      	ldr	r3, [r3, #12]
 8004faa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004fae:	4905      	ldr	r1, [pc, #20]	; (8004fc4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004fb0:	4313      	orrs	r3, r2
 8004fb2:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8004fb4:	2300      	movs	r3, #0
}
 8004fb6:	4618      	mov	r0, r3
 8004fb8:	3718      	adds	r7, #24
 8004fba:	46bd      	mov	sp, r7
 8004fbc:	bd80      	pop	{r7, pc}
 8004fbe:	bf00      	nop
 8004fc0:	42470068 	.word	0x42470068
 8004fc4:	40023800 	.word	0x40023800
 8004fc8:	40007000 	.word	0x40007000
 8004fcc:	42470e40 	.word	0x42470e40

08004fd0 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8004fd0:	b480      	push	{r7}
 8004fd2:	b087      	sub	sp, #28
 8004fd4:	af00      	add	r7, sp, #0
 8004fd6:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8004fd8:	2300      	movs	r3, #0
 8004fda:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8004fdc:	2300      	movs	r3, #0
 8004fde:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8004fe0:	2300      	movs	r3, #0
 8004fe2:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8004fe4:	2300      	movs	r3, #0
 8004fe6:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	2b01      	cmp	r3, #1
 8004fec:	d13e      	bne.n	800506c <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8004fee:	4b23      	ldr	r3, [pc, #140]	; (800507c <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004ff0:	689b      	ldr	r3, [r3, #8]
 8004ff2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004ff6:	60fb      	str	r3, [r7, #12]
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d005      	beq.n	800500a <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	2b01      	cmp	r3, #1
 8005002:	d12f      	bne.n	8005064 <HAL_RCCEx_GetPeriphCLKFreq+0x94>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8005004:	4b1e      	ldr	r3, [pc, #120]	; (8005080 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8005006:	617b      	str	r3, [r7, #20]
          break;
 8005008:	e02f      	b.n	800506a <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 800500a:	4b1c      	ldr	r3, [pc, #112]	; (800507c <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 800500c:	685b      	ldr	r3, [r3, #4]
 800500e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005012:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005016:	d108      	bne.n	800502a <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8005018:	4b18      	ldr	r3, [pc, #96]	; (800507c <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 800501a:	685b      	ldr	r3, [r3, #4]
 800501c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005020:	4a18      	ldr	r2, [pc, #96]	; (8005084 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8005022:	fbb2 f3f3 	udiv	r3, r2, r3
 8005026:	613b      	str	r3, [r7, #16]
 8005028:	e007      	b.n	800503a <HAL_RCCEx_GetPeriphCLKFreq+0x6a>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800502a:	4b14      	ldr	r3, [pc, #80]	; (800507c <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 800502c:	685b      	ldr	r3, [r3, #4]
 800502e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005032:	4a15      	ldr	r2, [pc, #84]	; (8005088 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8005034:	fbb2 f3f3 	udiv	r3, r2, r3
 8005038:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 800503a:	4b10      	ldr	r3, [pc, #64]	; (800507c <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 800503c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005040:	099b      	lsrs	r3, r3, #6
 8005042:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005046:	693b      	ldr	r3, [r7, #16]
 8005048:	fb02 f303 	mul.w	r3, r2, r3
 800504c:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 800504e:	4b0b      	ldr	r3, [pc, #44]	; (800507c <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8005050:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005054:	0f1b      	lsrs	r3, r3, #28
 8005056:	f003 0307 	and.w	r3, r3, #7
 800505a:	68ba      	ldr	r2, [r7, #8]
 800505c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005060:	617b      	str	r3, [r7, #20]
          break;
 8005062:	e002      	b.n	800506a <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8005064:	2300      	movs	r3, #0
 8005066:	617b      	str	r3, [r7, #20]
          break;
 8005068:	bf00      	nop
        }
      }
      break;
 800506a:	bf00      	nop
    }
  }
  return frequency;
 800506c:	697b      	ldr	r3, [r7, #20]
}
 800506e:	4618      	mov	r0, r3
 8005070:	371c      	adds	r7, #28
 8005072:	46bd      	mov	sp, r7
 8005074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005078:	4770      	bx	lr
 800507a:	bf00      	nop
 800507c:	40023800 	.word	0x40023800
 8005080:	00bb8000 	.word	0x00bb8000
 8005084:	007a1200 	.word	0x007a1200
 8005088:	00f42400 	.word	0x00f42400

0800508c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800508c:	b580      	push	{r7, lr}
 800508e:	b082      	sub	sp, #8
 8005090:	af00      	add	r7, sp, #0
 8005092:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	2b00      	cmp	r3, #0
 8005098:	d101      	bne.n	800509e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800509a:	2301      	movs	r3, #1
 800509c:	e03f      	b.n	800511e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80050a4:	b2db      	uxtb	r3, r3
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	d106      	bne.n	80050b8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	2200      	movs	r2, #0
 80050ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80050b2:	6878      	ldr	r0, [r7, #4]
 80050b4:	f7fd f804 	bl	80020c0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	2224      	movs	r2, #36	; 0x24
 80050bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	68da      	ldr	r2, [r3, #12]
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80050ce:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80050d0:	6878      	ldr	r0, [r7, #4]
 80050d2:	f000 fea3 	bl	8005e1c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	691a      	ldr	r2, [r3, #16]
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80050e4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	695a      	ldr	r2, [r3, #20]
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80050f4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	68da      	ldr	r2, [r3, #12]
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005104:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	2200      	movs	r2, #0
 800510a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	2220      	movs	r2, #32
 8005110:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	2220      	movs	r2, #32
 8005118:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800511c:	2300      	movs	r3, #0
}
 800511e:	4618      	mov	r0, r3
 8005120:	3708      	adds	r7, #8
 8005122:	46bd      	mov	sp, r7
 8005124:	bd80      	pop	{r7, pc}

08005126 <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8005126:	b480      	push	{r7}
 8005128:	b085      	sub	sp, #20
 800512a:	af00      	add	r7, sp, #0
 800512c:	60f8      	str	r0, [r7, #12]
 800512e:	60b9      	str	r1, [r7, #8]
 8005130:	4613      	mov	r3, r2
 8005132:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800513a:	b2db      	uxtb	r3, r3
 800513c:	2b20      	cmp	r3, #32
 800513e:	d130      	bne.n	80051a2 <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 8005140:	68bb      	ldr	r3, [r7, #8]
 8005142:	2b00      	cmp	r3, #0
 8005144:	d002      	beq.n	800514c <HAL_UART_Transmit_IT+0x26>
 8005146:	88fb      	ldrh	r3, [r7, #6]
 8005148:	2b00      	cmp	r3, #0
 800514a:	d101      	bne.n	8005150 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 800514c:	2301      	movs	r3, #1
 800514e:	e029      	b.n	80051a4 <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005156:	2b01      	cmp	r3, #1
 8005158:	d101      	bne.n	800515e <HAL_UART_Transmit_IT+0x38>
 800515a:	2302      	movs	r3, #2
 800515c:	e022      	b.n	80051a4 <HAL_UART_Transmit_IT+0x7e>
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	2201      	movs	r2, #1
 8005162:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	68ba      	ldr	r2, [r7, #8]
 800516a:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	88fa      	ldrh	r2, [r7, #6]
 8005170:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	88fa      	ldrh	r2, [r7, #6]
 8005176:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	2200      	movs	r2, #0
 800517c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	2221      	movs	r2, #33	; 0x21
 8005182:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	2200      	movs	r2, #0
 800518a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	68da      	ldr	r2, [r3, #12]
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800519c:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 800519e:	2300      	movs	r3, #0
 80051a0:	e000      	b.n	80051a4 <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 80051a2:	2302      	movs	r3, #2
  }
}
 80051a4:	4618      	mov	r0, r3
 80051a6:	3714      	adds	r7, #20
 80051a8:	46bd      	mov	sp, r7
 80051aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ae:	4770      	bx	lr

080051b0 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80051b0:	b580      	push	{r7, lr}
 80051b2:	b084      	sub	sp, #16
 80051b4:	af00      	add	r7, sp, #0
 80051b6:	60f8      	str	r0, [r7, #12]
 80051b8:	60b9      	str	r1, [r7, #8]
 80051ba:	4613      	mov	r3, r2
 80051bc:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80051c4:	b2db      	uxtb	r3, r3
 80051c6:	2b20      	cmp	r3, #32
 80051c8:	d11d      	bne.n	8005206 <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 80051ca:	68bb      	ldr	r3, [r7, #8]
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	d002      	beq.n	80051d6 <HAL_UART_Receive_DMA+0x26>
 80051d0:	88fb      	ldrh	r3, [r7, #6]
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	d101      	bne.n	80051da <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 80051d6:	2301      	movs	r3, #1
 80051d8:	e016      	b.n	8005208 <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80051e0:	2b01      	cmp	r3, #1
 80051e2:	d101      	bne.n	80051e8 <HAL_UART_Receive_DMA+0x38>
 80051e4:	2302      	movs	r3, #2
 80051e6:	e00f      	b.n	8005208 <HAL_UART_Receive_DMA+0x58>
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	2201      	movs	r2, #1
 80051ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	2200      	movs	r2, #0
 80051f4:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 80051f6:	88fb      	ldrh	r3, [r7, #6]
 80051f8:	461a      	mov	r2, r3
 80051fa:	68b9      	ldr	r1, [r7, #8]
 80051fc:	68f8      	ldr	r0, [r7, #12]
 80051fe:	f000 fbad 	bl	800595c <UART_Start_Receive_DMA>
 8005202:	4603      	mov	r3, r0
 8005204:	e000      	b.n	8005208 <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 8005206:	2302      	movs	r3, #2
  }
}
 8005208:	4618      	mov	r0, r3
 800520a:	3710      	adds	r7, #16
 800520c:	46bd      	mov	sp, r7
 800520e:	bd80      	pop	{r7, pc}

08005210 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005210:	b580      	push	{r7, lr}
 8005212:	b0ba      	sub	sp, #232	; 0xe8
 8005214:	af00      	add	r7, sp, #0
 8005216:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	68db      	ldr	r3, [r3, #12]
 8005228:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	695b      	ldr	r3, [r3, #20]
 8005232:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8005236:	2300      	movs	r3, #0
 8005238:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 800523c:	2300      	movs	r3, #0
 800523e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8005242:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005246:	f003 030f 	and.w	r3, r3, #15
 800524a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800524e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005252:	2b00      	cmp	r3, #0
 8005254:	d10f      	bne.n	8005276 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005256:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800525a:	f003 0320 	and.w	r3, r3, #32
 800525e:	2b00      	cmp	r3, #0
 8005260:	d009      	beq.n	8005276 <HAL_UART_IRQHandler+0x66>
 8005262:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005266:	f003 0320 	and.w	r3, r3, #32
 800526a:	2b00      	cmp	r3, #0
 800526c:	d003      	beq.n	8005276 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800526e:	6878      	ldr	r0, [r7, #4]
 8005270:	f000 fd19 	bl	8005ca6 <UART_Receive_IT>
      return;
 8005274:	e256      	b.n	8005724 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8005276:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800527a:	2b00      	cmp	r3, #0
 800527c:	f000 80de 	beq.w	800543c <HAL_UART_IRQHandler+0x22c>
 8005280:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005284:	f003 0301 	and.w	r3, r3, #1
 8005288:	2b00      	cmp	r3, #0
 800528a:	d106      	bne.n	800529a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800528c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005290:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8005294:	2b00      	cmp	r3, #0
 8005296:	f000 80d1 	beq.w	800543c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800529a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800529e:	f003 0301 	and.w	r3, r3, #1
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	d00b      	beq.n	80052be <HAL_UART_IRQHandler+0xae>
 80052a6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80052aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	d005      	beq.n	80052be <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052b6:	f043 0201 	orr.w	r2, r3, #1
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80052be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80052c2:	f003 0304 	and.w	r3, r3, #4
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d00b      	beq.n	80052e2 <HAL_UART_IRQHandler+0xd2>
 80052ca:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80052ce:	f003 0301 	and.w	r3, r3, #1
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	d005      	beq.n	80052e2 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052da:	f043 0202 	orr.w	r2, r3, #2
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80052e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80052e6:	f003 0302 	and.w	r3, r3, #2
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	d00b      	beq.n	8005306 <HAL_UART_IRQHandler+0xf6>
 80052ee:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80052f2:	f003 0301 	and.w	r3, r3, #1
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	d005      	beq.n	8005306 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052fe:	f043 0204 	orr.w	r2, r3, #4
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8005306:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800530a:	f003 0308 	and.w	r3, r3, #8
 800530e:	2b00      	cmp	r3, #0
 8005310:	d011      	beq.n	8005336 <HAL_UART_IRQHandler+0x126>
 8005312:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005316:	f003 0320 	and.w	r3, r3, #32
 800531a:	2b00      	cmp	r3, #0
 800531c:	d105      	bne.n	800532a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800531e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005322:	f003 0301 	and.w	r3, r3, #1
 8005326:	2b00      	cmp	r3, #0
 8005328:	d005      	beq.n	8005336 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800532e:	f043 0208 	orr.w	r2, r3, #8
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800533a:	2b00      	cmp	r3, #0
 800533c:	f000 81ed 	beq.w	800571a <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005340:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005344:	f003 0320 	and.w	r3, r3, #32
 8005348:	2b00      	cmp	r3, #0
 800534a:	d008      	beq.n	800535e <HAL_UART_IRQHandler+0x14e>
 800534c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005350:	f003 0320 	and.w	r3, r3, #32
 8005354:	2b00      	cmp	r3, #0
 8005356:	d002      	beq.n	800535e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8005358:	6878      	ldr	r0, [r7, #4]
 800535a:	f000 fca4 	bl	8005ca6 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	695b      	ldr	r3, [r3, #20]
 8005364:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005368:	2b40      	cmp	r3, #64	; 0x40
 800536a:	bf0c      	ite	eq
 800536c:	2301      	moveq	r3, #1
 800536e:	2300      	movne	r3, #0
 8005370:	b2db      	uxtb	r3, r3
 8005372:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800537a:	f003 0308 	and.w	r3, r3, #8
 800537e:	2b00      	cmp	r3, #0
 8005380:	d103      	bne.n	800538a <HAL_UART_IRQHandler+0x17a>
 8005382:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005386:	2b00      	cmp	r3, #0
 8005388:	d04f      	beq.n	800542a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800538a:	6878      	ldr	r0, [r7, #4]
 800538c:	f000 fbac 	bl	8005ae8 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	695b      	ldr	r3, [r3, #20]
 8005396:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800539a:	2b40      	cmp	r3, #64	; 0x40
 800539c:	d141      	bne.n	8005422 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	3314      	adds	r3, #20
 80053a4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053a8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80053ac:	e853 3f00 	ldrex	r3, [r3]
 80053b0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80053b4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80053b8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80053bc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	3314      	adds	r3, #20
 80053c6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80053ca:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80053ce:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053d2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80053d6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80053da:	e841 2300 	strex	r3, r2, [r1]
 80053de:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80053e2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	d1d9      	bne.n	800539e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	d013      	beq.n	800541a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053f6:	4a7d      	ldr	r2, [pc, #500]	; (80055ec <HAL_UART_IRQHandler+0x3dc>)
 80053f8:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053fe:	4618      	mov	r0, r3
 8005400:	f7fd fb52 	bl	8002aa8 <HAL_DMA_Abort_IT>
 8005404:	4603      	mov	r3, r0
 8005406:	2b00      	cmp	r3, #0
 8005408:	d016      	beq.n	8005438 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800540e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005410:	687a      	ldr	r2, [r7, #4]
 8005412:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005414:	4610      	mov	r0, r2
 8005416:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005418:	e00e      	b.n	8005438 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800541a:	6878      	ldr	r0, [r7, #4]
 800541c:	f000 f990 	bl	8005740 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005420:	e00a      	b.n	8005438 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005422:	6878      	ldr	r0, [r7, #4]
 8005424:	f000 f98c 	bl	8005740 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005428:	e006      	b.n	8005438 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800542a:	6878      	ldr	r0, [r7, #4]
 800542c:	f000 f988 	bl	8005740 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	2200      	movs	r2, #0
 8005434:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8005436:	e170      	b.n	800571a <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005438:	bf00      	nop
    return;
 800543a:	e16e      	b.n	800571a <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005440:	2b01      	cmp	r3, #1
 8005442:	f040 814a 	bne.w	80056da <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8005446:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800544a:	f003 0310 	and.w	r3, r3, #16
 800544e:	2b00      	cmp	r3, #0
 8005450:	f000 8143 	beq.w	80056da <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8005454:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005458:	f003 0310 	and.w	r3, r3, #16
 800545c:	2b00      	cmp	r3, #0
 800545e:	f000 813c 	beq.w	80056da <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005462:	2300      	movs	r3, #0
 8005464:	60bb      	str	r3, [r7, #8]
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	60bb      	str	r3, [r7, #8]
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	685b      	ldr	r3, [r3, #4]
 8005474:	60bb      	str	r3, [r7, #8]
 8005476:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	695b      	ldr	r3, [r3, #20]
 800547e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005482:	2b40      	cmp	r3, #64	; 0x40
 8005484:	f040 80b4 	bne.w	80055f0 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	685b      	ldr	r3, [r3, #4]
 8005490:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005494:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8005498:	2b00      	cmp	r3, #0
 800549a:	f000 8140 	beq.w	800571e <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80054a2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80054a6:	429a      	cmp	r2, r3
 80054a8:	f080 8139 	bcs.w	800571e <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80054b2:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054b8:	69db      	ldr	r3, [r3, #28]
 80054ba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80054be:	f000 8088 	beq.w	80055d2 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	330c      	adds	r3, #12
 80054c8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054cc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80054d0:	e853 3f00 	ldrex	r3, [r3]
 80054d4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80054d8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80054dc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80054e0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	330c      	adds	r3, #12
 80054ea:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80054ee:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80054f2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054f6:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80054fa:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80054fe:	e841 2300 	strex	r3, r2, [r1]
 8005502:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8005506:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800550a:	2b00      	cmp	r3, #0
 800550c:	d1d9      	bne.n	80054c2 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	3314      	adds	r3, #20
 8005514:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005516:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005518:	e853 3f00 	ldrex	r3, [r3]
 800551c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800551e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005520:	f023 0301 	bic.w	r3, r3, #1
 8005524:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	3314      	adds	r3, #20
 800552e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8005532:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8005536:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005538:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800553a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800553e:	e841 2300 	strex	r3, r2, [r1]
 8005542:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8005544:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005546:	2b00      	cmp	r3, #0
 8005548:	d1e1      	bne.n	800550e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	3314      	adds	r3, #20
 8005550:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005552:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005554:	e853 3f00 	ldrex	r3, [r3]
 8005558:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800555a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800555c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005560:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	3314      	adds	r3, #20
 800556a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800556e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8005570:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005572:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8005574:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8005576:	e841 2300 	strex	r3, r2, [r1]
 800557a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800557c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800557e:	2b00      	cmp	r3, #0
 8005580:	d1e3      	bne.n	800554a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	2220      	movs	r2, #32
 8005586:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	2200      	movs	r2, #0
 800558e:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	330c      	adds	r3, #12
 8005596:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005598:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800559a:	e853 3f00 	ldrex	r3, [r3]
 800559e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80055a0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80055a2:	f023 0310 	bic.w	r3, r3, #16
 80055a6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	330c      	adds	r3, #12
 80055b0:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80055b4:	65ba      	str	r2, [r7, #88]	; 0x58
 80055b6:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055b8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80055ba:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80055bc:	e841 2300 	strex	r3, r2, [r1]
 80055c0:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80055c2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80055c4:	2b00      	cmp	r3, #0
 80055c6:	d1e3      	bne.n	8005590 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055cc:	4618      	mov	r0, r3
 80055ce:	f7fd f9fb 	bl	80029c8 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80055da:	b29b      	uxth	r3, r3
 80055dc:	1ad3      	subs	r3, r2, r3
 80055de:	b29b      	uxth	r3, r3
 80055e0:	4619      	mov	r1, r3
 80055e2:	6878      	ldr	r0, [r7, #4]
 80055e4:	f000 f8b6 	bl	8005754 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80055e8:	e099      	b.n	800571e <HAL_UART_IRQHandler+0x50e>
 80055ea:	bf00      	nop
 80055ec:	08005baf 	.word	0x08005baf
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80055f8:	b29b      	uxth	r3, r3
 80055fa:	1ad3      	subs	r3, r2, r3
 80055fc:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005604:	b29b      	uxth	r3, r3
 8005606:	2b00      	cmp	r3, #0
 8005608:	f000 808b 	beq.w	8005722 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 800560c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005610:	2b00      	cmp	r3, #0
 8005612:	f000 8086 	beq.w	8005722 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	330c      	adds	r3, #12
 800561c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800561e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005620:	e853 3f00 	ldrex	r3, [r3]
 8005624:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005626:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005628:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800562c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	330c      	adds	r3, #12
 8005636:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800563a:	647a      	str	r2, [r7, #68]	; 0x44
 800563c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800563e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005640:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005642:	e841 2300 	strex	r3, r2, [r1]
 8005646:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005648:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800564a:	2b00      	cmp	r3, #0
 800564c:	d1e3      	bne.n	8005616 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	3314      	adds	r3, #20
 8005654:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005656:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005658:	e853 3f00 	ldrex	r3, [r3]
 800565c:	623b      	str	r3, [r7, #32]
   return(result);
 800565e:	6a3b      	ldr	r3, [r7, #32]
 8005660:	f023 0301 	bic.w	r3, r3, #1
 8005664:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	3314      	adds	r3, #20
 800566e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8005672:	633a      	str	r2, [r7, #48]	; 0x30
 8005674:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005676:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005678:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800567a:	e841 2300 	strex	r3, r2, [r1]
 800567e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005680:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005682:	2b00      	cmp	r3, #0
 8005684:	d1e3      	bne.n	800564e <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	2220      	movs	r2, #32
 800568a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	2200      	movs	r2, #0
 8005692:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	330c      	adds	r3, #12
 800569a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800569c:	693b      	ldr	r3, [r7, #16]
 800569e:	e853 3f00 	ldrex	r3, [r3]
 80056a2:	60fb      	str	r3, [r7, #12]
   return(result);
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	f023 0310 	bic.w	r3, r3, #16
 80056aa:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	330c      	adds	r3, #12
 80056b4:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80056b8:	61fa      	str	r2, [r7, #28]
 80056ba:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056bc:	69b9      	ldr	r1, [r7, #24]
 80056be:	69fa      	ldr	r2, [r7, #28]
 80056c0:	e841 2300 	strex	r3, r2, [r1]
 80056c4:	617b      	str	r3, [r7, #20]
   return(result);
 80056c6:	697b      	ldr	r3, [r7, #20]
 80056c8:	2b00      	cmp	r3, #0
 80056ca:	d1e3      	bne.n	8005694 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80056cc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80056d0:	4619      	mov	r1, r3
 80056d2:	6878      	ldr	r0, [r7, #4]
 80056d4:	f000 f83e 	bl	8005754 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80056d8:	e023      	b.n	8005722 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80056da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80056de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	d009      	beq.n	80056fa <HAL_UART_IRQHandler+0x4ea>
 80056e6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80056ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	d003      	beq.n	80056fa <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 80056f2:	6878      	ldr	r0, [r7, #4]
 80056f4:	f000 fa6f 	bl	8005bd6 <UART_Transmit_IT>
    return;
 80056f8:	e014      	b.n	8005724 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80056fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80056fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005702:	2b00      	cmp	r3, #0
 8005704:	d00e      	beq.n	8005724 <HAL_UART_IRQHandler+0x514>
 8005706:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800570a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800570e:	2b00      	cmp	r3, #0
 8005710:	d008      	beq.n	8005724 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8005712:	6878      	ldr	r0, [r7, #4]
 8005714:	f000 faaf 	bl	8005c76 <UART_EndTransmit_IT>
    return;
 8005718:	e004      	b.n	8005724 <HAL_UART_IRQHandler+0x514>
    return;
 800571a:	bf00      	nop
 800571c:	e002      	b.n	8005724 <HAL_UART_IRQHandler+0x514>
      return;
 800571e:	bf00      	nop
 8005720:	e000      	b.n	8005724 <HAL_UART_IRQHandler+0x514>
      return;
 8005722:	bf00      	nop
  }
}
 8005724:	37e8      	adds	r7, #232	; 0xe8
 8005726:	46bd      	mov	sp, r7
 8005728:	bd80      	pop	{r7, pc}
 800572a:	bf00      	nop

0800572c <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800572c:	b480      	push	{r7}
 800572e:	b083      	sub	sp, #12
 8005730:	af00      	add	r7, sp, #0
 8005732:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8005734:	bf00      	nop
 8005736:	370c      	adds	r7, #12
 8005738:	46bd      	mov	sp, r7
 800573a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800573e:	4770      	bx	lr

08005740 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005740:	b480      	push	{r7}
 8005742:	b083      	sub	sp, #12
 8005744:	af00      	add	r7, sp, #0
 8005746:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005748:	bf00      	nop
 800574a:	370c      	adds	r7, #12
 800574c:	46bd      	mov	sp, r7
 800574e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005752:	4770      	bx	lr

08005754 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005754:	b480      	push	{r7}
 8005756:	b083      	sub	sp, #12
 8005758:	af00      	add	r7, sp, #0
 800575a:	6078      	str	r0, [r7, #4]
 800575c:	460b      	mov	r3, r1
 800575e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005760:	bf00      	nop
 8005762:	370c      	adds	r7, #12
 8005764:	46bd      	mov	sp, r7
 8005766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800576a:	4770      	bx	lr

0800576c <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800576c:	b580      	push	{r7, lr}
 800576e:	b09c      	sub	sp, #112	; 0x70
 8005770:	af00      	add	r7, sp, #0
 8005772:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005778:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005784:	2b00      	cmp	r3, #0
 8005786:	d172      	bne.n	800586e <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8005788:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800578a:	2200      	movs	r2, #0
 800578c:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800578e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	330c      	adds	r3, #12
 8005794:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005796:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005798:	e853 3f00 	ldrex	r3, [r3]
 800579c:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800579e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80057a0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80057a4:	66bb      	str	r3, [r7, #104]	; 0x68
 80057a6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	330c      	adds	r3, #12
 80057ac:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80057ae:	65ba      	str	r2, [r7, #88]	; 0x58
 80057b0:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057b2:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80057b4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80057b6:	e841 2300 	strex	r3, r2, [r1]
 80057ba:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80057bc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80057be:	2b00      	cmp	r3, #0
 80057c0:	d1e5      	bne.n	800578e <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80057c2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	3314      	adds	r3, #20
 80057c8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80057cc:	e853 3f00 	ldrex	r3, [r3]
 80057d0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80057d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80057d4:	f023 0301 	bic.w	r3, r3, #1
 80057d8:	667b      	str	r3, [r7, #100]	; 0x64
 80057da:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	3314      	adds	r3, #20
 80057e0:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80057e2:	647a      	str	r2, [r7, #68]	; 0x44
 80057e4:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057e6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80057e8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80057ea:	e841 2300 	strex	r3, r2, [r1]
 80057ee:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80057f0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	d1e5      	bne.n	80057c2 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80057f6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	3314      	adds	r3, #20
 80057fc:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005800:	e853 3f00 	ldrex	r3, [r3]
 8005804:	623b      	str	r3, [r7, #32]
   return(result);
 8005806:	6a3b      	ldr	r3, [r7, #32]
 8005808:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800580c:	663b      	str	r3, [r7, #96]	; 0x60
 800580e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	3314      	adds	r3, #20
 8005814:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8005816:	633a      	str	r2, [r7, #48]	; 0x30
 8005818:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800581a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800581c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800581e:	e841 2300 	strex	r3, r2, [r1]
 8005822:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005824:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005826:	2b00      	cmp	r3, #0
 8005828:	d1e5      	bne.n	80057f6 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800582a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800582c:	2220      	movs	r2, #32
 800582e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005832:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005834:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005836:	2b01      	cmp	r3, #1
 8005838:	d119      	bne.n	800586e <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800583a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	330c      	adds	r3, #12
 8005840:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005842:	693b      	ldr	r3, [r7, #16]
 8005844:	e853 3f00 	ldrex	r3, [r3]
 8005848:	60fb      	str	r3, [r7, #12]
   return(result);
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	f023 0310 	bic.w	r3, r3, #16
 8005850:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005852:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	330c      	adds	r3, #12
 8005858:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800585a:	61fa      	str	r2, [r7, #28]
 800585c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800585e:	69b9      	ldr	r1, [r7, #24]
 8005860:	69fa      	ldr	r2, [r7, #28]
 8005862:	e841 2300 	strex	r3, r2, [r1]
 8005866:	617b      	str	r3, [r7, #20]
   return(result);
 8005868:	697b      	ldr	r3, [r7, #20]
 800586a:	2b00      	cmp	r3, #0
 800586c:	d1e5      	bne.n	800583a <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800586e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005870:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005872:	2b01      	cmp	r3, #1
 8005874:	d106      	bne.n	8005884 <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005876:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005878:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800587a:	4619      	mov	r1, r3
 800587c:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800587e:	f7ff ff69 	bl	8005754 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8005882:	e002      	b.n	800588a <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 8005884:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8005886:	f7fb fe19 	bl	80014bc <HAL_UART_RxCpltCallback>
}
 800588a:	bf00      	nop
 800588c:	3770      	adds	r7, #112	; 0x70
 800588e:	46bd      	mov	sp, r7
 8005890:	bd80      	pop	{r7, pc}

08005892 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8005892:	b580      	push	{r7, lr}
 8005894:	b084      	sub	sp, #16
 8005896:	af00      	add	r7, sp, #0
 8005898:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800589e:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058a4:	2b01      	cmp	r3, #1
 80058a6:	d108      	bne.n	80058ba <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80058ac:	085b      	lsrs	r3, r3, #1
 80058ae:	b29b      	uxth	r3, r3
 80058b0:	4619      	mov	r1, r3
 80058b2:	68f8      	ldr	r0, [r7, #12]
 80058b4:	f7ff ff4e 	bl	8005754 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80058b8:	e002      	b.n	80058c0 <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 80058ba:	68f8      	ldr	r0, [r7, #12]
 80058bc:	f7ff ff36 	bl	800572c <HAL_UART_RxHalfCpltCallback>
}
 80058c0:	bf00      	nop
 80058c2:	3710      	adds	r7, #16
 80058c4:	46bd      	mov	sp, r7
 80058c6:	bd80      	pop	{r7, pc}

080058c8 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80058c8:	b580      	push	{r7, lr}
 80058ca:	b084      	sub	sp, #16
 80058cc:	af00      	add	r7, sp, #0
 80058ce:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 80058d0:	2300      	movs	r3, #0
 80058d2:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058d8:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 80058da:	68bb      	ldr	r3, [r7, #8]
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	695b      	ldr	r3, [r3, #20]
 80058e0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80058e4:	2b80      	cmp	r3, #128	; 0x80
 80058e6:	bf0c      	ite	eq
 80058e8:	2301      	moveq	r3, #1
 80058ea:	2300      	movne	r3, #0
 80058ec:	b2db      	uxtb	r3, r3
 80058ee:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 80058f0:	68bb      	ldr	r3, [r7, #8]
 80058f2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80058f6:	b2db      	uxtb	r3, r3
 80058f8:	2b21      	cmp	r3, #33	; 0x21
 80058fa:	d108      	bne.n	800590e <UART_DMAError+0x46>
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	2b00      	cmp	r3, #0
 8005900:	d005      	beq.n	800590e <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8005902:	68bb      	ldr	r3, [r7, #8]
 8005904:	2200      	movs	r2, #0
 8005906:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8005908:	68b8      	ldr	r0, [r7, #8]
 800590a:	f000 f8c5 	bl	8005a98 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800590e:	68bb      	ldr	r3, [r7, #8]
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	695b      	ldr	r3, [r3, #20]
 8005914:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005918:	2b40      	cmp	r3, #64	; 0x40
 800591a:	bf0c      	ite	eq
 800591c:	2301      	moveq	r3, #1
 800591e:	2300      	movne	r3, #0
 8005920:	b2db      	uxtb	r3, r3
 8005922:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8005924:	68bb      	ldr	r3, [r7, #8]
 8005926:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800592a:	b2db      	uxtb	r3, r3
 800592c:	2b22      	cmp	r3, #34	; 0x22
 800592e:	d108      	bne.n	8005942 <UART_DMAError+0x7a>
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	2b00      	cmp	r3, #0
 8005934:	d005      	beq.n	8005942 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8005936:	68bb      	ldr	r3, [r7, #8]
 8005938:	2200      	movs	r2, #0
 800593a:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 800593c:	68b8      	ldr	r0, [r7, #8]
 800593e:	f000 f8d3 	bl	8005ae8 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8005942:	68bb      	ldr	r3, [r7, #8]
 8005944:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005946:	f043 0210 	orr.w	r2, r3, #16
 800594a:	68bb      	ldr	r3, [r7, #8]
 800594c:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800594e:	68b8      	ldr	r0, [r7, #8]
 8005950:	f7ff fef6 	bl	8005740 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005954:	bf00      	nop
 8005956:	3710      	adds	r7, #16
 8005958:	46bd      	mov	sp, r7
 800595a:	bd80      	pop	{r7, pc}

0800595c <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800595c:	b580      	push	{r7, lr}
 800595e:	b098      	sub	sp, #96	; 0x60
 8005960:	af00      	add	r7, sp, #0
 8005962:	60f8      	str	r0, [r7, #12]
 8005964:	60b9      	str	r1, [r7, #8]
 8005966:	4613      	mov	r3, r2
 8005968:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 800596a:	68ba      	ldr	r2, [r7, #8]
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	88fa      	ldrh	r2, [r7, #6]
 8005974:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005976:	68fb      	ldr	r3, [r7, #12]
 8005978:	2200      	movs	r2, #0
 800597a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	2222      	movs	r2, #34	; 0x22
 8005980:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005988:	4a40      	ldr	r2, [pc, #256]	; (8005a8c <UART_Start_Receive_DMA+0x130>)
 800598a:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005990:	4a3f      	ldr	r2, [pc, #252]	; (8005a90 <UART_Start_Receive_DMA+0x134>)
 8005992:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005998:	4a3e      	ldr	r2, [pc, #248]	; (8005a94 <UART_Start_Receive_DMA+0x138>)
 800599a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059a0:	2200      	movs	r2, #0
 80059a2:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 80059a4:	f107 0308 	add.w	r3, r7, #8
 80059a8:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	3304      	adds	r3, #4
 80059b4:	4619      	mov	r1, r3
 80059b6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80059b8:	681a      	ldr	r2, [r3, #0]
 80059ba:	88fb      	ldrh	r3, [r7, #6]
 80059bc:	f7fc ffac 	bl	8002918 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 80059c0:	2300      	movs	r3, #0
 80059c2:	613b      	str	r3, [r7, #16]
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	613b      	str	r3, [r7, #16]
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	685b      	ldr	r3, [r3, #4]
 80059d2:	613b      	str	r3, [r7, #16]
 80059d4:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80059d6:	68fb      	ldr	r3, [r7, #12]
 80059d8:	2200      	movs	r2, #0
 80059da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 80059de:	68fb      	ldr	r3, [r7, #12]
 80059e0:	691b      	ldr	r3, [r3, #16]
 80059e2:	2b00      	cmp	r3, #0
 80059e4:	d019      	beq.n	8005a1a <UART_Start_Receive_DMA+0xbe>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	330c      	adds	r3, #12
 80059ec:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059ee:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80059f0:	e853 3f00 	ldrex	r3, [r3]
 80059f4:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80059f6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80059f8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80059fc:	65bb      	str	r3, [r7, #88]	; 0x58
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	330c      	adds	r3, #12
 8005a04:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005a06:	64fa      	str	r2, [r7, #76]	; 0x4c
 8005a08:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a0a:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8005a0c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005a0e:	e841 2300 	strex	r3, r2, [r1]
 8005a12:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8005a14:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005a16:	2b00      	cmp	r3, #0
 8005a18:	d1e5      	bne.n	80059e6 <UART_Start_Receive_DMA+0x8a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	3314      	adds	r3, #20
 8005a20:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a24:	e853 3f00 	ldrex	r3, [r3]
 8005a28:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005a2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a2c:	f043 0301 	orr.w	r3, r3, #1
 8005a30:	657b      	str	r3, [r7, #84]	; 0x54
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	3314      	adds	r3, #20
 8005a38:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8005a3a:	63ba      	str	r2, [r7, #56]	; 0x38
 8005a3c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a3e:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8005a40:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005a42:	e841 2300 	strex	r3, r2, [r1]
 8005a46:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005a48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	d1e5      	bne.n	8005a1a <UART_Start_Receive_DMA+0xbe>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	3314      	adds	r3, #20
 8005a54:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a56:	69bb      	ldr	r3, [r7, #24]
 8005a58:	e853 3f00 	ldrex	r3, [r3]
 8005a5c:	617b      	str	r3, [r7, #20]
   return(result);
 8005a5e:	697b      	ldr	r3, [r7, #20]
 8005a60:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005a64:	653b      	str	r3, [r7, #80]	; 0x50
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	3314      	adds	r3, #20
 8005a6c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8005a6e:	627a      	str	r2, [r7, #36]	; 0x24
 8005a70:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a72:	6a39      	ldr	r1, [r7, #32]
 8005a74:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005a76:	e841 2300 	strex	r3, r2, [r1]
 8005a7a:	61fb      	str	r3, [r7, #28]
   return(result);
 8005a7c:	69fb      	ldr	r3, [r7, #28]
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	d1e5      	bne.n	8005a4e <UART_Start_Receive_DMA+0xf2>

  return HAL_OK;
 8005a82:	2300      	movs	r3, #0
}
 8005a84:	4618      	mov	r0, r3
 8005a86:	3760      	adds	r7, #96	; 0x60
 8005a88:	46bd      	mov	sp, r7
 8005a8a:	bd80      	pop	{r7, pc}
 8005a8c:	0800576d 	.word	0x0800576d
 8005a90:	08005893 	.word	0x08005893
 8005a94:	080058c9 	.word	0x080058c9

08005a98 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8005a98:	b480      	push	{r7}
 8005a9a:	b089      	sub	sp, #36	; 0x24
 8005a9c:	af00      	add	r7, sp, #0
 8005a9e:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	330c      	adds	r3, #12
 8005aa6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005aa8:	68fb      	ldr	r3, [r7, #12]
 8005aaa:	e853 3f00 	ldrex	r3, [r3]
 8005aae:	60bb      	str	r3, [r7, #8]
   return(result);
 8005ab0:	68bb      	ldr	r3, [r7, #8]
 8005ab2:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8005ab6:	61fb      	str	r3, [r7, #28]
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	330c      	adds	r3, #12
 8005abe:	69fa      	ldr	r2, [r7, #28]
 8005ac0:	61ba      	str	r2, [r7, #24]
 8005ac2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ac4:	6979      	ldr	r1, [r7, #20]
 8005ac6:	69ba      	ldr	r2, [r7, #24]
 8005ac8:	e841 2300 	strex	r3, r2, [r1]
 8005acc:	613b      	str	r3, [r7, #16]
   return(result);
 8005ace:	693b      	ldr	r3, [r7, #16]
 8005ad0:	2b00      	cmp	r3, #0
 8005ad2:	d1e5      	bne.n	8005aa0 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	2220      	movs	r2, #32
 8005ad8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 8005adc:	bf00      	nop
 8005ade:	3724      	adds	r7, #36	; 0x24
 8005ae0:	46bd      	mov	sp, r7
 8005ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ae6:	4770      	bx	lr

08005ae8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005ae8:	b480      	push	{r7}
 8005aea:	b095      	sub	sp, #84	; 0x54
 8005aec:	af00      	add	r7, sp, #0
 8005aee:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	330c      	adds	r3, #12
 8005af6:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005af8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005afa:	e853 3f00 	ldrex	r3, [r3]
 8005afe:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005b00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b02:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005b06:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	330c      	adds	r3, #12
 8005b0e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005b10:	643a      	str	r2, [r7, #64]	; 0x40
 8005b12:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b14:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005b16:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005b18:	e841 2300 	strex	r3, r2, [r1]
 8005b1c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005b1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b20:	2b00      	cmp	r3, #0
 8005b22:	d1e5      	bne.n	8005af0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	3314      	adds	r3, #20
 8005b2a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b2c:	6a3b      	ldr	r3, [r7, #32]
 8005b2e:	e853 3f00 	ldrex	r3, [r3]
 8005b32:	61fb      	str	r3, [r7, #28]
   return(result);
 8005b34:	69fb      	ldr	r3, [r7, #28]
 8005b36:	f023 0301 	bic.w	r3, r3, #1
 8005b3a:	64bb      	str	r3, [r7, #72]	; 0x48
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	3314      	adds	r3, #20
 8005b42:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005b44:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005b46:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b48:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005b4a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005b4c:	e841 2300 	strex	r3, r2, [r1]
 8005b50:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005b52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b54:	2b00      	cmp	r3, #0
 8005b56:	d1e5      	bne.n	8005b24 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b5c:	2b01      	cmp	r3, #1
 8005b5e:	d119      	bne.n	8005b94 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	330c      	adds	r3, #12
 8005b66:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	e853 3f00 	ldrex	r3, [r3]
 8005b6e:	60bb      	str	r3, [r7, #8]
   return(result);
 8005b70:	68bb      	ldr	r3, [r7, #8]
 8005b72:	f023 0310 	bic.w	r3, r3, #16
 8005b76:	647b      	str	r3, [r7, #68]	; 0x44
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	330c      	adds	r3, #12
 8005b7e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005b80:	61ba      	str	r2, [r7, #24]
 8005b82:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b84:	6979      	ldr	r1, [r7, #20]
 8005b86:	69ba      	ldr	r2, [r7, #24]
 8005b88:	e841 2300 	strex	r3, r2, [r1]
 8005b8c:	613b      	str	r3, [r7, #16]
   return(result);
 8005b8e:	693b      	ldr	r3, [r7, #16]
 8005b90:	2b00      	cmp	r3, #0
 8005b92:	d1e5      	bne.n	8005b60 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	2220      	movs	r2, #32
 8005b98:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	2200      	movs	r2, #0
 8005ba0:	631a      	str	r2, [r3, #48]	; 0x30
}
 8005ba2:	bf00      	nop
 8005ba4:	3754      	adds	r7, #84	; 0x54
 8005ba6:	46bd      	mov	sp, r7
 8005ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bac:	4770      	bx	lr

08005bae <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005bae:	b580      	push	{r7, lr}
 8005bb0:	b084      	sub	sp, #16
 8005bb2:	af00      	add	r7, sp, #0
 8005bb4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005bba:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	2200      	movs	r2, #0
 8005bc0:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	2200      	movs	r2, #0
 8005bc6:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005bc8:	68f8      	ldr	r0, [r7, #12]
 8005bca:	f7ff fdb9 	bl	8005740 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005bce:	bf00      	nop
 8005bd0:	3710      	adds	r7, #16
 8005bd2:	46bd      	mov	sp, r7
 8005bd4:	bd80      	pop	{r7, pc}

08005bd6 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005bd6:	b480      	push	{r7}
 8005bd8:	b085      	sub	sp, #20
 8005bda:	af00      	add	r7, sp, #0
 8005bdc:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005be4:	b2db      	uxtb	r3, r3
 8005be6:	2b21      	cmp	r3, #33	; 0x21
 8005be8:	d13e      	bne.n	8005c68 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	689b      	ldr	r3, [r3, #8]
 8005bee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005bf2:	d114      	bne.n	8005c1e <UART_Transmit_IT+0x48>
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	691b      	ldr	r3, [r3, #16]
 8005bf8:	2b00      	cmp	r3, #0
 8005bfa:	d110      	bne.n	8005c1e <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	6a1b      	ldr	r3, [r3, #32]
 8005c00:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005c02:	68fb      	ldr	r3, [r7, #12]
 8005c04:	881b      	ldrh	r3, [r3, #0]
 8005c06:	461a      	mov	r2, r3
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005c10:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	6a1b      	ldr	r3, [r3, #32]
 8005c16:	1c9a      	adds	r2, r3, #2
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	621a      	str	r2, [r3, #32]
 8005c1c:	e008      	b.n	8005c30 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	6a1b      	ldr	r3, [r3, #32]
 8005c22:	1c59      	adds	r1, r3, #1
 8005c24:	687a      	ldr	r2, [r7, #4]
 8005c26:	6211      	str	r1, [r2, #32]
 8005c28:	781a      	ldrb	r2, [r3, #0]
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005c34:	b29b      	uxth	r3, r3
 8005c36:	3b01      	subs	r3, #1
 8005c38:	b29b      	uxth	r3, r3
 8005c3a:	687a      	ldr	r2, [r7, #4]
 8005c3c:	4619      	mov	r1, r3
 8005c3e:	84d1      	strh	r1, [r2, #38]	; 0x26
 8005c40:	2b00      	cmp	r3, #0
 8005c42:	d10f      	bne.n	8005c64 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	68da      	ldr	r2, [r3, #12]
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005c52:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	68da      	ldr	r2, [r3, #12]
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005c62:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005c64:	2300      	movs	r3, #0
 8005c66:	e000      	b.n	8005c6a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8005c68:	2302      	movs	r3, #2
  }
}
 8005c6a:	4618      	mov	r0, r3
 8005c6c:	3714      	adds	r7, #20
 8005c6e:	46bd      	mov	sp, r7
 8005c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c74:	4770      	bx	lr

08005c76 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005c76:	b580      	push	{r7, lr}
 8005c78:	b082      	sub	sp, #8
 8005c7a:	af00      	add	r7, sp, #0
 8005c7c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	68da      	ldr	r2, [r3, #12]
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005c8c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	2220      	movs	r2, #32
 8005c92:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005c96:	6878      	ldr	r0, [r7, #4]
 8005c98:	f7fb fbe4 	bl	8001464 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005c9c:	2300      	movs	r3, #0
}
 8005c9e:	4618      	mov	r0, r3
 8005ca0:	3708      	adds	r7, #8
 8005ca2:	46bd      	mov	sp, r7
 8005ca4:	bd80      	pop	{r7, pc}

08005ca6 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005ca6:	b580      	push	{r7, lr}
 8005ca8:	b08c      	sub	sp, #48	; 0x30
 8005caa:	af00      	add	r7, sp, #0
 8005cac:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005cb4:	b2db      	uxtb	r3, r3
 8005cb6:	2b22      	cmp	r3, #34	; 0x22
 8005cb8:	f040 80ab 	bne.w	8005e12 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	689b      	ldr	r3, [r3, #8]
 8005cc0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005cc4:	d117      	bne.n	8005cf6 <UART_Receive_IT+0x50>
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	691b      	ldr	r3, [r3, #16]
 8005cca:	2b00      	cmp	r3, #0
 8005ccc:	d113      	bne.n	8005cf6 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8005cce:	2300      	movs	r3, #0
 8005cd0:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005cd6:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	685b      	ldr	r3, [r3, #4]
 8005cde:	b29b      	uxth	r3, r3
 8005ce0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005ce4:	b29a      	uxth	r2, r3
 8005ce6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ce8:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005cee:	1c9a      	adds	r2, r3, #2
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	629a      	str	r2, [r3, #40]	; 0x28
 8005cf4:	e026      	b.n	8005d44 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005cfa:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8005cfc:	2300      	movs	r3, #0
 8005cfe:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	689b      	ldr	r3, [r3, #8]
 8005d04:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005d08:	d007      	beq.n	8005d1a <UART_Receive_IT+0x74>
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	689b      	ldr	r3, [r3, #8]
 8005d0e:	2b00      	cmp	r3, #0
 8005d10:	d10a      	bne.n	8005d28 <UART_Receive_IT+0x82>
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	691b      	ldr	r3, [r3, #16]
 8005d16:	2b00      	cmp	r3, #0
 8005d18:	d106      	bne.n	8005d28 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	685b      	ldr	r3, [r3, #4]
 8005d20:	b2da      	uxtb	r2, r3
 8005d22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d24:	701a      	strb	r2, [r3, #0]
 8005d26:	e008      	b.n	8005d3a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	685b      	ldr	r3, [r3, #4]
 8005d2e:	b2db      	uxtb	r3, r3
 8005d30:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005d34:	b2da      	uxtb	r2, r3
 8005d36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d38:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d3e:	1c5a      	adds	r2, r3, #1
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005d48:	b29b      	uxth	r3, r3
 8005d4a:	3b01      	subs	r3, #1
 8005d4c:	b29b      	uxth	r3, r3
 8005d4e:	687a      	ldr	r2, [r7, #4]
 8005d50:	4619      	mov	r1, r3
 8005d52:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8005d54:	2b00      	cmp	r3, #0
 8005d56:	d15a      	bne.n	8005e0e <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	68da      	ldr	r2, [r3, #12]
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	f022 0220 	bic.w	r2, r2, #32
 8005d66:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	68da      	ldr	r2, [r3, #12]
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005d76:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	695a      	ldr	r2, [r3, #20]
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	f022 0201 	bic.w	r2, r2, #1
 8005d86:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	2220      	movs	r2, #32
 8005d8c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d94:	2b01      	cmp	r3, #1
 8005d96:	d135      	bne.n	8005e04 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	2200      	movs	r2, #0
 8005d9c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	330c      	adds	r3, #12
 8005da4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005da6:	697b      	ldr	r3, [r7, #20]
 8005da8:	e853 3f00 	ldrex	r3, [r3]
 8005dac:	613b      	str	r3, [r7, #16]
   return(result);
 8005dae:	693b      	ldr	r3, [r7, #16]
 8005db0:	f023 0310 	bic.w	r3, r3, #16
 8005db4:	627b      	str	r3, [r7, #36]	; 0x24
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	330c      	adds	r3, #12
 8005dbc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005dbe:	623a      	str	r2, [r7, #32]
 8005dc0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005dc2:	69f9      	ldr	r1, [r7, #28]
 8005dc4:	6a3a      	ldr	r2, [r7, #32]
 8005dc6:	e841 2300 	strex	r3, r2, [r1]
 8005dca:	61bb      	str	r3, [r7, #24]
   return(result);
 8005dcc:	69bb      	ldr	r3, [r7, #24]
 8005dce:	2b00      	cmp	r3, #0
 8005dd0:	d1e5      	bne.n	8005d9e <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	f003 0310 	and.w	r3, r3, #16
 8005ddc:	2b10      	cmp	r3, #16
 8005dde:	d10a      	bne.n	8005df6 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005de0:	2300      	movs	r3, #0
 8005de2:	60fb      	str	r3, [r7, #12]
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	60fb      	str	r3, [r7, #12]
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	685b      	ldr	r3, [r3, #4]
 8005df2:	60fb      	str	r3, [r7, #12]
 8005df4:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005dfa:	4619      	mov	r1, r3
 8005dfc:	6878      	ldr	r0, [r7, #4]
 8005dfe:	f7ff fca9 	bl	8005754 <HAL_UARTEx_RxEventCallback>
 8005e02:	e002      	b.n	8005e0a <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8005e04:	6878      	ldr	r0, [r7, #4]
 8005e06:	f7fb fb59 	bl	80014bc <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8005e0a:	2300      	movs	r3, #0
 8005e0c:	e002      	b.n	8005e14 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8005e0e:	2300      	movs	r3, #0
 8005e10:	e000      	b.n	8005e14 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8005e12:	2302      	movs	r3, #2
  }
}
 8005e14:	4618      	mov	r0, r3
 8005e16:	3730      	adds	r7, #48	; 0x30
 8005e18:	46bd      	mov	sp, r7
 8005e1a:	bd80      	pop	{r7, pc}

08005e1c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005e1c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005e20:	b0c0      	sub	sp, #256	; 0x100
 8005e22:	af00      	add	r7, sp, #0
 8005e24:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005e28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	691b      	ldr	r3, [r3, #16]
 8005e30:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8005e34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005e38:	68d9      	ldr	r1, [r3, #12]
 8005e3a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005e3e:	681a      	ldr	r2, [r3, #0]
 8005e40:	ea40 0301 	orr.w	r3, r0, r1
 8005e44:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005e46:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005e4a:	689a      	ldr	r2, [r3, #8]
 8005e4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005e50:	691b      	ldr	r3, [r3, #16]
 8005e52:	431a      	orrs	r2, r3
 8005e54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005e58:	695b      	ldr	r3, [r3, #20]
 8005e5a:	431a      	orrs	r2, r3
 8005e5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005e60:	69db      	ldr	r3, [r3, #28]
 8005e62:	4313      	orrs	r3, r2
 8005e64:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005e68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	68db      	ldr	r3, [r3, #12]
 8005e70:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8005e74:	f021 010c 	bic.w	r1, r1, #12
 8005e78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005e7c:	681a      	ldr	r2, [r3, #0]
 8005e7e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005e82:	430b      	orrs	r3, r1
 8005e84:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005e86:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	695b      	ldr	r3, [r3, #20]
 8005e8e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8005e92:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005e96:	6999      	ldr	r1, [r3, #24]
 8005e98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005e9c:	681a      	ldr	r2, [r3, #0]
 8005e9e:	ea40 0301 	orr.w	r3, r0, r1
 8005ea2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005ea4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005ea8:	681a      	ldr	r2, [r3, #0]
 8005eaa:	4b8f      	ldr	r3, [pc, #572]	; (80060e8 <UART_SetConfig+0x2cc>)
 8005eac:	429a      	cmp	r2, r3
 8005eae:	d005      	beq.n	8005ebc <UART_SetConfig+0xa0>
 8005eb0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005eb4:	681a      	ldr	r2, [r3, #0]
 8005eb6:	4b8d      	ldr	r3, [pc, #564]	; (80060ec <UART_SetConfig+0x2d0>)
 8005eb8:	429a      	cmp	r2, r3
 8005eba:	d104      	bne.n	8005ec6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005ebc:	f7fe ff92 	bl	8004de4 <HAL_RCC_GetPCLK2Freq>
 8005ec0:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8005ec4:	e003      	b.n	8005ece <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005ec6:	f7fe ff79 	bl	8004dbc <HAL_RCC_GetPCLK1Freq>
 8005eca:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005ece:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005ed2:	69db      	ldr	r3, [r3, #28]
 8005ed4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005ed8:	f040 810c 	bne.w	80060f4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005edc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005ee0:	2200      	movs	r2, #0
 8005ee2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005ee6:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8005eea:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8005eee:	4622      	mov	r2, r4
 8005ef0:	462b      	mov	r3, r5
 8005ef2:	1891      	adds	r1, r2, r2
 8005ef4:	65b9      	str	r1, [r7, #88]	; 0x58
 8005ef6:	415b      	adcs	r3, r3
 8005ef8:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005efa:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8005efe:	4621      	mov	r1, r4
 8005f00:	eb12 0801 	adds.w	r8, r2, r1
 8005f04:	4629      	mov	r1, r5
 8005f06:	eb43 0901 	adc.w	r9, r3, r1
 8005f0a:	f04f 0200 	mov.w	r2, #0
 8005f0e:	f04f 0300 	mov.w	r3, #0
 8005f12:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005f16:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005f1a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005f1e:	4690      	mov	r8, r2
 8005f20:	4699      	mov	r9, r3
 8005f22:	4623      	mov	r3, r4
 8005f24:	eb18 0303 	adds.w	r3, r8, r3
 8005f28:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005f2c:	462b      	mov	r3, r5
 8005f2e:	eb49 0303 	adc.w	r3, r9, r3
 8005f32:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005f36:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005f3a:	685b      	ldr	r3, [r3, #4]
 8005f3c:	2200      	movs	r2, #0
 8005f3e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8005f42:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8005f46:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8005f4a:	460b      	mov	r3, r1
 8005f4c:	18db      	adds	r3, r3, r3
 8005f4e:	653b      	str	r3, [r7, #80]	; 0x50
 8005f50:	4613      	mov	r3, r2
 8005f52:	eb42 0303 	adc.w	r3, r2, r3
 8005f56:	657b      	str	r3, [r7, #84]	; 0x54
 8005f58:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8005f5c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8005f60:	f7fa fe32 	bl	8000bc8 <__aeabi_uldivmod>
 8005f64:	4602      	mov	r2, r0
 8005f66:	460b      	mov	r3, r1
 8005f68:	4b61      	ldr	r3, [pc, #388]	; (80060f0 <UART_SetConfig+0x2d4>)
 8005f6a:	fba3 2302 	umull	r2, r3, r3, r2
 8005f6e:	095b      	lsrs	r3, r3, #5
 8005f70:	011c      	lsls	r4, r3, #4
 8005f72:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005f76:	2200      	movs	r2, #0
 8005f78:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005f7c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8005f80:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8005f84:	4642      	mov	r2, r8
 8005f86:	464b      	mov	r3, r9
 8005f88:	1891      	adds	r1, r2, r2
 8005f8a:	64b9      	str	r1, [r7, #72]	; 0x48
 8005f8c:	415b      	adcs	r3, r3
 8005f8e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005f90:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8005f94:	4641      	mov	r1, r8
 8005f96:	eb12 0a01 	adds.w	sl, r2, r1
 8005f9a:	4649      	mov	r1, r9
 8005f9c:	eb43 0b01 	adc.w	fp, r3, r1
 8005fa0:	f04f 0200 	mov.w	r2, #0
 8005fa4:	f04f 0300 	mov.w	r3, #0
 8005fa8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005fac:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005fb0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005fb4:	4692      	mov	sl, r2
 8005fb6:	469b      	mov	fp, r3
 8005fb8:	4643      	mov	r3, r8
 8005fba:	eb1a 0303 	adds.w	r3, sl, r3
 8005fbe:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005fc2:	464b      	mov	r3, r9
 8005fc4:	eb4b 0303 	adc.w	r3, fp, r3
 8005fc8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8005fcc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005fd0:	685b      	ldr	r3, [r3, #4]
 8005fd2:	2200      	movs	r2, #0
 8005fd4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005fd8:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8005fdc:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8005fe0:	460b      	mov	r3, r1
 8005fe2:	18db      	adds	r3, r3, r3
 8005fe4:	643b      	str	r3, [r7, #64]	; 0x40
 8005fe6:	4613      	mov	r3, r2
 8005fe8:	eb42 0303 	adc.w	r3, r2, r3
 8005fec:	647b      	str	r3, [r7, #68]	; 0x44
 8005fee:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8005ff2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8005ff6:	f7fa fde7 	bl	8000bc8 <__aeabi_uldivmod>
 8005ffa:	4602      	mov	r2, r0
 8005ffc:	460b      	mov	r3, r1
 8005ffe:	4611      	mov	r1, r2
 8006000:	4b3b      	ldr	r3, [pc, #236]	; (80060f0 <UART_SetConfig+0x2d4>)
 8006002:	fba3 2301 	umull	r2, r3, r3, r1
 8006006:	095b      	lsrs	r3, r3, #5
 8006008:	2264      	movs	r2, #100	; 0x64
 800600a:	fb02 f303 	mul.w	r3, r2, r3
 800600e:	1acb      	subs	r3, r1, r3
 8006010:	00db      	lsls	r3, r3, #3
 8006012:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8006016:	4b36      	ldr	r3, [pc, #216]	; (80060f0 <UART_SetConfig+0x2d4>)
 8006018:	fba3 2302 	umull	r2, r3, r3, r2
 800601c:	095b      	lsrs	r3, r3, #5
 800601e:	005b      	lsls	r3, r3, #1
 8006020:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006024:	441c      	add	r4, r3
 8006026:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800602a:	2200      	movs	r2, #0
 800602c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006030:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8006034:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8006038:	4642      	mov	r2, r8
 800603a:	464b      	mov	r3, r9
 800603c:	1891      	adds	r1, r2, r2
 800603e:	63b9      	str	r1, [r7, #56]	; 0x38
 8006040:	415b      	adcs	r3, r3
 8006042:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006044:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8006048:	4641      	mov	r1, r8
 800604a:	1851      	adds	r1, r2, r1
 800604c:	6339      	str	r1, [r7, #48]	; 0x30
 800604e:	4649      	mov	r1, r9
 8006050:	414b      	adcs	r3, r1
 8006052:	637b      	str	r3, [r7, #52]	; 0x34
 8006054:	f04f 0200 	mov.w	r2, #0
 8006058:	f04f 0300 	mov.w	r3, #0
 800605c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8006060:	4659      	mov	r1, fp
 8006062:	00cb      	lsls	r3, r1, #3
 8006064:	4651      	mov	r1, sl
 8006066:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800606a:	4651      	mov	r1, sl
 800606c:	00ca      	lsls	r2, r1, #3
 800606e:	4610      	mov	r0, r2
 8006070:	4619      	mov	r1, r3
 8006072:	4603      	mov	r3, r0
 8006074:	4642      	mov	r2, r8
 8006076:	189b      	adds	r3, r3, r2
 8006078:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800607c:	464b      	mov	r3, r9
 800607e:	460a      	mov	r2, r1
 8006080:	eb42 0303 	adc.w	r3, r2, r3
 8006084:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006088:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800608c:	685b      	ldr	r3, [r3, #4]
 800608e:	2200      	movs	r2, #0
 8006090:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8006094:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8006098:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800609c:	460b      	mov	r3, r1
 800609e:	18db      	adds	r3, r3, r3
 80060a0:	62bb      	str	r3, [r7, #40]	; 0x28
 80060a2:	4613      	mov	r3, r2
 80060a4:	eb42 0303 	adc.w	r3, r2, r3
 80060a8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80060aa:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80060ae:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80060b2:	f7fa fd89 	bl	8000bc8 <__aeabi_uldivmod>
 80060b6:	4602      	mov	r2, r0
 80060b8:	460b      	mov	r3, r1
 80060ba:	4b0d      	ldr	r3, [pc, #52]	; (80060f0 <UART_SetConfig+0x2d4>)
 80060bc:	fba3 1302 	umull	r1, r3, r3, r2
 80060c0:	095b      	lsrs	r3, r3, #5
 80060c2:	2164      	movs	r1, #100	; 0x64
 80060c4:	fb01 f303 	mul.w	r3, r1, r3
 80060c8:	1ad3      	subs	r3, r2, r3
 80060ca:	00db      	lsls	r3, r3, #3
 80060cc:	3332      	adds	r3, #50	; 0x32
 80060ce:	4a08      	ldr	r2, [pc, #32]	; (80060f0 <UART_SetConfig+0x2d4>)
 80060d0:	fba2 2303 	umull	r2, r3, r2, r3
 80060d4:	095b      	lsrs	r3, r3, #5
 80060d6:	f003 0207 	and.w	r2, r3, #7
 80060da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	4422      	add	r2, r4
 80060e2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80060e4:	e105      	b.n	80062f2 <UART_SetConfig+0x4d6>
 80060e6:	bf00      	nop
 80060e8:	40011000 	.word	0x40011000
 80060ec:	40011400 	.word	0x40011400
 80060f0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80060f4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80060f8:	2200      	movs	r2, #0
 80060fa:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80060fe:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8006102:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8006106:	4642      	mov	r2, r8
 8006108:	464b      	mov	r3, r9
 800610a:	1891      	adds	r1, r2, r2
 800610c:	6239      	str	r1, [r7, #32]
 800610e:	415b      	adcs	r3, r3
 8006110:	627b      	str	r3, [r7, #36]	; 0x24
 8006112:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006116:	4641      	mov	r1, r8
 8006118:	1854      	adds	r4, r2, r1
 800611a:	4649      	mov	r1, r9
 800611c:	eb43 0501 	adc.w	r5, r3, r1
 8006120:	f04f 0200 	mov.w	r2, #0
 8006124:	f04f 0300 	mov.w	r3, #0
 8006128:	00eb      	lsls	r3, r5, #3
 800612a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800612e:	00e2      	lsls	r2, r4, #3
 8006130:	4614      	mov	r4, r2
 8006132:	461d      	mov	r5, r3
 8006134:	4643      	mov	r3, r8
 8006136:	18e3      	adds	r3, r4, r3
 8006138:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800613c:	464b      	mov	r3, r9
 800613e:	eb45 0303 	adc.w	r3, r5, r3
 8006142:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8006146:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800614a:	685b      	ldr	r3, [r3, #4]
 800614c:	2200      	movs	r2, #0
 800614e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8006152:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8006156:	f04f 0200 	mov.w	r2, #0
 800615a:	f04f 0300 	mov.w	r3, #0
 800615e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8006162:	4629      	mov	r1, r5
 8006164:	008b      	lsls	r3, r1, #2
 8006166:	4621      	mov	r1, r4
 8006168:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800616c:	4621      	mov	r1, r4
 800616e:	008a      	lsls	r2, r1, #2
 8006170:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8006174:	f7fa fd28 	bl	8000bc8 <__aeabi_uldivmod>
 8006178:	4602      	mov	r2, r0
 800617a:	460b      	mov	r3, r1
 800617c:	4b60      	ldr	r3, [pc, #384]	; (8006300 <UART_SetConfig+0x4e4>)
 800617e:	fba3 2302 	umull	r2, r3, r3, r2
 8006182:	095b      	lsrs	r3, r3, #5
 8006184:	011c      	lsls	r4, r3, #4
 8006186:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800618a:	2200      	movs	r2, #0
 800618c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8006190:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8006194:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8006198:	4642      	mov	r2, r8
 800619a:	464b      	mov	r3, r9
 800619c:	1891      	adds	r1, r2, r2
 800619e:	61b9      	str	r1, [r7, #24]
 80061a0:	415b      	adcs	r3, r3
 80061a2:	61fb      	str	r3, [r7, #28]
 80061a4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80061a8:	4641      	mov	r1, r8
 80061aa:	1851      	adds	r1, r2, r1
 80061ac:	6139      	str	r1, [r7, #16]
 80061ae:	4649      	mov	r1, r9
 80061b0:	414b      	adcs	r3, r1
 80061b2:	617b      	str	r3, [r7, #20]
 80061b4:	f04f 0200 	mov.w	r2, #0
 80061b8:	f04f 0300 	mov.w	r3, #0
 80061bc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80061c0:	4659      	mov	r1, fp
 80061c2:	00cb      	lsls	r3, r1, #3
 80061c4:	4651      	mov	r1, sl
 80061c6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80061ca:	4651      	mov	r1, sl
 80061cc:	00ca      	lsls	r2, r1, #3
 80061ce:	4610      	mov	r0, r2
 80061d0:	4619      	mov	r1, r3
 80061d2:	4603      	mov	r3, r0
 80061d4:	4642      	mov	r2, r8
 80061d6:	189b      	adds	r3, r3, r2
 80061d8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80061dc:	464b      	mov	r3, r9
 80061de:	460a      	mov	r2, r1
 80061e0:	eb42 0303 	adc.w	r3, r2, r3
 80061e4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80061e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80061ec:	685b      	ldr	r3, [r3, #4]
 80061ee:	2200      	movs	r2, #0
 80061f0:	67bb      	str	r3, [r7, #120]	; 0x78
 80061f2:	67fa      	str	r2, [r7, #124]	; 0x7c
 80061f4:	f04f 0200 	mov.w	r2, #0
 80061f8:	f04f 0300 	mov.w	r3, #0
 80061fc:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8006200:	4649      	mov	r1, r9
 8006202:	008b      	lsls	r3, r1, #2
 8006204:	4641      	mov	r1, r8
 8006206:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800620a:	4641      	mov	r1, r8
 800620c:	008a      	lsls	r2, r1, #2
 800620e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8006212:	f7fa fcd9 	bl	8000bc8 <__aeabi_uldivmod>
 8006216:	4602      	mov	r2, r0
 8006218:	460b      	mov	r3, r1
 800621a:	4b39      	ldr	r3, [pc, #228]	; (8006300 <UART_SetConfig+0x4e4>)
 800621c:	fba3 1302 	umull	r1, r3, r3, r2
 8006220:	095b      	lsrs	r3, r3, #5
 8006222:	2164      	movs	r1, #100	; 0x64
 8006224:	fb01 f303 	mul.w	r3, r1, r3
 8006228:	1ad3      	subs	r3, r2, r3
 800622a:	011b      	lsls	r3, r3, #4
 800622c:	3332      	adds	r3, #50	; 0x32
 800622e:	4a34      	ldr	r2, [pc, #208]	; (8006300 <UART_SetConfig+0x4e4>)
 8006230:	fba2 2303 	umull	r2, r3, r2, r3
 8006234:	095b      	lsrs	r3, r3, #5
 8006236:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800623a:	441c      	add	r4, r3
 800623c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006240:	2200      	movs	r2, #0
 8006242:	673b      	str	r3, [r7, #112]	; 0x70
 8006244:	677a      	str	r2, [r7, #116]	; 0x74
 8006246:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800624a:	4642      	mov	r2, r8
 800624c:	464b      	mov	r3, r9
 800624e:	1891      	adds	r1, r2, r2
 8006250:	60b9      	str	r1, [r7, #8]
 8006252:	415b      	adcs	r3, r3
 8006254:	60fb      	str	r3, [r7, #12]
 8006256:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800625a:	4641      	mov	r1, r8
 800625c:	1851      	adds	r1, r2, r1
 800625e:	6039      	str	r1, [r7, #0]
 8006260:	4649      	mov	r1, r9
 8006262:	414b      	adcs	r3, r1
 8006264:	607b      	str	r3, [r7, #4]
 8006266:	f04f 0200 	mov.w	r2, #0
 800626a:	f04f 0300 	mov.w	r3, #0
 800626e:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8006272:	4659      	mov	r1, fp
 8006274:	00cb      	lsls	r3, r1, #3
 8006276:	4651      	mov	r1, sl
 8006278:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800627c:	4651      	mov	r1, sl
 800627e:	00ca      	lsls	r2, r1, #3
 8006280:	4610      	mov	r0, r2
 8006282:	4619      	mov	r1, r3
 8006284:	4603      	mov	r3, r0
 8006286:	4642      	mov	r2, r8
 8006288:	189b      	adds	r3, r3, r2
 800628a:	66bb      	str	r3, [r7, #104]	; 0x68
 800628c:	464b      	mov	r3, r9
 800628e:	460a      	mov	r2, r1
 8006290:	eb42 0303 	adc.w	r3, r2, r3
 8006294:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006296:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800629a:	685b      	ldr	r3, [r3, #4]
 800629c:	2200      	movs	r2, #0
 800629e:	663b      	str	r3, [r7, #96]	; 0x60
 80062a0:	667a      	str	r2, [r7, #100]	; 0x64
 80062a2:	f04f 0200 	mov.w	r2, #0
 80062a6:	f04f 0300 	mov.w	r3, #0
 80062aa:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80062ae:	4649      	mov	r1, r9
 80062b0:	008b      	lsls	r3, r1, #2
 80062b2:	4641      	mov	r1, r8
 80062b4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80062b8:	4641      	mov	r1, r8
 80062ba:	008a      	lsls	r2, r1, #2
 80062bc:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80062c0:	f7fa fc82 	bl	8000bc8 <__aeabi_uldivmod>
 80062c4:	4602      	mov	r2, r0
 80062c6:	460b      	mov	r3, r1
 80062c8:	4b0d      	ldr	r3, [pc, #52]	; (8006300 <UART_SetConfig+0x4e4>)
 80062ca:	fba3 1302 	umull	r1, r3, r3, r2
 80062ce:	095b      	lsrs	r3, r3, #5
 80062d0:	2164      	movs	r1, #100	; 0x64
 80062d2:	fb01 f303 	mul.w	r3, r1, r3
 80062d6:	1ad3      	subs	r3, r2, r3
 80062d8:	011b      	lsls	r3, r3, #4
 80062da:	3332      	adds	r3, #50	; 0x32
 80062dc:	4a08      	ldr	r2, [pc, #32]	; (8006300 <UART_SetConfig+0x4e4>)
 80062de:	fba2 2303 	umull	r2, r3, r2, r3
 80062e2:	095b      	lsrs	r3, r3, #5
 80062e4:	f003 020f 	and.w	r2, r3, #15
 80062e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	4422      	add	r2, r4
 80062f0:	609a      	str	r2, [r3, #8]
}
 80062f2:	bf00      	nop
 80062f4:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80062f8:	46bd      	mov	sp, r7
 80062fa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80062fe:	bf00      	nop
 8006300:	51eb851f 	.word	0x51eb851f

08006304 <arm_rms_f32>:
 8006304:	b530      	push	{r4, r5, lr}
 8006306:	088d      	lsrs	r5, r1, #2
 8006308:	b083      	sub	sp, #12
 800630a:	ed9f 0a28 	vldr	s0, [pc, #160]	; 80063ac <arm_rms_f32+0xa8>
 800630e:	d020      	beq.n	8006352 <arm_rms_f32+0x4e>
 8006310:	f100 0310 	add.w	r3, r0, #16
 8006314:	462c      	mov	r4, r5
 8006316:	ed53 6a04 	vldr	s13, [r3, #-16]
 800631a:	ed13 7a03 	vldr	s14, [r3, #-12]
 800631e:	ed53 7a02 	vldr	s15, [r3, #-8]
 8006322:	ed13 6a01 	vldr	s12, [r3, #-4]
 8006326:	ee66 6aa6 	vmul.f32	s13, s13, s13
 800632a:	ee27 7a07 	vmul.f32	s14, s14, s14
 800632e:	ee76 6a80 	vadd.f32	s13, s13, s0
 8006332:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8006336:	ee37 7a26 	vadd.f32	s14, s14, s13
 800633a:	ee26 6a06 	vmul.f32	s12, s12, s12
 800633e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8006342:	3c01      	subs	r4, #1
 8006344:	f103 0310 	add.w	r3, r3, #16
 8006348:	ee36 0a27 	vadd.f32	s0, s12, s15
 800634c:	d1e3      	bne.n	8006316 <arm_rms_f32+0x12>
 800634e:	eb00 1005 	add.w	r0, r0, r5, lsl #4
 8006352:	f011 0303 	ands.w	r3, r1, #3
 8006356:	d007      	beq.n	8006368 <arm_rms_f32+0x64>
 8006358:	ecb0 6a01 	vldmia	r0!, {s12}
 800635c:	ee26 6a06 	vmul.f32	s12, s12, s12
 8006360:	3b01      	subs	r3, #1
 8006362:	ee30 0a06 	vadd.f32	s0, s0, s12
 8006366:	d1f7      	bne.n	8006358 <arm_rms_f32+0x54>
 8006368:	ee07 1a90 	vmov	s15, r1
 800636c:	eeb8 6a67 	vcvt.f32.u32	s12, s15
 8006370:	2300      	movs	r3, #0
 8006372:	ee80 6a06 	vdiv.f32	s12, s0, s12
 8006376:	eeb5 6ac0 	vcmpe.f32	s12, #0.0
 800637a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800637e:	da02      	bge.n	8006386 <arm_rms_f32+0x82>
 8006380:	6013      	str	r3, [r2, #0]
 8006382:	b003      	add	sp, #12
 8006384:	bd30      	pop	{r4, r5, pc}
 8006386:	eeb1 0ac6 	vsqrt.f32	s0, s12
 800638a:	eeb4 0a40 	vcmp.f32	s0, s0
 800638e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006392:	d103      	bne.n	800639c <arm_rms_f32+0x98>
 8006394:	ed82 0a00 	vstr	s0, [r2]
 8006398:	b003      	add	sp, #12
 800639a:	bd30      	pop	{r4, r5, pc}
 800639c:	eeb0 0a46 	vmov.f32	s0, s12
 80063a0:	9201      	str	r2, [sp, #4]
 80063a2:	f003 fb11 	bl	80099c8 <sqrtf>
 80063a6:	9a01      	ldr	r2, [sp, #4]
 80063a8:	e7f4      	b.n	8006394 <arm_rms_f32+0x90>
 80063aa:	bf00      	nop
 80063ac:	00000000 	.word	0x00000000

080063b0 <arm_lms_norm_init_f32>:
 80063b0:	b570      	push	{r4, r5, r6, lr}
 80063b2:	ed2d 8b02 	vpush	{d8}
 80063b6:	9c06      	ldr	r4, [sp, #24]
 80063b8:	6082      	str	r2, [r0, #8]
 80063ba:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
 80063be:	3c01      	subs	r4, #1
 80063c0:	440c      	add	r4, r1
 80063c2:	4605      	mov	r5, r0
 80063c4:	8001      	strh	r1, [r0, #0]
 80063c6:	00a2      	lsls	r2, r4, #2
 80063c8:	4618      	mov	r0, r3
 80063ca:	2100      	movs	r1, #0
 80063cc:	eeb0 8a40 	vmov.f32	s16, s0
 80063d0:	461e      	mov	r6, r3
 80063d2:	f000 fbcd 	bl	8006b70 <memset>
 80063d6:	2200      	movs	r2, #0
 80063d8:	606e      	str	r6, [r5, #4]
 80063da:	ed85 8a03 	vstr	s16, [r5, #12]
 80063de:	612a      	str	r2, [r5, #16]
 80063e0:	616a      	str	r2, [r5, #20]
 80063e2:	ecbd 8b02 	vpop	{d8}
 80063e6:	bd70      	pop	{r4, r5, r6, pc}

080063e8 <arm_lms_norm_f32>:
 80063e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80063ec:	b087      	sub	sp, #28
 80063ee:	4604      	mov	r4, r0
 80063f0:	9003      	str	r0, [sp, #12]
 80063f2:	8800      	ldrh	r0, [r0, #0]
 80063f4:	f8d4 8004 	ldr.w	r8, [r4, #4]
 80063f8:	9004      	str	r0, [sp, #16]
 80063fa:	4606      	mov	r6, r0
 80063fc:	f8d4 9008 	ldr.w	r9, [r4, #8]
 8006400:	ed94 2a03 	vldr	s4, [r4, #12]
 8006404:	ed94 3a04 	vldr	s6, [r4, #16]
 8006408:	edd4 7a05 	vldr	s15, [r4, #20]
 800640c:	9c11      	ldr	r4, [sp, #68]	; 0x44
 800640e:	f106 4080 	add.w	r0, r6, #1073741824	; 0x40000000
 8006412:	3801      	subs	r0, #1
 8006414:	eb08 0080 	add.w	r0, r8, r0, lsl #2
 8006418:	2c00      	cmp	r4, #0
 800641a:	f000 8101 	beq.w	8006620 <arm_lms_norm_f32+0x238>
 800641e:	08b5      	lsrs	r5, r6, #2
 8006420:	46a4      	mov	ip, r4
 8006422:	012c      	lsls	r4, r5, #4
 8006424:	9001      	str	r0, [sp, #4]
 8006426:	eb08 0e04 	add.w	lr, r8, r4
 800642a:	eb09 0004 	add.w	r0, r9, r4
 800642e:	f006 0703 	and.w	r7, r6, #3
 8006432:	46c2      	mov	sl, r8
 8006434:	f108 0610 	add.w	r6, r8, #16
 8006438:	f8cd 8014 	str.w	r8, [sp, #20]
 800643c:	eddf 2a7a 	vldr	s5, [pc, #488]	; 8006628 <arm_lms_norm_f32+0x240>
 8006440:	f8dd 8040 	ldr.w	r8, [sp, #64]	; 0x40
 8006444:	9002      	str	r0, [sp, #8]
 8006446:	9c01      	ldr	r4, [sp, #4]
 8006448:	6808      	ldr	r0, [r1, #0]
 800644a:	f844 0b04 	str.w	r0, [r4], #4
 800644e:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8006452:	ecb1 7a01 	vldmia	r1!, {s14}
 8006456:	9401      	str	r4, [sp, #4]
 8006458:	ee33 3a67 	vsub.f32	s6, s6, s15
 800645c:	ee27 7a07 	vmul.f32	s14, s14, s14
 8006460:	eddf 7a72 	vldr	s15, [pc, #456]	; 800662c <arm_lms_norm_f32+0x244>
 8006464:	ee37 3a03 	vadd.f32	s6, s14, s6
 8006468:	2d00      	cmp	r5, #0
 800646a:	f000 80d6 	beq.w	800661a <arm_lms_norm_f32+0x232>
 800646e:	f109 0410 	add.w	r4, r9, #16
 8006472:	4630      	mov	r0, r6
 8006474:	46ab      	mov	fp, r5
 8006476:	ed54 6a04 	vldr	s13, [r4, #-16]
 800647a:	ed10 4a04 	vldr	s8, [r0, #-16]
 800647e:	ed50 3a03 	vldr	s7, [r0, #-12]
 8006482:	ed14 5a03 	vldr	s10, [r4, #-12]
 8006486:	ed50 4a02 	vldr	s9, [r0, #-8]
 800648a:	ed14 6a02 	vldr	s12, [r4, #-8]
 800648e:	ed50 5a01 	vldr	s11, [r0, #-4]
 8006492:	ed14 7a01 	vldr	s14, [r4, #-4]
 8006496:	ee24 4a26 	vmul.f32	s8, s8, s13
 800649a:	ee23 5a85 	vmul.f32	s10, s7, s10
 800649e:	ee74 6a27 	vadd.f32	s13, s8, s15
 80064a2:	ee24 6a86 	vmul.f32	s12, s9, s12
 80064a6:	ee75 6a26 	vadd.f32	s13, s10, s13
 80064aa:	ee25 7a87 	vmul.f32	s14, s11, s14
 80064ae:	ee76 7a26 	vadd.f32	s15, s12, s13
 80064b2:	f1bb 0b01 	subs.w	fp, fp, #1
 80064b6:	f100 0010 	add.w	r0, r0, #16
 80064ba:	ee77 7a27 	vadd.f32	s15, s14, s15
 80064be:	f104 0410 	add.w	r4, r4, #16
 80064c2:	d1d8      	bne.n	8006476 <arm_lms_norm_f32+0x8e>
 80064c4:	f8dd b008 	ldr.w	fp, [sp, #8]
 80064c8:	4674      	mov	r4, lr
 80064ca:	b157      	cbz	r7, 80064e2 <arm_lms_norm_f32+0xfa>
 80064cc:	4638      	mov	r0, r7
 80064ce:	ecf4 6a01 	vldmia	r4!, {s13}
 80064d2:	ecbb 7a01 	vldmia	fp!, {s14}
 80064d6:	ee26 7a87 	vmul.f32	s14, s13, s14
 80064da:	3801      	subs	r0, #1
 80064dc:	ee77 7a87 	vadd.f32	s15, s15, s14
 80064e0:	d1f5      	bne.n	80064ce <arm_lms_norm_f32+0xe6>
 80064e2:	ece3 7a01 	vstmia	r3!, {s15}
 80064e6:	ecb2 7a01 	vldmia	r2!, {s14}
 80064ea:	ee77 7a67 	vsub.f32	s15, s14, s15
 80064ee:	ee33 5a22 	vadd.f32	s10, s6, s5
 80064f2:	ee27 7a82 	vmul.f32	s14, s15, s4
 80064f6:	ece8 7a01 	vstmia	r8!, {s15}
 80064fa:	ee87 5a05 	vdiv.f32	s10, s14, s10
 80064fe:	2d00      	cmp	r5, #0
 8006500:	f000 8088 	beq.w	8006614 <arm_lms_norm_f32+0x22c>
 8006504:	f109 0010 	add.w	r0, r9, #16
 8006508:	4634      	mov	r4, r6
 800650a:	46ab      	mov	fp, r5
 800650c:	f1bb 0b01 	subs.w	fp, fp, #1
 8006510:	f104 0410 	add.w	r4, r4, #16
 8006514:	f100 0010 	add.w	r0, r0, #16
 8006518:	ed54 7a08 	vldr	s15, [r4, #-32]	; 0xffffffe0
 800651c:	ed50 5a08 	vldr	s11, [r0, #-32]	; 0xffffffe0
 8006520:	ed10 6a07 	vldr	s12, [r0, #-28]	; 0xffffffe4
 8006524:	ed50 6a06 	vldr	s13, [r0, #-24]	; 0xffffffe8
 8006528:	ed10 7a05 	vldr	s14, [r0, #-20]	; 0xffffffec
 800652c:	ee65 7a27 	vmul.f32	s15, s10, s15
 8006530:	ee75 7aa7 	vadd.f32	s15, s11, s15
 8006534:	ed40 7a08 	vstr	s15, [r0, #-32]	; 0xffffffe0
 8006538:	ed54 7a07 	vldr	s15, [r4, #-28]	; 0xffffffe4
 800653c:	ee65 7a27 	vmul.f32	s15, s10, s15
 8006540:	ee76 7a27 	vadd.f32	s15, s12, s15
 8006544:	ed40 7a07 	vstr	s15, [r0, #-28]	; 0xffffffe4
 8006548:	ed54 7a06 	vldr	s15, [r4, #-24]	; 0xffffffe8
 800654c:	ee65 7a27 	vmul.f32	s15, s10, s15
 8006550:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006554:	ed40 7a06 	vstr	s15, [r0, #-24]	; 0xffffffe8
 8006558:	ed54 7a05 	vldr	s15, [r4, #-20]	; 0xffffffec
 800655c:	ee65 7a27 	vmul.f32	s15, s10, s15
 8006560:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006564:	ed40 7a05 	vstr	s15, [r0, #-20]	; 0xffffffec
 8006568:	d1d0      	bne.n	800650c <arm_lms_norm_f32+0x124>
 800656a:	9802      	ldr	r0, [sp, #8]
 800656c:	46f3      	mov	fp, lr
 800656e:	463c      	mov	r4, r7
 8006570:	b15f      	cbz	r7, 800658a <arm_lms_norm_f32+0x1a2>
 8006572:	ecfb 7a01 	vldmia	fp!, {s15}
 8006576:	ed90 7a00 	vldr	s14, [r0]
 800657a:	ee65 7a27 	vmul.f32	s15, s10, s15
 800657e:	3c01      	subs	r4, #1
 8006580:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006584:	ece0 7a01 	vstmia	r0!, {s15}
 8006588:	d1f3      	bne.n	8006572 <arm_lms_norm_f32+0x18a>
 800658a:	f1bc 0c01 	subs.w	ip, ip, #1
 800658e:	f10e 0e04 	add.w	lr, lr, #4
 8006592:	f106 0604 	add.w	r6, r6, #4
 8006596:	ecfa 7a01 	vldmia	sl!, {s15}
 800659a:	f47f af54 	bne.w	8006446 <arm_lms_norm_f32+0x5e>
 800659e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80065a0:	f8dd 8014 	ldr.w	r8, [sp, #20]
 80065a4:	eb08 0883 	add.w	r8, r8, r3, lsl #2
 80065a8:	9b03      	ldr	r3, [sp, #12]
 80065aa:	685c      	ldr	r4, [r3, #4]
 80065ac:	461a      	mov	r2, r3
 80065ae:	9b04      	ldr	r3, [sp, #16]
 80065b0:	ed82 3a04 	vstr	s6, [r2, #16]
 80065b4:	1e59      	subs	r1, r3, #1
 80065b6:	088e      	lsrs	r6, r1, #2
 80065b8:	edc2 7a05 	vstr	s15, [r2, #20]
 80065bc:	d01d      	beq.n	80065fa <arm_lms_norm_f32+0x212>
 80065be:	f104 0210 	add.w	r2, r4, #16
 80065c2:	f108 0310 	add.w	r3, r8, #16
 80065c6:	4630      	mov	r0, r6
 80065c8:	f853 5c10 	ldr.w	r5, [r3, #-16]
 80065cc:	f842 5c10 	str.w	r5, [r2, #-16]
 80065d0:	f853 5c0c 	ldr.w	r5, [r3, #-12]
 80065d4:	f842 5c0c 	str.w	r5, [r2, #-12]
 80065d8:	f853 5c08 	ldr.w	r5, [r3, #-8]
 80065dc:	f842 5c08 	str.w	r5, [r2, #-8]
 80065e0:	f853 5c04 	ldr.w	r5, [r3, #-4]
 80065e4:	f842 5c04 	str.w	r5, [r2, #-4]
 80065e8:	3801      	subs	r0, #1
 80065ea:	f103 0310 	add.w	r3, r3, #16
 80065ee:	f102 0210 	add.w	r2, r2, #16
 80065f2:	d1e9      	bne.n	80065c8 <arm_lms_norm_f32+0x1e0>
 80065f4:	0133      	lsls	r3, r6, #4
 80065f6:	441c      	add	r4, r3
 80065f8:	4498      	add	r8, r3
 80065fa:	f011 0303 	ands.w	r3, r1, #3
 80065fe:	d006      	beq.n	800660e <arm_lms_norm_f32+0x226>
 8006600:	4622      	mov	r2, r4
 8006602:	f858 1b04 	ldr.w	r1, [r8], #4
 8006606:	f842 1b04 	str.w	r1, [r2], #4
 800660a:	3b01      	subs	r3, #1
 800660c:	d1f9      	bne.n	8006602 <arm_lms_norm_f32+0x21a>
 800660e:	b007      	add	sp, #28
 8006610:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006614:	4648      	mov	r0, r9
 8006616:	46d3      	mov	fp, sl
 8006618:	e7a9      	b.n	800656e <arm_lms_norm_f32+0x186>
 800661a:	46cb      	mov	fp, r9
 800661c:	4654      	mov	r4, sl
 800661e:	e754      	b.n	80064ca <arm_lms_norm_f32+0xe2>
 8006620:	4644      	mov	r4, r8
 8006622:	9a03      	ldr	r2, [sp, #12]
 8006624:	e7c3      	b.n	80065ae <arm_lms_norm_f32+0x1c6>
 8006626:	bf00      	nop
 8006628:	34000000 	.word	0x34000000
 800662c:	00000000 	.word	0x00000000

08006630 <arm_fir_init_f32>:
 8006630:	b570      	push	{r4, r5, r6, lr}
 8006632:	9c04      	ldr	r4, [sp, #16]
 8006634:	6082      	str	r2, [r0, #8]
 8006636:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
 800663a:	3c01      	subs	r4, #1
 800663c:	4605      	mov	r5, r0
 800663e:	440c      	add	r4, r1
 8006640:	8001      	strh	r1, [r0, #0]
 8006642:	461e      	mov	r6, r3
 8006644:	00a2      	lsls	r2, r4, #2
 8006646:	4618      	mov	r0, r3
 8006648:	2100      	movs	r1, #0
 800664a:	f000 fa91 	bl	8006b70 <memset>
 800664e:	606e      	str	r6, [r5, #4]
 8006650:	bd70      	pop	{r4, r5, r6, pc}
 8006652:	bf00      	nop

08006654 <arm_fir_f32>:
 8006654:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006658:	ed2d 8b10 	vpush	{d8-d15}
 800665c:	b089      	sub	sp, #36	; 0x24
 800665e:	4605      	mov	r5, r0
 8006660:	9003      	str	r0, [sp, #12]
 8006662:	8800      	ldrh	r0, [r0, #0]
 8006664:	f8d5 c004 	ldr.w	ip, [r5, #4]
 8006668:	9304      	str	r3, [sp, #16]
 800666a:	461e      	mov	r6, r3
 800666c:	f100 4380 	add.w	r3, r0, #1073741824	; 0x40000000
 8006670:	3b01      	subs	r3, #1
 8006672:	eb0c 0483 	add.w	r4, ip, r3, lsl #2
 8006676:	08f3      	lsrs	r3, r6, #3
 8006678:	f8d5 8008 	ldr.w	r8, [r5, #8]
 800667c:	9001      	str	r0, [sp, #4]
 800667e:	4625      	mov	r5, r4
 8006680:	9400      	str	r4, [sp, #0]
 8006682:	9302      	str	r3, [sp, #8]
 8006684:	f000 81ee 	beq.w	8006a64 <arm_fir_f32+0x410>
 8006688:	ea4f 09d0 	mov.w	r9, r0, lsr #3
 800668c:	469e      	mov	lr, r3
 800668e:	ea4f 1349 	mov.w	r3, r9, lsl #5
 8006692:	1f1e      	subs	r6, r3, #4
 8006694:	4604      	mov	r4, r0
 8006696:	9605      	str	r6, [sp, #20]
 8006698:	eb08 0003 	add.w	r0, r8, r3
 800669c:	f004 0a07 	and.w	sl, r4, #7
 80066a0:	4613      	mov	r3, r2
 80066a2:	f10c 0420 	add.w	r4, ip, #32
 80066a6:	f8cd c018 	str.w	ip, [sp, #24]
 80066aa:	4684      	mov	ip, r0
 80066ac:	4648      	mov	r0, r9
 80066ae:	f8dd 9014 	ldr.w	r9, [sp, #20]
 80066b2:	9107      	str	r1, [sp, #28]
 80066b4:	f105 0720 	add.w	r7, r5, #32
 80066b8:	f101 0620 	add.w	r6, r1, #32
 80066bc:	f102 0520 	add.w	r5, r2, #32
 80066c0:	4652      	mov	r2, sl
 80066c2:	469a      	mov	sl, r3
 80066c4:	f856 3c20 	ldr.w	r3, [r6, #-32]
 80066c8:	f847 3c20 	str.w	r3, [r7, #-32]
 80066cc:	f856 3c1c 	ldr.w	r3, [r6, #-28]
 80066d0:	f847 3c1c 	str.w	r3, [r7, #-28]
 80066d4:	f856 3c18 	ldr.w	r3, [r6, #-24]
 80066d8:	f847 3c18 	str.w	r3, [r7, #-24]
 80066dc:	f856 3c14 	ldr.w	r3, [r6, #-20]
 80066e0:	f847 3c14 	str.w	r3, [r7, #-20]
 80066e4:	f856 3c10 	ldr.w	r3, [r6, #-16]
 80066e8:	f847 3c10 	str.w	r3, [r7, #-16]
 80066ec:	f856 3c0c 	ldr.w	r3, [r6, #-12]
 80066f0:	f847 3c0c 	str.w	r3, [r7, #-12]
 80066f4:	f856 3c08 	ldr.w	r3, [r6, #-8]
 80066f8:	f847 3c08 	str.w	r3, [r7, #-8]
 80066fc:	eddf 3af1 	vldr	s7, [pc, #964]	; 8006ac4 <arm_fir_f32+0x470>
 8006700:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8006704:	f847 3c04 	str.w	r3, [r7, #-4]
 8006708:	ed14 3a08 	vldr	s6, [r4, #-32]	; 0xffffffe0
 800670c:	ed54 2a07 	vldr	s5, [r4, #-28]	; 0xffffffe4
 8006710:	ed14 2a06 	vldr	s4, [r4, #-24]	; 0xffffffe8
 8006714:	ed54 1a05 	vldr	s3, [r4, #-20]	; 0xffffffec
 8006718:	ed14 1a04 	vldr	s2, [r4, #-16]
 800671c:	ed54 0a03 	vldr	s1, [r4, #-12]
 8006720:	ed14 0a02 	vldr	s0, [r4, #-8]
 8006724:	1f21      	subs	r1, r4, #4
 8006726:	eef0 8a63 	vmov.f32	s17, s7
 800672a:	eef0 9a63 	vmov.f32	s19, s7
 800672e:	eef0 aa63 	vmov.f32	s21, s7
 8006732:	eef0 ba63 	vmov.f32	s23, s7
 8006736:	eeb0 ca63 	vmov.f32	s24, s7
 800673a:	eef0 ca63 	vmov.f32	s25, s7
 800673e:	eeb0 da63 	vmov.f32	s26, s7
 8006742:	2800      	cmp	r0, #0
 8006744:	f000 81e8 	beq.w	8006b18 <arm_fir_f32+0x4c4>
 8006748:	f108 0120 	add.w	r1, r8, #32
 800674c:	f104 031c 	add.w	r3, r4, #28
 8006750:	4683      	mov	fp, r0
 8006752:	ed13 8a08 	vldr	s16, [r3, #-32]	; 0xffffffe0
 8006756:	ed11 4a08 	vldr	s8, [r1, #-32]	; 0xffffffe0
 800675a:	ed51 4a07 	vldr	s9, [r1, #-28]	; 0xffffffe4
 800675e:	ed11 5a06 	vldr	s10, [r1, #-24]	; 0xffffffe8
 8006762:	ed51 5a05 	vldr	s11, [r1, #-20]	; 0xffffffec
 8006766:	ed11 6a04 	vldr	s12, [r1, #-16]
 800676a:	ed51 6a03 	vldr	s13, [r1, #-12]
 800676e:	ed11 7a02 	vldr	s14, [r1, #-8]
 8006772:	ed51 7a01 	vldr	s15, [r1, #-4]
 8006776:	ee23 fa04 	vmul.f32	s30, s6, s8
 800677a:	ee62 ea84 	vmul.f32	s29, s5, s8
 800677e:	ed13 3a07 	vldr	s6, [r3, #-28]	; 0xffffffe4
 8006782:	ee22 ea04 	vmul.f32	s28, s4, s8
 8006786:	ee61 da84 	vmul.f32	s27, s3, s8
 800678a:	ee21 ba04 	vmul.f32	s22, s2, s8
 800678e:	ee20 aa84 	vmul.f32	s20, s1, s8
 8006792:	ee20 9a04 	vmul.f32	s18, s0, s8
 8006796:	ee28 4a04 	vmul.f32	s8, s16, s8
 800679a:	ee62 fa24 	vmul.f32	s31, s4, s9
 800679e:	ee3c ca0e 	vadd.f32	s24, s24, s28
 80067a2:	ee7b baad 	vadd.f32	s23, s23, s27
 80067a6:	ee21 eaa4 	vmul.f32	s28, s3, s9
 80067aa:	ee61 da24 	vmul.f32	s27, s2, s9
 80067ae:	ee7a aa8b 	vadd.f32	s21, s21, s22
 80067b2:	ee79 9a8a 	vadd.f32	s19, s19, s20
 80067b6:	ee20 baa4 	vmul.f32	s22, s1, s9
 80067ba:	ee20 aa24 	vmul.f32	s20, s0, s9
 80067be:	ee3d da0f 	vadd.f32	s26, s26, s30
 80067c2:	ee7c caae 	vadd.f32	s25, s25, s29
 80067c6:	ee22 faa4 	vmul.f32	s30, s5, s9
 80067ca:	ee78 8a89 	vadd.f32	s17, s17, s18
 80067ce:	ed53 2a06 	vldr	s5, [r3, #-24]	; 0xffffffe8
 80067d2:	ee28 9a24 	vmul.f32	s18, s16, s9
 80067d6:	ee73 3a84 	vadd.f32	s7, s7, s8
 80067da:	ee63 4a24 	vmul.f32	s9, s6, s9
 80067de:	ee22 4a05 	vmul.f32	s8, s4, s10
 80067e2:	ee61 ea05 	vmul.f32	s29, s2, s10
 80067e6:	ed13 2a05 	vldr	s4, [r3, #-20]	; 0xffffffec
 80067ea:	ee3d da0f 	vadd.f32	s26, s26, s30
 80067ee:	ee7c caaf 	vadd.f32	s25, s25, s31
 80067f2:	ee20 fa85 	vmul.f32	s30, s1, s10
 80067f6:	ee61 fa85 	vmul.f32	s31, s3, s10
 80067fa:	ee3c ea0e 	vadd.f32	s28, s24, s28
 80067fe:	ee7b daad 	vadd.f32	s27, s23, s27
 8006802:	ee3a ba8b 	vadd.f32	s22, s21, s22
 8006806:	ee60 ba05 	vmul.f32	s23, s0, s10
 800680a:	ee68 aa05 	vmul.f32	s21, s16, s10
 800680e:	ee39 aa8a 	vadd.f32	s20, s19, s20
 8006812:	ee78 8a89 	vadd.f32	s17, s17, s18
 8006816:	ee73 3aa4 	vadd.f32	s7, s7, s9
 800681a:	ee63 4a05 	vmul.f32	s9, s6, s10
 800681e:	ee22 5a85 	vmul.f32	s10, s5, s10
 8006822:	ee21 9a25 	vmul.f32	s18, s2, s11
 8006826:	ee20 ca25 	vmul.f32	s24, s0, s11
 800682a:	ee3d da04 	vadd.f32	s26, s26, s8
 800682e:	ee7c caaf 	vadd.f32	s25, s25, s31
 8006832:	ee21 4aa5 	vmul.f32	s8, s3, s11
 8006836:	ee3e ea2e 	vadd.f32	s28, s28, s29
 800683a:	ed53 1a04 	vldr	s3, [r3, #-16]
 800683e:	ee60 eaa5 	vmul.f32	s29, s1, s11
 8006842:	ee7d da8f 	vadd.f32	s27, s27, s30
 8006846:	ee3b ba2b 	vadd.f32	s22, s22, s23
 800684a:	ee3a aa2a 	vadd.f32	s20, s20, s21
 800684e:	ee68 ba25 	vmul.f32	s23, s16, s11
 8006852:	ee63 aa25 	vmul.f32	s21, s6, s11
 8006856:	ee78 8aa4 	vadd.f32	s17, s17, s9
 800685a:	ee73 3a85 	vadd.f32	s7, s7, s10
 800685e:	ee22 5aa5 	vmul.f32	s10, s5, s11
 8006862:	ee62 5a25 	vmul.f32	s11, s4, s11
 8006866:	ee61 4a06 	vmul.f32	s9, s2, s12
 800686a:	ee60 9a86 	vmul.f32	s19, s1, s12
 800686e:	ee60 fa06 	vmul.f32	s31, s0, s12
 8006872:	ed13 1a03 	vldr	s2, [r3, #-12]
 8006876:	ee23 fa06 	vmul.f32	s30, s6, s12
 800687a:	ee3d da04 	vadd.f32	s26, s26, s8
 800687e:	ee7c ca89 	vadd.f32	s25, s25, s18
 8006882:	ee3e ea2e 	vadd.f32	s28, s28, s29
 8006886:	ee28 9a06 	vmul.f32	s18, s16, s12
 800688a:	ee7d da8c 	vadd.f32	s27, s27, s24
 800688e:	ee3b ba2b 	vadd.f32	s22, s22, s23
 8006892:	ee22 ca86 	vmul.f32	s24, s5, s12
 8006896:	ee3a aa2a 	vadd.f32	s20, s20, s21
 800689a:	ee78 8a85 	vadd.f32	s17, s17, s10
 800689e:	ee73 3aa5 	vadd.f32	s7, s7, s11
 80068a2:	ee62 5a06 	vmul.f32	s11, s4, s12
 80068a6:	ee21 6a86 	vmul.f32	s12, s3, s12
 80068aa:	ee20 4a26 	vmul.f32	s8, s0, s13
 80068ae:	ee63 ea26 	vmul.f32	s29, s6, s13
 80068b2:	ee3a aa0c 	vadd.f32	s20, s20, s24
 80068b6:	ee22 5a26 	vmul.f32	s10, s4, s13
 80068ba:	ee3d da24 	vadd.f32	s26, s26, s9
 80068be:	ee7c caa9 	vadd.f32	s25, s25, s19
 80068c2:	ee60 4aa6 	vmul.f32	s9, s1, s13
 80068c6:	ee3e ea2f 	vadd.f32	s28, s28, s31
 80068ca:	ed53 0a02 	vldr	s1, [r3, #-8]
 80068ce:	ee68 fa26 	vmul.f32	s31, s16, s13
 80068d2:	ee7d da89 	vadd.f32	s27, s27, s18
 80068d6:	ee3b ba0f 	vadd.f32	s22, s22, s30
 80068da:	ee78 8aa5 	vadd.f32	s17, s17, s11
 80068de:	ee22 faa6 	vmul.f32	s30, s5, s13
 80068e2:	ee73 3a86 	vadd.f32	s7, s7, s12
 80068e6:	ee21 6aa6 	vmul.f32	s12, s3, s13
 80068ea:	ee61 6a26 	vmul.f32	s13, s2, s13
 80068ee:	ee60 aa07 	vmul.f32	s21, s0, s14
 80068f2:	ee28 ca07 	vmul.f32	s24, s16, s14
 80068f6:	ee63 ba07 	vmul.f32	s23, s6, s14
 80068fa:	ee7a 9a05 	vadd.f32	s19, s20, s10
 80068fe:	ee78 8a86 	vadd.f32	s17, s17, s12
 8006902:	ee3d da24 	vadd.f32	s26, s26, s9
 8006906:	ee7c ca84 	vadd.f32	s25, s25, s8
 800690a:	ee7d daae 	vadd.f32	s27, s27, s29
 800690e:	ee22 9a07 	vmul.f32	s18, s4, s14
 8006912:	ee62 ea87 	vmul.f32	s29, s5, s14
 8006916:	ee61 5a87 	vmul.f32	s11, s3, s14
 800691a:	ee73 3aa6 	vadd.f32	s7, s7, s13
 800691e:	ed13 0a01 	vldr	s0, [r3, #-4]
 8006922:	ee61 6a07 	vmul.f32	s13, s2, s14
 8006926:	ee3e ea2f 	vadd.f32	s28, s28, s31
 800692a:	ee3b ba0f 	vadd.f32	s22, s22, s30
 800692e:	ee20 7a87 	vmul.f32	s14, s1, s14
 8006932:	ee68 4a27 	vmul.f32	s9, s16, s15
 8006936:	ee3d da2a 	vadd.f32	s26, s26, s21
 800693a:	ee7c ca8c 	vadd.f32	s25, s25, s24
 800693e:	ee23 8a27 	vmul.f32	s16, s6, s15
 8006942:	ee3e ea2b 	vadd.f32	s28, s28, s23
 8006946:	ee22 4aa7 	vmul.f32	s8, s5, s15
 800694a:	ee22 aa27 	vmul.f32	s20, s4, s15
 800694e:	ee21 5aa7 	vmul.f32	s10, s3, s15
 8006952:	ee21 6a27 	vmul.f32	s12, s2, s15
 8006956:	ee78 6aa6 	vadd.f32	s13, s17, s13
 800695a:	ee7d daae 	vadd.f32	s27, s27, s29
 800695e:	ee60 8aa7 	vmul.f32	s17, s1, s15
 8006962:	ee3b ba09 	vadd.f32	s22, s22, s18
 8006966:	ee79 9aa5 	vadd.f32	s19, s19, s11
 800696a:	ee73 3a87 	vadd.f32	s7, s7, s14
 800696e:	ee60 7a27 	vmul.f32	s15, s0, s15
 8006972:	f1bb 0b01 	subs.w	fp, fp, #1
 8006976:	f101 0120 	add.w	r1, r1, #32
 800697a:	ee3d da24 	vadd.f32	s26, s26, s9
 800697e:	ee7c ca88 	vadd.f32	s25, s25, s16
 8006982:	ee3e ca04 	vadd.f32	s24, s28, s8
 8006986:	ee7d ba8a 	vadd.f32	s23, s27, s20
 800698a:	ee7b aa05 	vadd.f32	s21, s22, s10
 800698e:	ee79 9a86 	vadd.f32	s19, s19, s12
 8006992:	ee76 8aa8 	vadd.f32	s17, s13, s17
 8006996:	ee73 3aa7 	vadd.f32	s7, s7, s15
 800699a:	f103 0320 	add.w	r3, r3, #32
 800699e:	f47f aed8 	bne.w	8006752 <arm_fir_f32+0xfe>
 80069a2:	eb09 0104 	add.w	r1, r9, r4
 80069a6:	46e3      	mov	fp, ip
 80069a8:	b3a2      	cbz	r2, 8006a14 <arm_fir_f32+0x3c0>
 80069aa:	4613      	mov	r3, r2
 80069ac:	ecbb 6a01 	vldmia	fp!, {s12}
 80069b0:	ecf1 7a01 	vldmia	r1!, {s15}
 80069b4:	ee23 3a06 	vmul.f32	s6, s6, s12
 80069b8:	ee22 4a86 	vmul.f32	s8, s5, s12
 80069bc:	ee62 4a06 	vmul.f32	s9, s4, s12
 80069c0:	ee21 5a86 	vmul.f32	s10, s3, s12
 80069c4:	ee61 5a06 	vmul.f32	s11, s2, s12
 80069c8:	ee60 6a86 	vmul.f32	s13, s1, s12
 80069cc:	ee20 7a06 	vmul.f32	s14, s0, s12
 80069d0:	ee27 6a86 	vmul.f32	s12, s15, s12
 80069d4:	3b01      	subs	r3, #1
 80069d6:	ee3d da03 	vadd.f32	s26, s26, s6
 80069da:	ee7c ca84 	vadd.f32	s25, s25, s8
 80069de:	eeb0 3a62 	vmov.f32	s6, s5
 80069e2:	ee3c ca24 	vadd.f32	s24, s24, s9
 80069e6:	eef0 2a42 	vmov.f32	s5, s4
 80069ea:	ee7b ba85 	vadd.f32	s23, s23, s10
 80069ee:	eeb0 2a61 	vmov.f32	s4, s3
 80069f2:	ee7a aaa5 	vadd.f32	s21, s21, s11
 80069f6:	eef0 1a41 	vmov.f32	s3, s2
 80069fa:	ee79 9aa6 	vadd.f32	s19, s19, s13
 80069fe:	eeb0 1a60 	vmov.f32	s2, s1
 8006a02:	ee78 8a87 	vadd.f32	s17, s17, s14
 8006a06:	eef0 0a40 	vmov.f32	s1, s0
 8006a0a:	ee73 3a86 	vadd.f32	s7, s7, s12
 8006a0e:	eeb0 0a67 	vmov.f32	s0, s15
 8006a12:	d1cb      	bne.n	80069ac <arm_fir_f32+0x358>
 8006a14:	f1be 0e01 	subs.w	lr, lr, #1
 8006a18:	ed05 da08 	vstr	s26, [r5, #-32]	; 0xffffffe0
 8006a1c:	ed45 ca07 	vstr	s25, [r5, #-28]	; 0xffffffe4
 8006a20:	ed05 ca06 	vstr	s24, [r5, #-24]	; 0xffffffe8
 8006a24:	ed45 ba05 	vstr	s23, [r5, #-20]	; 0xffffffec
 8006a28:	ed45 aa04 	vstr	s21, [r5, #-16]
 8006a2c:	ed45 9a03 	vstr	s19, [r5, #-12]
 8006a30:	ed45 8a02 	vstr	s17, [r5, #-8]
 8006a34:	ed45 3a01 	vstr	s7, [r5, #-4]
 8006a38:	f107 0720 	add.w	r7, r7, #32
 8006a3c:	f106 0620 	add.w	r6, r6, #32
 8006a40:	f104 0420 	add.w	r4, r4, #32
 8006a44:	f105 0520 	add.w	r5, r5, #32
 8006a48:	f47f ae3c 	bne.w	80066c4 <arm_fir_f32+0x70>
 8006a4c:	9b02      	ldr	r3, [sp, #8]
 8006a4e:	9800      	ldr	r0, [sp, #0]
 8006a50:	f8dd c018 	ldr.w	ip, [sp, #24]
 8006a54:	9907      	ldr	r1, [sp, #28]
 8006a56:	015b      	lsls	r3, r3, #5
 8006a58:	4652      	mov	r2, sl
 8006a5a:	4418      	add	r0, r3
 8006a5c:	9000      	str	r0, [sp, #0]
 8006a5e:	4419      	add	r1, r3
 8006a60:	449c      	add	ip, r3
 8006a62:	441a      	add	r2, r3
 8006a64:	9b04      	ldr	r3, [sp, #16]
 8006a66:	f013 0e07 	ands.w	lr, r3, #7
 8006a6a:	d01f      	beq.n	8006aac <arm_fir_f32+0x458>
 8006a6c:	9f00      	ldr	r7, [sp, #0]
 8006a6e:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8006a72:	4676      	mov	r6, lr
 8006a74:	4665      	mov	r5, ip
 8006a76:	f851 3b04 	ldr.w	r3, [r1], #4
 8006a7a:	eddf 6a12 	vldr	s13, [pc, #72]	; 8006ac4 <arm_fir_f32+0x470>
 8006a7e:	f847 3b04 	str.w	r3, [r7], #4
 8006a82:	4644      	mov	r4, r8
 8006a84:	464b      	mov	r3, r9
 8006a86:	4628      	mov	r0, r5
 8006a88:	ecb0 7a01 	vldmia	r0!, {s14}
 8006a8c:	ecf4 7a01 	vldmia	r4!, {s15}
 8006a90:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006a94:	3b01      	subs	r3, #1
 8006a96:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8006a9a:	d1f5      	bne.n	8006a88 <arm_fir_f32+0x434>
 8006a9c:	3e01      	subs	r6, #1
 8006a9e:	ece2 6a01 	vstmia	r2!, {s13}
 8006aa2:	f105 0504 	add.w	r5, r5, #4
 8006aa6:	d1e6      	bne.n	8006a76 <arm_fir_f32+0x422>
 8006aa8:	eb0c 0c8e 	add.w	ip, ip, lr, lsl #2
 8006aac:	9b01      	ldr	r3, [sp, #4]
 8006aae:	1e59      	subs	r1, r3, #1
 8006ab0:	9b03      	ldr	r3, [sp, #12]
 8006ab2:	088e      	lsrs	r6, r1, #2
 8006ab4:	685c      	ldr	r4, [r3, #4]
 8006ab6:	d020      	beq.n	8006afa <arm_fir_f32+0x4a6>
 8006ab8:	f104 0210 	add.w	r2, r4, #16
 8006abc:	f10c 0310 	add.w	r3, ip, #16
 8006ac0:	4630      	mov	r0, r6
 8006ac2:	e001      	b.n	8006ac8 <arm_fir_f32+0x474>
 8006ac4:	00000000 	.word	0x00000000
 8006ac8:	f853 5c10 	ldr.w	r5, [r3, #-16]
 8006acc:	f842 5c10 	str.w	r5, [r2, #-16]
 8006ad0:	f853 5c0c 	ldr.w	r5, [r3, #-12]
 8006ad4:	f842 5c0c 	str.w	r5, [r2, #-12]
 8006ad8:	f853 5c08 	ldr.w	r5, [r3, #-8]
 8006adc:	f842 5c08 	str.w	r5, [r2, #-8]
 8006ae0:	f853 5c04 	ldr.w	r5, [r3, #-4]
 8006ae4:	f842 5c04 	str.w	r5, [r2, #-4]
 8006ae8:	3801      	subs	r0, #1
 8006aea:	f103 0310 	add.w	r3, r3, #16
 8006aee:	f102 0210 	add.w	r2, r2, #16
 8006af2:	d1e9      	bne.n	8006ac8 <arm_fir_f32+0x474>
 8006af4:	0133      	lsls	r3, r6, #4
 8006af6:	441c      	add	r4, r3
 8006af8:	449c      	add	ip, r3
 8006afa:	f011 0303 	ands.w	r3, r1, #3
 8006afe:	d006      	beq.n	8006b0e <arm_fir_f32+0x4ba>
 8006b00:	4622      	mov	r2, r4
 8006b02:	f85c 1b04 	ldr.w	r1, [ip], #4
 8006b06:	f842 1b04 	str.w	r1, [r2], #4
 8006b0a:	3b01      	subs	r3, #1
 8006b0c:	d1f9      	bne.n	8006b02 <arm_fir_f32+0x4ae>
 8006b0e:	b009      	add	sp, #36	; 0x24
 8006b10:	ecbd 8b10 	vpop	{d8-d15}
 8006b14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006b18:	46c3      	mov	fp, r8
 8006b1a:	e745      	b.n	80069a8 <arm_fir_f32+0x354>

08006b1c <__errno>:
 8006b1c:	4b01      	ldr	r3, [pc, #4]	; (8006b24 <__errno+0x8>)
 8006b1e:	6818      	ldr	r0, [r3, #0]
 8006b20:	4770      	bx	lr
 8006b22:	bf00      	nop
 8006b24:	20000010 	.word	0x20000010

08006b28 <__libc_init_array>:
 8006b28:	b570      	push	{r4, r5, r6, lr}
 8006b2a:	4d0d      	ldr	r5, [pc, #52]	; (8006b60 <__libc_init_array+0x38>)
 8006b2c:	4c0d      	ldr	r4, [pc, #52]	; (8006b64 <__libc_init_array+0x3c>)
 8006b2e:	1b64      	subs	r4, r4, r5
 8006b30:	10a4      	asrs	r4, r4, #2
 8006b32:	2600      	movs	r6, #0
 8006b34:	42a6      	cmp	r6, r4
 8006b36:	d109      	bne.n	8006b4c <__libc_init_array+0x24>
 8006b38:	4d0b      	ldr	r5, [pc, #44]	; (8006b68 <__libc_init_array+0x40>)
 8006b3a:	4c0c      	ldr	r4, [pc, #48]	; (8006b6c <__libc_init_array+0x44>)
 8006b3c:	f002 ff66 	bl	8009a0c <_init>
 8006b40:	1b64      	subs	r4, r4, r5
 8006b42:	10a4      	asrs	r4, r4, #2
 8006b44:	2600      	movs	r6, #0
 8006b46:	42a6      	cmp	r6, r4
 8006b48:	d105      	bne.n	8006b56 <__libc_init_array+0x2e>
 8006b4a:	bd70      	pop	{r4, r5, r6, pc}
 8006b4c:	f855 3b04 	ldr.w	r3, [r5], #4
 8006b50:	4798      	blx	r3
 8006b52:	3601      	adds	r6, #1
 8006b54:	e7ee      	b.n	8006b34 <__libc_init_array+0xc>
 8006b56:	f855 3b04 	ldr.w	r3, [r5], #4
 8006b5a:	4798      	blx	r3
 8006b5c:	3601      	adds	r6, #1
 8006b5e:	e7f2      	b.n	8006b46 <__libc_init_array+0x1e>
 8006b60:	08009e54 	.word	0x08009e54
 8006b64:	08009e54 	.word	0x08009e54
 8006b68:	08009e54 	.word	0x08009e54
 8006b6c:	08009e58 	.word	0x08009e58

08006b70 <memset>:
 8006b70:	4402      	add	r2, r0
 8006b72:	4603      	mov	r3, r0
 8006b74:	4293      	cmp	r3, r2
 8006b76:	d100      	bne.n	8006b7a <memset+0xa>
 8006b78:	4770      	bx	lr
 8006b7a:	f803 1b01 	strb.w	r1, [r3], #1
 8006b7e:	e7f9      	b.n	8006b74 <memset+0x4>

08006b80 <__cvt>:
 8006b80:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006b84:	ec55 4b10 	vmov	r4, r5, d0
 8006b88:	2d00      	cmp	r5, #0
 8006b8a:	460e      	mov	r6, r1
 8006b8c:	4619      	mov	r1, r3
 8006b8e:	462b      	mov	r3, r5
 8006b90:	bfbb      	ittet	lt
 8006b92:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8006b96:	461d      	movlt	r5, r3
 8006b98:	2300      	movge	r3, #0
 8006b9a:	232d      	movlt	r3, #45	; 0x2d
 8006b9c:	700b      	strb	r3, [r1, #0]
 8006b9e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006ba0:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8006ba4:	4691      	mov	r9, r2
 8006ba6:	f023 0820 	bic.w	r8, r3, #32
 8006baa:	bfbc      	itt	lt
 8006bac:	4622      	movlt	r2, r4
 8006bae:	4614      	movlt	r4, r2
 8006bb0:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8006bb4:	d005      	beq.n	8006bc2 <__cvt+0x42>
 8006bb6:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8006bba:	d100      	bne.n	8006bbe <__cvt+0x3e>
 8006bbc:	3601      	adds	r6, #1
 8006bbe:	2102      	movs	r1, #2
 8006bc0:	e000      	b.n	8006bc4 <__cvt+0x44>
 8006bc2:	2103      	movs	r1, #3
 8006bc4:	ab03      	add	r3, sp, #12
 8006bc6:	9301      	str	r3, [sp, #4]
 8006bc8:	ab02      	add	r3, sp, #8
 8006bca:	9300      	str	r3, [sp, #0]
 8006bcc:	ec45 4b10 	vmov	d0, r4, r5
 8006bd0:	4653      	mov	r3, sl
 8006bd2:	4632      	mov	r2, r6
 8006bd4:	f000 fd2c 	bl	8007630 <_dtoa_r>
 8006bd8:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8006bdc:	4607      	mov	r7, r0
 8006bde:	d102      	bne.n	8006be6 <__cvt+0x66>
 8006be0:	f019 0f01 	tst.w	r9, #1
 8006be4:	d022      	beq.n	8006c2c <__cvt+0xac>
 8006be6:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8006bea:	eb07 0906 	add.w	r9, r7, r6
 8006bee:	d110      	bne.n	8006c12 <__cvt+0x92>
 8006bf0:	783b      	ldrb	r3, [r7, #0]
 8006bf2:	2b30      	cmp	r3, #48	; 0x30
 8006bf4:	d10a      	bne.n	8006c0c <__cvt+0x8c>
 8006bf6:	2200      	movs	r2, #0
 8006bf8:	2300      	movs	r3, #0
 8006bfa:	4620      	mov	r0, r4
 8006bfc:	4629      	mov	r1, r5
 8006bfe:	f7f9 ff73 	bl	8000ae8 <__aeabi_dcmpeq>
 8006c02:	b918      	cbnz	r0, 8006c0c <__cvt+0x8c>
 8006c04:	f1c6 0601 	rsb	r6, r6, #1
 8006c08:	f8ca 6000 	str.w	r6, [sl]
 8006c0c:	f8da 3000 	ldr.w	r3, [sl]
 8006c10:	4499      	add	r9, r3
 8006c12:	2200      	movs	r2, #0
 8006c14:	2300      	movs	r3, #0
 8006c16:	4620      	mov	r0, r4
 8006c18:	4629      	mov	r1, r5
 8006c1a:	f7f9 ff65 	bl	8000ae8 <__aeabi_dcmpeq>
 8006c1e:	b108      	cbz	r0, 8006c24 <__cvt+0xa4>
 8006c20:	f8cd 900c 	str.w	r9, [sp, #12]
 8006c24:	2230      	movs	r2, #48	; 0x30
 8006c26:	9b03      	ldr	r3, [sp, #12]
 8006c28:	454b      	cmp	r3, r9
 8006c2a:	d307      	bcc.n	8006c3c <__cvt+0xbc>
 8006c2c:	9b03      	ldr	r3, [sp, #12]
 8006c2e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006c30:	1bdb      	subs	r3, r3, r7
 8006c32:	4638      	mov	r0, r7
 8006c34:	6013      	str	r3, [r2, #0]
 8006c36:	b004      	add	sp, #16
 8006c38:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006c3c:	1c59      	adds	r1, r3, #1
 8006c3e:	9103      	str	r1, [sp, #12]
 8006c40:	701a      	strb	r2, [r3, #0]
 8006c42:	e7f0      	b.n	8006c26 <__cvt+0xa6>

08006c44 <__exponent>:
 8006c44:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006c46:	4603      	mov	r3, r0
 8006c48:	2900      	cmp	r1, #0
 8006c4a:	bfb8      	it	lt
 8006c4c:	4249      	neglt	r1, r1
 8006c4e:	f803 2b02 	strb.w	r2, [r3], #2
 8006c52:	bfb4      	ite	lt
 8006c54:	222d      	movlt	r2, #45	; 0x2d
 8006c56:	222b      	movge	r2, #43	; 0x2b
 8006c58:	2909      	cmp	r1, #9
 8006c5a:	7042      	strb	r2, [r0, #1]
 8006c5c:	dd2a      	ble.n	8006cb4 <__exponent+0x70>
 8006c5e:	f10d 0407 	add.w	r4, sp, #7
 8006c62:	46a4      	mov	ip, r4
 8006c64:	270a      	movs	r7, #10
 8006c66:	46a6      	mov	lr, r4
 8006c68:	460a      	mov	r2, r1
 8006c6a:	fb91 f6f7 	sdiv	r6, r1, r7
 8006c6e:	fb07 1516 	mls	r5, r7, r6, r1
 8006c72:	3530      	adds	r5, #48	; 0x30
 8006c74:	2a63      	cmp	r2, #99	; 0x63
 8006c76:	f104 34ff 	add.w	r4, r4, #4294967295
 8006c7a:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8006c7e:	4631      	mov	r1, r6
 8006c80:	dcf1      	bgt.n	8006c66 <__exponent+0x22>
 8006c82:	3130      	adds	r1, #48	; 0x30
 8006c84:	f1ae 0502 	sub.w	r5, lr, #2
 8006c88:	f804 1c01 	strb.w	r1, [r4, #-1]
 8006c8c:	1c44      	adds	r4, r0, #1
 8006c8e:	4629      	mov	r1, r5
 8006c90:	4561      	cmp	r1, ip
 8006c92:	d30a      	bcc.n	8006caa <__exponent+0x66>
 8006c94:	f10d 0209 	add.w	r2, sp, #9
 8006c98:	eba2 020e 	sub.w	r2, r2, lr
 8006c9c:	4565      	cmp	r5, ip
 8006c9e:	bf88      	it	hi
 8006ca0:	2200      	movhi	r2, #0
 8006ca2:	4413      	add	r3, r2
 8006ca4:	1a18      	subs	r0, r3, r0
 8006ca6:	b003      	add	sp, #12
 8006ca8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006caa:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006cae:	f804 2f01 	strb.w	r2, [r4, #1]!
 8006cb2:	e7ed      	b.n	8006c90 <__exponent+0x4c>
 8006cb4:	2330      	movs	r3, #48	; 0x30
 8006cb6:	3130      	adds	r1, #48	; 0x30
 8006cb8:	7083      	strb	r3, [r0, #2]
 8006cba:	70c1      	strb	r1, [r0, #3]
 8006cbc:	1d03      	adds	r3, r0, #4
 8006cbe:	e7f1      	b.n	8006ca4 <__exponent+0x60>

08006cc0 <_printf_float>:
 8006cc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006cc4:	ed2d 8b02 	vpush	{d8}
 8006cc8:	b08d      	sub	sp, #52	; 0x34
 8006cca:	460c      	mov	r4, r1
 8006ccc:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8006cd0:	4616      	mov	r6, r2
 8006cd2:	461f      	mov	r7, r3
 8006cd4:	4605      	mov	r5, r0
 8006cd6:	f001 fa99 	bl	800820c <_localeconv_r>
 8006cda:	f8d0 a000 	ldr.w	sl, [r0]
 8006cde:	4650      	mov	r0, sl
 8006ce0:	f7f9 fa80 	bl	80001e4 <strlen>
 8006ce4:	2300      	movs	r3, #0
 8006ce6:	930a      	str	r3, [sp, #40]	; 0x28
 8006ce8:	6823      	ldr	r3, [r4, #0]
 8006cea:	9305      	str	r3, [sp, #20]
 8006cec:	f8d8 3000 	ldr.w	r3, [r8]
 8006cf0:	f894 b018 	ldrb.w	fp, [r4, #24]
 8006cf4:	3307      	adds	r3, #7
 8006cf6:	f023 0307 	bic.w	r3, r3, #7
 8006cfa:	f103 0208 	add.w	r2, r3, #8
 8006cfe:	f8c8 2000 	str.w	r2, [r8]
 8006d02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d06:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8006d0a:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8006d0e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8006d12:	9307      	str	r3, [sp, #28]
 8006d14:	f8cd 8018 	str.w	r8, [sp, #24]
 8006d18:	ee08 0a10 	vmov	s16, r0
 8006d1c:	4b9f      	ldr	r3, [pc, #636]	; (8006f9c <_printf_float+0x2dc>)
 8006d1e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006d22:	f04f 32ff 	mov.w	r2, #4294967295
 8006d26:	f7f9 ff11 	bl	8000b4c <__aeabi_dcmpun>
 8006d2a:	bb88      	cbnz	r0, 8006d90 <_printf_float+0xd0>
 8006d2c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006d30:	4b9a      	ldr	r3, [pc, #616]	; (8006f9c <_printf_float+0x2dc>)
 8006d32:	f04f 32ff 	mov.w	r2, #4294967295
 8006d36:	f7f9 feeb 	bl	8000b10 <__aeabi_dcmple>
 8006d3a:	bb48      	cbnz	r0, 8006d90 <_printf_float+0xd0>
 8006d3c:	2200      	movs	r2, #0
 8006d3e:	2300      	movs	r3, #0
 8006d40:	4640      	mov	r0, r8
 8006d42:	4649      	mov	r1, r9
 8006d44:	f7f9 feda 	bl	8000afc <__aeabi_dcmplt>
 8006d48:	b110      	cbz	r0, 8006d50 <_printf_float+0x90>
 8006d4a:	232d      	movs	r3, #45	; 0x2d
 8006d4c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006d50:	4b93      	ldr	r3, [pc, #588]	; (8006fa0 <_printf_float+0x2e0>)
 8006d52:	4894      	ldr	r0, [pc, #592]	; (8006fa4 <_printf_float+0x2e4>)
 8006d54:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8006d58:	bf94      	ite	ls
 8006d5a:	4698      	movls	r8, r3
 8006d5c:	4680      	movhi	r8, r0
 8006d5e:	2303      	movs	r3, #3
 8006d60:	6123      	str	r3, [r4, #16]
 8006d62:	9b05      	ldr	r3, [sp, #20]
 8006d64:	f023 0204 	bic.w	r2, r3, #4
 8006d68:	6022      	str	r2, [r4, #0]
 8006d6a:	f04f 0900 	mov.w	r9, #0
 8006d6e:	9700      	str	r7, [sp, #0]
 8006d70:	4633      	mov	r3, r6
 8006d72:	aa0b      	add	r2, sp, #44	; 0x2c
 8006d74:	4621      	mov	r1, r4
 8006d76:	4628      	mov	r0, r5
 8006d78:	f000 f9d8 	bl	800712c <_printf_common>
 8006d7c:	3001      	adds	r0, #1
 8006d7e:	f040 8090 	bne.w	8006ea2 <_printf_float+0x1e2>
 8006d82:	f04f 30ff 	mov.w	r0, #4294967295
 8006d86:	b00d      	add	sp, #52	; 0x34
 8006d88:	ecbd 8b02 	vpop	{d8}
 8006d8c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006d90:	4642      	mov	r2, r8
 8006d92:	464b      	mov	r3, r9
 8006d94:	4640      	mov	r0, r8
 8006d96:	4649      	mov	r1, r9
 8006d98:	f7f9 fed8 	bl	8000b4c <__aeabi_dcmpun>
 8006d9c:	b140      	cbz	r0, 8006db0 <_printf_float+0xf0>
 8006d9e:	464b      	mov	r3, r9
 8006da0:	2b00      	cmp	r3, #0
 8006da2:	bfbc      	itt	lt
 8006da4:	232d      	movlt	r3, #45	; 0x2d
 8006da6:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8006daa:	487f      	ldr	r0, [pc, #508]	; (8006fa8 <_printf_float+0x2e8>)
 8006dac:	4b7f      	ldr	r3, [pc, #508]	; (8006fac <_printf_float+0x2ec>)
 8006dae:	e7d1      	b.n	8006d54 <_printf_float+0x94>
 8006db0:	6863      	ldr	r3, [r4, #4]
 8006db2:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8006db6:	9206      	str	r2, [sp, #24]
 8006db8:	1c5a      	adds	r2, r3, #1
 8006dba:	d13f      	bne.n	8006e3c <_printf_float+0x17c>
 8006dbc:	2306      	movs	r3, #6
 8006dbe:	6063      	str	r3, [r4, #4]
 8006dc0:	9b05      	ldr	r3, [sp, #20]
 8006dc2:	6861      	ldr	r1, [r4, #4]
 8006dc4:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8006dc8:	2300      	movs	r3, #0
 8006dca:	9303      	str	r3, [sp, #12]
 8006dcc:	ab0a      	add	r3, sp, #40	; 0x28
 8006dce:	e9cd b301 	strd	fp, r3, [sp, #4]
 8006dd2:	ab09      	add	r3, sp, #36	; 0x24
 8006dd4:	ec49 8b10 	vmov	d0, r8, r9
 8006dd8:	9300      	str	r3, [sp, #0]
 8006dda:	6022      	str	r2, [r4, #0]
 8006ddc:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8006de0:	4628      	mov	r0, r5
 8006de2:	f7ff fecd 	bl	8006b80 <__cvt>
 8006de6:	9b06      	ldr	r3, [sp, #24]
 8006de8:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006dea:	2b47      	cmp	r3, #71	; 0x47
 8006dec:	4680      	mov	r8, r0
 8006dee:	d108      	bne.n	8006e02 <_printf_float+0x142>
 8006df0:	1cc8      	adds	r0, r1, #3
 8006df2:	db02      	blt.n	8006dfa <_printf_float+0x13a>
 8006df4:	6863      	ldr	r3, [r4, #4]
 8006df6:	4299      	cmp	r1, r3
 8006df8:	dd41      	ble.n	8006e7e <_printf_float+0x1be>
 8006dfa:	f1ab 0b02 	sub.w	fp, fp, #2
 8006dfe:	fa5f fb8b 	uxtb.w	fp, fp
 8006e02:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8006e06:	d820      	bhi.n	8006e4a <_printf_float+0x18a>
 8006e08:	3901      	subs	r1, #1
 8006e0a:	465a      	mov	r2, fp
 8006e0c:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8006e10:	9109      	str	r1, [sp, #36]	; 0x24
 8006e12:	f7ff ff17 	bl	8006c44 <__exponent>
 8006e16:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006e18:	1813      	adds	r3, r2, r0
 8006e1a:	2a01      	cmp	r2, #1
 8006e1c:	4681      	mov	r9, r0
 8006e1e:	6123      	str	r3, [r4, #16]
 8006e20:	dc02      	bgt.n	8006e28 <_printf_float+0x168>
 8006e22:	6822      	ldr	r2, [r4, #0]
 8006e24:	07d2      	lsls	r2, r2, #31
 8006e26:	d501      	bpl.n	8006e2c <_printf_float+0x16c>
 8006e28:	3301      	adds	r3, #1
 8006e2a:	6123      	str	r3, [r4, #16]
 8006e2c:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8006e30:	2b00      	cmp	r3, #0
 8006e32:	d09c      	beq.n	8006d6e <_printf_float+0xae>
 8006e34:	232d      	movs	r3, #45	; 0x2d
 8006e36:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006e3a:	e798      	b.n	8006d6e <_printf_float+0xae>
 8006e3c:	9a06      	ldr	r2, [sp, #24]
 8006e3e:	2a47      	cmp	r2, #71	; 0x47
 8006e40:	d1be      	bne.n	8006dc0 <_printf_float+0x100>
 8006e42:	2b00      	cmp	r3, #0
 8006e44:	d1bc      	bne.n	8006dc0 <_printf_float+0x100>
 8006e46:	2301      	movs	r3, #1
 8006e48:	e7b9      	b.n	8006dbe <_printf_float+0xfe>
 8006e4a:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8006e4e:	d118      	bne.n	8006e82 <_printf_float+0x1c2>
 8006e50:	2900      	cmp	r1, #0
 8006e52:	6863      	ldr	r3, [r4, #4]
 8006e54:	dd0b      	ble.n	8006e6e <_printf_float+0x1ae>
 8006e56:	6121      	str	r1, [r4, #16]
 8006e58:	b913      	cbnz	r3, 8006e60 <_printf_float+0x1a0>
 8006e5a:	6822      	ldr	r2, [r4, #0]
 8006e5c:	07d0      	lsls	r0, r2, #31
 8006e5e:	d502      	bpl.n	8006e66 <_printf_float+0x1a6>
 8006e60:	3301      	adds	r3, #1
 8006e62:	440b      	add	r3, r1
 8006e64:	6123      	str	r3, [r4, #16]
 8006e66:	65a1      	str	r1, [r4, #88]	; 0x58
 8006e68:	f04f 0900 	mov.w	r9, #0
 8006e6c:	e7de      	b.n	8006e2c <_printf_float+0x16c>
 8006e6e:	b913      	cbnz	r3, 8006e76 <_printf_float+0x1b6>
 8006e70:	6822      	ldr	r2, [r4, #0]
 8006e72:	07d2      	lsls	r2, r2, #31
 8006e74:	d501      	bpl.n	8006e7a <_printf_float+0x1ba>
 8006e76:	3302      	adds	r3, #2
 8006e78:	e7f4      	b.n	8006e64 <_printf_float+0x1a4>
 8006e7a:	2301      	movs	r3, #1
 8006e7c:	e7f2      	b.n	8006e64 <_printf_float+0x1a4>
 8006e7e:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8006e82:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006e84:	4299      	cmp	r1, r3
 8006e86:	db05      	blt.n	8006e94 <_printf_float+0x1d4>
 8006e88:	6823      	ldr	r3, [r4, #0]
 8006e8a:	6121      	str	r1, [r4, #16]
 8006e8c:	07d8      	lsls	r0, r3, #31
 8006e8e:	d5ea      	bpl.n	8006e66 <_printf_float+0x1a6>
 8006e90:	1c4b      	adds	r3, r1, #1
 8006e92:	e7e7      	b.n	8006e64 <_printf_float+0x1a4>
 8006e94:	2900      	cmp	r1, #0
 8006e96:	bfd4      	ite	le
 8006e98:	f1c1 0202 	rsble	r2, r1, #2
 8006e9c:	2201      	movgt	r2, #1
 8006e9e:	4413      	add	r3, r2
 8006ea0:	e7e0      	b.n	8006e64 <_printf_float+0x1a4>
 8006ea2:	6823      	ldr	r3, [r4, #0]
 8006ea4:	055a      	lsls	r2, r3, #21
 8006ea6:	d407      	bmi.n	8006eb8 <_printf_float+0x1f8>
 8006ea8:	6923      	ldr	r3, [r4, #16]
 8006eaa:	4642      	mov	r2, r8
 8006eac:	4631      	mov	r1, r6
 8006eae:	4628      	mov	r0, r5
 8006eb0:	47b8      	blx	r7
 8006eb2:	3001      	adds	r0, #1
 8006eb4:	d12c      	bne.n	8006f10 <_printf_float+0x250>
 8006eb6:	e764      	b.n	8006d82 <_printf_float+0xc2>
 8006eb8:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8006ebc:	f240 80e0 	bls.w	8007080 <_printf_float+0x3c0>
 8006ec0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006ec4:	2200      	movs	r2, #0
 8006ec6:	2300      	movs	r3, #0
 8006ec8:	f7f9 fe0e 	bl	8000ae8 <__aeabi_dcmpeq>
 8006ecc:	2800      	cmp	r0, #0
 8006ece:	d034      	beq.n	8006f3a <_printf_float+0x27a>
 8006ed0:	4a37      	ldr	r2, [pc, #220]	; (8006fb0 <_printf_float+0x2f0>)
 8006ed2:	2301      	movs	r3, #1
 8006ed4:	4631      	mov	r1, r6
 8006ed6:	4628      	mov	r0, r5
 8006ed8:	47b8      	blx	r7
 8006eda:	3001      	adds	r0, #1
 8006edc:	f43f af51 	beq.w	8006d82 <_printf_float+0xc2>
 8006ee0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006ee4:	429a      	cmp	r2, r3
 8006ee6:	db02      	blt.n	8006eee <_printf_float+0x22e>
 8006ee8:	6823      	ldr	r3, [r4, #0]
 8006eea:	07d8      	lsls	r0, r3, #31
 8006eec:	d510      	bpl.n	8006f10 <_printf_float+0x250>
 8006eee:	ee18 3a10 	vmov	r3, s16
 8006ef2:	4652      	mov	r2, sl
 8006ef4:	4631      	mov	r1, r6
 8006ef6:	4628      	mov	r0, r5
 8006ef8:	47b8      	blx	r7
 8006efa:	3001      	adds	r0, #1
 8006efc:	f43f af41 	beq.w	8006d82 <_printf_float+0xc2>
 8006f00:	f04f 0800 	mov.w	r8, #0
 8006f04:	f104 091a 	add.w	r9, r4, #26
 8006f08:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006f0a:	3b01      	subs	r3, #1
 8006f0c:	4543      	cmp	r3, r8
 8006f0e:	dc09      	bgt.n	8006f24 <_printf_float+0x264>
 8006f10:	6823      	ldr	r3, [r4, #0]
 8006f12:	079b      	lsls	r3, r3, #30
 8006f14:	f100 8105 	bmi.w	8007122 <_printf_float+0x462>
 8006f18:	68e0      	ldr	r0, [r4, #12]
 8006f1a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006f1c:	4298      	cmp	r0, r3
 8006f1e:	bfb8      	it	lt
 8006f20:	4618      	movlt	r0, r3
 8006f22:	e730      	b.n	8006d86 <_printf_float+0xc6>
 8006f24:	2301      	movs	r3, #1
 8006f26:	464a      	mov	r2, r9
 8006f28:	4631      	mov	r1, r6
 8006f2a:	4628      	mov	r0, r5
 8006f2c:	47b8      	blx	r7
 8006f2e:	3001      	adds	r0, #1
 8006f30:	f43f af27 	beq.w	8006d82 <_printf_float+0xc2>
 8006f34:	f108 0801 	add.w	r8, r8, #1
 8006f38:	e7e6      	b.n	8006f08 <_printf_float+0x248>
 8006f3a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006f3c:	2b00      	cmp	r3, #0
 8006f3e:	dc39      	bgt.n	8006fb4 <_printf_float+0x2f4>
 8006f40:	4a1b      	ldr	r2, [pc, #108]	; (8006fb0 <_printf_float+0x2f0>)
 8006f42:	2301      	movs	r3, #1
 8006f44:	4631      	mov	r1, r6
 8006f46:	4628      	mov	r0, r5
 8006f48:	47b8      	blx	r7
 8006f4a:	3001      	adds	r0, #1
 8006f4c:	f43f af19 	beq.w	8006d82 <_printf_float+0xc2>
 8006f50:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006f54:	4313      	orrs	r3, r2
 8006f56:	d102      	bne.n	8006f5e <_printf_float+0x29e>
 8006f58:	6823      	ldr	r3, [r4, #0]
 8006f5a:	07d9      	lsls	r1, r3, #31
 8006f5c:	d5d8      	bpl.n	8006f10 <_printf_float+0x250>
 8006f5e:	ee18 3a10 	vmov	r3, s16
 8006f62:	4652      	mov	r2, sl
 8006f64:	4631      	mov	r1, r6
 8006f66:	4628      	mov	r0, r5
 8006f68:	47b8      	blx	r7
 8006f6a:	3001      	adds	r0, #1
 8006f6c:	f43f af09 	beq.w	8006d82 <_printf_float+0xc2>
 8006f70:	f04f 0900 	mov.w	r9, #0
 8006f74:	f104 0a1a 	add.w	sl, r4, #26
 8006f78:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006f7a:	425b      	negs	r3, r3
 8006f7c:	454b      	cmp	r3, r9
 8006f7e:	dc01      	bgt.n	8006f84 <_printf_float+0x2c4>
 8006f80:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006f82:	e792      	b.n	8006eaa <_printf_float+0x1ea>
 8006f84:	2301      	movs	r3, #1
 8006f86:	4652      	mov	r2, sl
 8006f88:	4631      	mov	r1, r6
 8006f8a:	4628      	mov	r0, r5
 8006f8c:	47b8      	blx	r7
 8006f8e:	3001      	adds	r0, #1
 8006f90:	f43f aef7 	beq.w	8006d82 <_printf_float+0xc2>
 8006f94:	f109 0901 	add.w	r9, r9, #1
 8006f98:	e7ee      	b.n	8006f78 <_printf_float+0x2b8>
 8006f9a:	bf00      	nop
 8006f9c:	7fefffff 	.word	0x7fefffff
 8006fa0:	08009a74 	.word	0x08009a74
 8006fa4:	08009a78 	.word	0x08009a78
 8006fa8:	08009a80 	.word	0x08009a80
 8006fac:	08009a7c 	.word	0x08009a7c
 8006fb0:	08009a84 	.word	0x08009a84
 8006fb4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006fb6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006fb8:	429a      	cmp	r2, r3
 8006fba:	bfa8      	it	ge
 8006fbc:	461a      	movge	r2, r3
 8006fbe:	2a00      	cmp	r2, #0
 8006fc0:	4691      	mov	r9, r2
 8006fc2:	dc37      	bgt.n	8007034 <_printf_float+0x374>
 8006fc4:	f04f 0b00 	mov.w	fp, #0
 8006fc8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006fcc:	f104 021a 	add.w	r2, r4, #26
 8006fd0:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006fd2:	9305      	str	r3, [sp, #20]
 8006fd4:	eba3 0309 	sub.w	r3, r3, r9
 8006fd8:	455b      	cmp	r3, fp
 8006fda:	dc33      	bgt.n	8007044 <_printf_float+0x384>
 8006fdc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006fe0:	429a      	cmp	r2, r3
 8006fe2:	db3b      	blt.n	800705c <_printf_float+0x39c>
 8006fe4:	6823      	ldr	r3, [r4, #0]
 8006fe6:	07da      	lsls	r2, r3, #31
 8006fe8:	d438      	bmi.n	800705c <_printf_float+0x39c>
 8006fea:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006fec:	9a05      	ldr	r2, [sp, #20]
 8006fee:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006ff0:	1a9a      	subs	r2, r3, r2
 8006ff2:	eba3 0901 	sub.w	r9, r3, r1
 8006ff6:	4591      	cmp	r9, r2
 8006ff8:	bfa8      	it	ge
 8006ffa:	4691      	movge	r9, r2
 8006ffc:	f1b9 0f00 	cmp.w	r9, #0
 8007000:	dc35      	bgt.n	800706e <_printf_float+0x3ae>
 8007002:	f04f 0800 	mov.w	r8, #0
 8007006:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800700a:	f104 0a1a 	add.w	sl, r4, #26
 800700e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007012:	1a9b      	subs	r3, r3, r2
 8007014:	eba3 0309 	sub.w	r3, r3, r9
 8007018:	4543      	cmp	r3, r8
 800701a:	f77f af79 	ble.w	8006f10 <_printf_float+0x250>
 800701e:	2301      	movs	r3, #1
 8007020:	4652      	mov	r2, sl
 8007022:	4631      	mov	r1, r6
 8007024:	4628      	mov	r0, r5
 8007026:	47b8      	blx	r7
 8007028:	3001      	adds	r0, #1
 800702a:	f43f aeaa 	beq.w	8006d82 <_printf_float+0xc2>
 800702e:	f108 0801 	add.w	r8, r8, #1
 8007032:	e7ec      	b.n	800700e <_printf_float+0x34e>
 8007034:	4613      	mov	r3, r2
 8007036:	4631      	mov	r1, r6
 8007038:	4642      	mov	r2, r8
 800703a:	4628      	mov	r0, r5
 800703c:	47b8      	blx	r7
 800703e:	3001      	adds	r0, #1
 8007040:	d1c0      	bne.n	8006fc4 <_printf_float+0x304>
 8007042:	e69e      	b.n	8006d82 <_printf_float+0xc2>
 8007044:	2301      	movs	r3, #1
 8007046:	4631      	mov	r1, r6
 8007048:	4628      	mov	r0, r5
 800704a:	9205      	str	r2, [sp, #20]
 800704c:	47b8      	blx	r7
 800704e:	3001      	adds	r0, #1
 8007050:	f43f ae97 	beq.w	8006d82 <_printf_float+0xc2>
 8007054:	9a05      	ldr	r2, [sp, #20]
 8007056:	f10b 0b01 	add.w	fp, fp, #1
 800705a:	e7b9      	b.n	8006fd0 <_printf_float+0x310>
 800705c:	ee18 3a10 	vmov	r3, s16
 8007060:	4652      	mov	r2, sl
 8007062:	4631      	mov	r1, r6
 8007064:	4628      	mov	r0, r5
 8007066:	47b8      	blx	r7
 8007068:	3001      	adds	r0, #1
 800706a:	d1be      	bne.n	8006fea <_printf_float+0x32a>
 800706c:	e689      	b.n	8006d82 <_printf_float+0xc2>
 800706e:	9a05      	ldr	r2, [sp, #20]
 8007070:	464b      	mov	r3, r9
 8007072:	4442      	add	r2, r8
 8007074:	4631      	mov	r1, r6
 8007076:	4628      	mov	r0, r5
 8007078:	47b8      	blx	r7
 800707a:	3001      	adds	r0, #1
 800707c:	d1c1      	bne.n	8007002 <_printf_float+0x342>
 800707e:	e680      	b.n	8006d82 <_printf_float+0xc2>
 8007080:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007082:	2a01      	cmp	r2, #1
 8007084:	dc01      	bgt.n	800708a <_printf_float+0x3ca>
 8007086:	07db      	lsls	r3, r3, #31
 8007088:	d538      	bpl.n	80070fc <_printf_float+0x43c>
 800708a:	2301      	movs	r3, #1
 800708c:	4642      	mov	r2, r8
 800708e:	4631      	mov	r1, r6
 8007090:	4628      	mov	r0, r5
 8007092:	47b8      	blx	r7
 8007094:	3001      	adds	r0, #1
 8007096:	f43f ae74 	beq.w	8006d82 <_printf_float+0xc2>
 800709a:	ee18 3a10 	vmov	r3, s16
 800709e:	4652      	mov	r2, sl
 80070a0:	4631      	mov	r1, r6
 80070a2:	4628      	mov	r0, r5
 80070a4:	47b8      	blx	r7
 80070a6:	3001      	adds	r0, #1
 80070a8:	f43f ae6b 	beq.w	8006d82 <_printf_float+0xc2>
 80070ac:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80070b0:	2200      	movs	r2, #0
 80070b2:	2300      	movs	r3, #0
 80070b4:	f7f9 fd18 	bl	8000ae8 <__aeabi_dcmpeq>
 80070b8:	b9d8      	cbnz	r0, 80070f2 <_printf_float+0x432>
 80070ba:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80070bc:	f108 0201 	add.w	r2, r8, #1
 80070c0:	3b01      	subs	r3, #1
 80070c2:	4631      	mov	r1, r6
 80070c4:	4628      	mov	r0, r5
 80070c6:	47b8      	blx	r7
 80070c8:	3001      	adds	r0, #1
 80070ca:	d10e      	bne.n	80070ea <_printf_float+0x42a>
 80070cc:	e659      	b.n	8006d82 <_printf_float+0xc2>
 80070ce:	2301      	movs	r3, #1
 80070d0:	4652      	mov	r2, sl
 80070d2:	4631      	mov	r1, r6
 80070d4:	4628      	mov	r0, r5
 80070d6:	47b8      	blx	r7
 80070d8:	3001      	adds	r0, #1
 80070da:	f43f ae52 	beq.w	8006d82 <_printf_float+0xc2>
 80070de:	f108 0801 	add.w	r8, r8, #1
 80070e2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80070e4:	3b01      	subs	r3, #1
 80070e6:	4543      	cmp	r3, r8
 80070e8:	dcf1      	bgt.n	80070ce <_printf_float+0x40e>
 80070ea:	464b      	mov	r3, r9
 80070ec:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80070f0:	e6dc      	b.n	8006eac <_printf_float+0x1ec>
 80070f2:	f04f 0800 	mov.w	r8, #0
 80070f6:	f104 0a1a 	add.w	sl, r4, #26
 80070fa:	e7f2      	b.n	80070e2 <_printf_float+0x422>
 80070fc:	2301      	movs	r3, #1
 80070fe:	4642      	mov	r2, r8
 8007100:	e7df      	b.n	80070c2 <_printf_float+0x402>
 8007102:	2301      	movs	r3, #1
 8007104:	464a      	mov	r2, r9
 8007106:	4631      	mov	r1, r6
 8007108:	4628      	mov	r0, r5
 800710a:	47b8      	blx	r7
 800710c:	3001      	adds	r0, #1
 800710e:	f43f ae38 	beq.w	8006d82 <_printf_float+0xc2>
 8007112:	f108 0801 	add.w	r8, r8, #1
 8007116:	68e3      	ldr	r3, [r4, #12]
 8007118:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800711a:	1a5b      	subs	r3, r3, r1
 800711c:	4543      	cmp	r3, r8
 800711e:	dcf0      	bgt.n	8007102 <_printf_float+0x442>
 8007120:	e6fa      	b.n	8006f18 <_printf_float+0x258>
 8007122:	f04f 0800 	mov.w	r8, #0
 8007126:	f104 0919 	add.w	r9, r4, #25
 800712a:	e7f4      	b.n	8007116 <_printf_float+0x456>

0800712c <_printf_common>:
 800712c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007130:	4616      	mov	r6, r2
 8007132:	4699      	mov	r9, r3
 8007134:	688a      	ldr	r2, [r1, #8]
 8007136:	690b      	ldr	r3, [r1, #16]
 8007138:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800713c:	4293      	cmp	r3, r2
 800713e:	bfb8      	it	lt
 8007140:	4613      	movlt	r3, r2
 8007142:	6033      	str	r3, [r6, #0]
 8007144:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007148:	4607      	mov	r7, r0
 800714a:	460c      	mov	r4, r1
 800714c:	b10a      	cbz	r2, 8007152 <_printf_common+0x26>
 800714e:	3301      	adds	r3, #1
 8007150:	6033      	str	r3, [r6, #0]
 8007152:	6823      	ldr	r3, [r4, #0]
 8007154:	0699      	lsls	r1, r3, #26
 8007156:	bf42      	ittt	mi
 8007158:	6833      	ldrmi	r3, [r6, #0]
 800715a:	3302      	addmi	r3, #2
 800715c:	6033      	strmi	r3, [r6, #0]
 800715e:	6825      	ldr	r5, [r4, #0]
 8007160:	f015 0506 	ands.w	r5, r5, #6
 8007164:	d106      	bne.n	8007174 <_printf_common+0x48>
 8007166:	f104 0a19 	add.w	sl, r4, #25
 800716a:	68e3      	ldr	r3, [r4, #12]
 800716c:	6832      	ldr	r2, [r6, #0]
 800716e:	1a9b      	subs	r3, r3, r2
 8007170:	42ab      	cmp	r3, r5
 8007172:	dc26      	bgt.n	80071c2 <_printf_common+0x96>
 8007174:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007178:	1e13      	subs	r3, r2, #0
 800717a:	6822      	ldr	r2, [r4, #0]
 800717c:	bf18      	it	ne
 800717e:	2301      	movne	r3, #1
 8007180:	0692      	lsls	r2, r2, #26
 8007182:	d42b      	bmi.n	80071dc <_printf_common+0xb0>
 8007184:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007188:	4649      	mov	r1, r9
 800718a:	4638      	mov	r0, r7
 800718c:	47c0      	blx	r8
 800718e:	3001      	adds	r0, #1
 8007190:	d01e      	beq.n	80071d0 <_printf_common+0xa4>
 8007192:	6823      	ldr	r3, [r4, #0]
 8007194:	68e5      	ldr	r5, [r4, #12]
 8007196:	6832      	ldr	r2, [r6, #0]
 8007198:	f003 0306 	and.w	r3, r3, #6
 800719c:	2b04      	cmp	r3, #4
 800719e:	bf08      	it	eq
 80071a0:	1aad      	subeq	r5, r5, r2
 80071a2:	68a3      	ldr	r3, [r4, #8]
 80071a4:	6922      	ldr	r2, [r4, #16]
 80071a6:	bf0c      	ite	eq
 80071a8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80071ac:	2500      	movne	r5, #0
 80071ae:	4293      	cmp	r3, r2
 80071b0:	bfc4      	itt	gt
 80071b2:	1a9b      	subgt	r3, r3, r2
 80071b4:	18ed      	addgt	r5, r5, r3
 80071b6:	2600      	movs	r6, #0
 80071b8:	341a      	adds	r4, #26
 80071ba:	42b5      	cmp	r5, r6
 80071bc:	d11a      	bne.n	80071f4 <_printf_common+0xc8>
 80071be:	2000      	movs	r0, #0
 80071c0:	e008      	b.n	80071d4 <_printf_common+0xa8>
 80071c2:	2301      	movs	r3, #1
 80071c4:	4652      	mov	r2, sl
 80071c6:	4649      	mov	r1, r9
 80071c8:	4638      	mov	r0, r7
 80071ca:	47c0      	blx	r8
 80071cc:	3001      	adds	r0, #1
 80071ce:	d103      	bne.n	80071d8 <_printf_common+0xac>
 80071d0:	f04f 30ff 	mov.w	r0, #4294967295
 80071d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80071d8:	3501      	adds	r5, #1
 80071da:	e7c6      	b.n	800716a <_printf_common+0x3e>
 80071dc:	18e1      	adds	r1, r4, r3
 80071de:	1c5a      	adds	r2, r3, #1
 80071e0:	2030      	movs	r0, #48	; 0x30
 80071e2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80071e6:	4422      	add	r2, r4
 80071e8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80071ec:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80071f0:	3302      	adds	r3, #2
 80071f2:	e7c7      	b.n	8007184 <_printf_common+0x58>
 80071f4:	2301      	movs	r3, #1
 80071f6:	4622      	mov	r2, r4
 80071f8:	4649      	mov	r1, r9
 80071fa:	4638      	mov	r0, r7
 80071fc:	47c0      	blx	r8
 80071fe:	3001      	adds	r0, #1
 8007200:	d0e6      	beq.n	80071d0 <_printf_common+0xa4>
 8007202:	3601      	adds	r6, #1
 8007204:	e7d9      	b.n	80071ba <_printf_common+0x8e>
	...

08007208 <_printf_i>:
 8007208:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800720c:	7e0f      	ldrb	r7, [r1, #24]
 800720e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007210:	2f78      	cmp	r7, #120	; 0x78
 8007212:	4691      	mov	r9, r2
 8007214:	4680      	mov	r8, r0
 8007216:	460c      	mov	r4, r1
 8007218:	469a      	mov	sl, r3
 800721a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800721e:	d807      	bhi.n	8007230 <_printf_i+0x28>
 8007220:	2f62      	cmp	r7, #98	; 0x62
 8007222:	d80a      	bhi.n	800723a <_printf_i+0x32>
 8007224:	2f00      	cmp	r7, #0
 8007226:	f000 80d8 	beq.w	80073da <_printf_i+0x1d2>
 800722a:	2f58      	cmp	r7, #88	; 0x58
 800722c:	f000 80a3 	beq.w	8007376 <_printf_i+0x16e>
 8007230:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007234:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007238:	e03a      	b.n	80072b0 <_printf_i+0xa8>
 800723a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800723e:	2b15      	cmp	r3, #21
 8007240:	d8f6      	bhi.n	8007230 <_printf_i+0x28>
 8007242:	a101      	add	r1, pc, #4	; (adr r1, 8007248 <_printf_i+0x40>)
 8007244:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007248:	080072a1 	.word	0x080072a1
 800724c:	080072b5 	.word	0x080072b5
 8007250:	08007231 	.word	0x08007231
 8007254:	08007231 	.word	0x08007231
 8007258:	08007231 	.word	0x08007231
 800725c:	08007231 	.word	0x08007231
 8007260:	080072b5 	.word	0x080072b5
 8007264:	08007231 	.word	0x08007231
 8007268:	08007231 	.word	0x08007231
 800726c:	08007231 	.word	0x08007231
 8007270:	08007231 	.word	0x08007231
 8007274:	080073c1 	.word	0x080073c1
 8007278:	080072e5 	.word	0x080072e5
 800727c:	080073a3 	.word	0x080073a3
 8007280:	08007231 	.word	0x08007231
 8007284:	08007231 	.word	0x08007231
 8007288:	080073e3 	.word	0x080073e3
 800728c:	08007231 	.word	0x08007231
 8007290:	080072e5 	.word	0x080072e5
 8007294:	08007231 	.word	0x08007231
 8007298:	08007231 	.word	0x08007231
 800729c:	080073ab 	.word	0x080073ab
 80072a0:	682b      	ldr	r3, [r5, #0]
 80072a2:	1d1a      	adds	r2, r3, #4
 80072a4:	681b      	ldr	r3, [r3, #0]
 80072a6:	602a      	str	r2, [r5, #0]
 80072a8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80072ac:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80072b0:	2301      	movs	r3, #1
 80072b2:	e0a3      	b.n	80073fc <_printf_i+0x1f4>
 80072b4:	6820      	ldr	r0, [r4, #0]
 80072b6:	6829      	ldr	r1, [r5, #0]
 80072b8:	0606      	lsls	r6, r0, #24
 80072ba:	f101 0304 	add.w	r3, r1, #4
 80072be:	d50a      	bpl.n	80072d6 <_printf_i+0xce>
 80072c0:	680e      	ldr	r6, [r1, #0]
 80072c2:	602b      	str	r3, [r5, #0]
 80072c4:	2e00      	cmp	r6, #0
 80072c6:	da03      	bge.n	80072d0 <_printf_i+0xc8>
 80072c8:	232d      	movs	r3, #45	; 0x2d
 80072ca:	4276      	negs	r6, r6
 80072cc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80072d0:	485e      	ldr	r0, [pc, #376]	; (800744c <_printf_i+0x244>)
 80072d2:	230a      	movs	r3, #10
 80072d4:	e019      	b.n	800730a <_printf_i+0x102>
 80072d6:	680e      	ldr	r6, [r1, #0]
 80072d8:	602b      	str	r3, [r5, #0]
 80072da:	f010 0f40 	tst.w	r0, #64	; 0x40
 80072de:	bf18      	it	ne
 80072e0:	b236      	sxthne	r6, r6
 80072e2:	e7ef      	b.n	80072c4 <_printf_i+0xbc>
 80072e4:	682b      	ldr	r3, [r5, #0]
 80072e6:	6820      	ldr	r0, [r4, #0]
 80072e8:	1d19      	adds	r1, r3, #4
 80072ea:	6029      	str	r1, [r5, #0]
 80072ec:	0601      	lsls	r1, r0, #24
 80072ee:	d501      	bpl.n	80072f4 <_printf_i+0xec>
 80072f0:	681e      	ldr	r6, [r3, #0]
 80072f2:	e002      	b.n	80072fa <_printf_i+0xf2>
 80072f4:	0646      	lsls	r6, r0, #25
 80072f6:	d5fb      	bpl.n	80072f0 <_printf_i+0xe8>
 80072f8:	881e      	ldrh	r6, [r3, #0]
 80072fa:	4854      	ldr	r0, [pc, #336]	; (800744c <_printf_i+0x244>)
 80072fc:	2f6f      	cmp	r7, #111	; 0x6f
 80072fe:	bf0c      	ite	eq
 8007300:	2308      	moveq	r3, #8
 8007302:	230a      	movne	r3, #10
 8007304:	2100      	movs	r1, #0
 8007306:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800730a:	6865      	ldr	r5, [r4, #4]
 800730c:	60a5      	str	r5, [r4, #8]
 800730e:	2d00      	cmp	r5, #0
 8007310:	bfa2      	ittt	ge
 8007312:	6821      	ldrge	r1, [r4, #0]
 8007314:	f021 0104 	bicge.w	r1, r1, #4
 8007318:	6021      	strge	r1, [r4, #0]
 800731a:	b90e      	cbnz	r6, 8007320 <_printf_i+0x118>
 800731c:	2d00      	cmp	r5, #0
 800731e:	d04d      	beq.n	80073bc <_printf_i+0x1b4>
 8007320:	4615      	mov	r5, r2
 8007322:	fbb6 f1f3 	udiv	r1, r6, r3
 8007326:	fb03 6711 	mls	r7, r3, r1, r6
 800732a:	5dc7      	ldrb	r7, [r0, r7]
 800732c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8007330:	4637      	mov	r7, r6
 8007332:	42bb      	cmp	r3, r7
 8007334:	460e      	mov	r6, r1
 8007336:	d9f4      	bls.n	8007322 <_printf_i+0x11a>
 8007338:	2b08      	cmp	r3, #8
 800733a:	d10b      	bne.n	8007354 <_printf_i+0x14c>
 800733c:	6823      	ldr	r3, [r4, #0]
 800733e:	07de      	lsls	r6, r3, #31
 8007340:	d508      	bpl.n	8007354 <_printf_i+0x14c>
 8007342:	6923      	ldr	r3, [r4, #16]
 8007344:	6861      	ldr	r1, [r4, #4]
 8007346:	4299      	cmp	r1, r3
 8007348:	bfde      	ittt	le
 800734a:	2330      	movle	r3, #48	; 0x30
 800734c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007350:	f105 35ff 	addle.w	r5, r5, #4294967295
 8007354:	1b52      	subs	r2, r2, r5
 8007356:	6122      	str	r2, [r4, #16]
 8007358:	f8cd a000 	str.w	sl, [sp]
 800735c:	464b      	mov	r3, r9
 800735e:	aa03      	add	r2, sp, #12
 8007360:	4621      	mov	r1, r4
 8007362:	4640      	mov	r0, r8
 8007364:	f7ff fee2 	bl	800712c <_printf_common>
 8007368:	3001      	adds	r0, #1
 800736a:	d14c      	bne.n	8007406 <_printf_i+0x1fe>
 800736c:	f04f 30ff 	mov.w	r0, #4294967295
 8007370:	b004      	add	sp, #16
 8007372:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007376:	4835      	ldr	r0, [pc, #212]	; (800744c <_printf_i+0x244>)
 8007378:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800737c:	6829      	ldr	r1, [r5, #0]
 800737e:	6823      	ldr	r3, [r4, #0]
 8007380:	f851 6b04 	ldr.w	r6, [r1], #4
 8007384:	6029      	str	r1, [r5, #0]
 8007386:	061d      	lsls	r5, r3, #24
 8007388:	d514      	bpl.n	80073b4 <_printf_i+0x1ac>
 800738a:	07df      	lsls	r7, r3, #31
 800738c:	bf44      	itt	mi
 800738e:	f043 0320 	orrmi.w	r3, r3, #32
 8007392:	6023      	strmi	r3, [r4, #0]
 8007394:	b91e      	cbnz	r6, 800739e <_printf_i+0x196>
 8007396:	6823      	ldr	r3, [r4, #0]
 8007398:	f023 0320 	bic.w	r3, r3, #32
 800739c:	6023      	str	r3, [r4, #0]
 800739e:	2310      	movs	r3, #16
 80073a0:	e7b0      	b.n	8007304 <_printf_i+0xfc>
 80073a2:	6823      	ldr	r3, [r4, #0]
 80073a4:	f043 0320 	orr.w	r3, r3, #32
 80073a8:	6023      	str	r3, [r4, #0]
 80073aa:	2378      	movs	r3, #120	; 0x78
 80073ac:	4828      	ldr	r0, [pc, #160]	; (8007450 <_printf_i+0x248>)
 80073ae:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80073b2:	e7e3      	b.n	800737c <_printf_i+0x174>
 80073b4:	0659      	lsls	r1, r3, #25
 80073b6:	bf48      	it	mi
 80073b8:	b2b6      	uxthmi	r6, r6
 80073ba:	e7e6      	b.n	800738a <_printf_i+0x182>
 80073bc:	4615      	mov	r5, r2
 80073be:	e7bb      	b.n	8007338 <_printf_i+0x130>
 80073c0:	682b      	ldr	r3, [r5, #0]
 80073c2:	6826      	ldr	r6, [r4, #0]
 80073c4:	6961      	ldr	r1, [r4, #20]
 80073c6:	1d18      	adds	r0, r3, #4
 80073c8:	6028      	str	r0, [r5, #0]
 80073ca:	0635      	lsls	r5, r6, #24
 80073cc:	681b      	ldr	r3, [r3, #0]
 80073ce:	d501      	bpl.n	80073d4 <_printf_i+0x1cc>
 80073d0:	6019      	str	r1, [r3, #0]
 80073d2:	e002      	b.n	80073da <_printf_i+0x1d2>
 80073d4:	0670      	lsls	r0, r6, #25
 80073d6:	d5fb      	bpl.n	80073d0 <_printf_i+0x1c8>
 80073d8:	8019      	strh	r1, [r3, #0]
 80073da:	2300      	movs	r3, #0
 80073dc:	6123      	str	r3, [r4, #16]
 80073de:	4615      	mov	r5, r2
 80073e0:	e7ba      	b.n	8007358 <_printf_i+0x150>
 80073e2:	682b      	ldr	r3, [r5, #0]
 80073e4:	1d1a      	adds	r2, r3, #4
 80073e6:	602a      	str	r2, [r5, #0]
 80073e8:	681d      	ldr	r5, [r3, #0]
 80073ea:	6862      	ldr	r2, [r4, #4]
 80073ec:	2100      	movs	r1, #0
 80073ee:	4628      	mov	r0, r5
 80073f0:	f7f8 ff06 	bl	8000200 <memchr>
 80073f4:	b108      	cbz	r0, 80073fa <_printf_i+0x1f2>
 80073f6:	1b40      	subs	r0, r0, r5
 80073f8:	6060      	str	r0, [r4, #4]
 80073fa:	6863      	ldr	r3, [r4, #4]
 80073fc:	6123      	str	r3, [r4, #16]
 80073fe:	2300      	movs	r3, #0
 8007400:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007404:	e7a8      	b.n	8007358 <_printf_i+0x150>
 8007406:	6923      	ldr	r3, [r4, #16]
 8007408:	462a      	mov	r2, r5
 800740a:	4649      	mov	r1, r9
 800740c:	4640      	mov	r0, r8
 800740e:	47d0      	blx	sl
 8007410:	3001      	adds	r0, #1
 8007412:	d0ab      	beq.n	800736c <_printf_i+0x164>
 8007414:	6823      	ldr	r3, [r4, #0]
 8007416:	079b      	lsls	r3, r3, #30
 8007418:	d413      	bmi.n	8007442 <_printf_i+0x23a>
 800741a:	68e0      	ldr	r0, [r4, #12]
 800741c:	9b03      	ldr	r3, [sp, #12]
 800741e:	4298      	cmp	r0, r3
 8007420:	bfb8      	it	lt
 8007422:	4618      	movlt	r0, r3
 8007424:	e7a4      	b.n	8007370 <_printf_i+0x168>
 8007426:	2301      	movs	r3, #1
 8007428:	4632      	mov	r2, r6
 800742a:	4649      	mov	r1, r9
 800742c:	4640      	mov	r0, r8
 800742e:	47d0      	blx	sl
 8007430:	3001      	adds	r0, #1
 8007432:	d09b      	beq.n	800736c <_printf_i+0x164>
 8007434:	3501      	adds	r5, #1
 8007436:	68e3      	ldr	r3, [r4, #12]
 8007438:	9903      	ldr	r1, [sp, #12]
 800743a:	1a5b      	subs	r3, r3, r1
 800743c:	42ab      	cmp	r3, r5
 800743e:	dcf2      	bgt.n	8007426 <_printf_i+0x21e>
 8007440:	e7eb      	b.n	800741a <_printf_i+0x212>
 8007442:	2500      	movs	r5, #0
 8007444:	f104 0619 	add.w	r6, r4, #25
 8007448:	e7f5      	b.n	8007436 <_printf_i+0x22e>
 800744a:	bf00      	nop
 800744c:	08009a86 	.word	0x08009a86
 8007450:	08009a97 	.word	0x08009a97

08007454 <sniprintf>:
 8007454:	b40c      	push	{r2, r3}
 8007456:	b530      	push	{r4, r5, lr}
 8007458:	4b17      	ldr	r3, [pc, #92]	; (80074b8 <sniprintf+0x64>)
 800745a:	1e0c      	subs	r4, r1, #0
 800745c:	681d      	ldr	r5, [r3, #0]
 800745e:	b09d      	sub	sp, #116	; 0x74
 8007460:	da08      	bge.n	8007474 <sniprintf+0x20>
 8007462:	238b      	movs	r3, #139	; 0x8b
 8007464:	602b      	str	r3, [r5, #0]
 8007466:	f04f 30ff 	mov.w	r0, #4294967295
 800746a:	b01d      	add	sp, #116	; 0x74
 800746c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007470:	b002      	add	sp, #8
 8007472:	4770      	bx	lr
 8007474:	f44f 7302 	mov.w	r3, #520	; 0x208
 8007478:	f8ad 3014 	strh.w	r3, [sp, #20]
 800747c:	bf14      	ite	ne
 800747e:	f104 33ff 	addne.w	r3, r4, #4294967295
 8007482:	4623      	moveq	r3, r4
 8007484:	9304      	str	r3, [sp, #16]
 8007486:	9307      	str	r3, [sp, #28]
 8007488:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800748c:	9002      	str	r0, [sp, #8]
 800748e:	9006      	str	r0, [sp, #24]
 8007490:	f8ad 3016 	strh.w	r3, [sp, #22]
 8007494:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8007496:	ab21      	add	r3, sp, #132	; 0x84
 8007498:	a902      	add	r1, sp, #8
 800749a:	4628      	mov	r0, r5
 800749c:	9301      	str	r3, [sp, #4]
 800749e:	f001 fba5 	bl	8008bec <_svfiprintf_r>
 80074a2:	1c43      	adds	r3, r0, #1
 80074a4:	bfbc      	itt	lt
 80074a6:	238b      	movlt	r3, #139	; 0x8b
 80074a8:	602b      	strlt	r3, [r5, #0]
 80074aa:	2c00      	cmp	r4, #0
 80074ac:	d0dd      	beq.n	800746a <sniprintf+0x16>
 80074ae:	9b02      	ldr	r3, [sp, #8]
 80074b0:	2200      	movs	r2, #0
 80074b2:	701a      	strb	r2, [r3, #0]
 80074b4:	e7d9      	b.n	800746a <sniprintf+0x16>
 80074b6:	bf00      	nop
 80074b8:	20000010 	.word	0x20000010

080074bc <siprintf>:
 80074bc:	b40e      	push	{r1, r2, r3}
 80074be:	b500      	push	{lr}
 80074c0:	b09c      	sub	sp, #112	; 0x70
 80074c2:	ab1d      	add	r3, sp, #116	; 0x74
 80074c4:	9002      	str	r0, [sp, #8]
 80074c6:	9006      	str	r0, [sp, #24]
 80074c8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80074cc:	4809      	ldr	r0, [pc, #36]	; (80074f4 <siprintf+0x38>)
 80074ce:	9107      	str	r1, [sp, #28]
 80074d0:	9104      	str	r1, [sp, #16]
 80074d2:	4909      	ldr	r1, [pc, #36]	; (80074f8 <siprintf+0x3c>)
 80074d4:	f853 2b04 	ldr.w	r2, [r3], #4
 80074d8:	9105      	str	r1, [sp, #20]
 80074da:	6800      	ldr	r0, [r0, #0]
 80074dc:	9301      	str	r3, [sp, #4]
 80074de:	a902      	add	r1, sp, #8
 80074e0:	f001 fb84 	bl	8008bec <_svfiprintf_r>
 80074e4:	9b02      	ldr	r3, [sp, #8]
 80074e6:	2200      	movs	r2, #0
 80074e8:	701a      	strb	r2, [r3, #0]
 80074ea:	b01c      	add	sp, #112	; 0x70
 80074ec:	f85d eb04 	ldr.w	lr, [sp], #4
 80074f0:	b003      	add	sp, #12
 80074f2:	4770      	bx	lr
 80074f4:	20000010 	.word	0x20000010
 80074f8:	ffff0208 	.word	0xffff0208

080074fc <strchr>:
 80074fc:	b2c9      	uxtb	r1, r1
 80074fe:	4603      	mov	r3, r0
 8007500:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007504:	b11a      	cbz	r2, 800750e <strchr+0x12>
 8007506:	428a      	cmp	r2, r1
 8007508:	d1f9      	bne.n	80074fe <strchr+0x2>
 800750a:	4618      	mov	r0, r3
 800750c:	4770      	bx	lr
 800750e:	2900      	cmp	r1, #0
 8007510:	bf18      	it	ne
 8007512:	2300      	movne	r3, #0
 8007514:	e7f9      	b.n	800750a <strchr+0xe>

08007516 <quorem>:
 8007516:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800751a:	6903      	ldr	r3, [r0, #16]
 800751c:	690c      	ldr	r4, [r1, #16]
 800751e:	42a3      	cmp	r3, r4
 8007520:	4607      	mov	r7, r0
 8007522:	f2c0 8081 	blt.w	8007628 <quorem+0x112>
 8007526:	3c01      	subs	r4, #1
 8007528:	f101 0814 	add.w	r8, r1, #20
 800752c:	f100 0514 	add.w	r5, r0, #20
 8007530:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007534:	9301      	str	r3, [sp, #4]
 8007536:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800753a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800753e:	3301      	adds	r3, #1
 8007540:	429a      	cmp	r2, r3
 8007542:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8007546:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800754a:	fbb2 f6f3 	udiv	r6, r2, r3
 800754e:	d331      	bcc.n	80075b4 <quorem+0x9e>
 8007550:	f04f 0e00 	mov.w	lr, #0
 8007554:	4640      	mov	r0, r8
 8007556:	46ac      	mov	ip, r5
 8007558:	46f2      	mov	sl, lr
 800755a:	f850 2b04 	ldr.w	r2, [r0], #4
 800755e:	b293      	uxth	r3, r2
 8007560:	fb06 e303 	mla	r3, r6, r3, lr
 8007564:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8007568:	b29b      	uxth	r3, r3
 800756a:	ebaa 0303 	sub.w	r3, sl, r3
 800756e:	f8dc a000 	ldr.w	sl, [ip]
 8007572:	0c12      	lsrs	r2, r2, #16
 8007574:	fa13 f38a 	uxtah	r3, r3, sl
 8007578:	fb06 e202 	mla	r2, r6, r2, lr
 800757c:	9300      	str	r3, [sp, #0]
 800757e:	9b00      	ldr	r3, [sp, #0]
 8007580:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8007584:	b292      	uxth	r2, r2
 8007586:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800758a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800758e:	f8bd 3000 	ldrh.w	r3, [sp]
 8007592:	4581      	cmp	r9, r0
 8007594:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007598:	f84c 3b04 	str.w	r3, [ip], #4
 800759c:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80075a0:	d2db      	bcs.n	800755a <quorem+0x44>
 80075a2:	f855 300b 	ldr.w	r3, [r5, fp]
 80075a6:	b92b      	cbnz	r3, 80075b4 <quorem+0x9e>
 80075a8:	9b01      	ldr	r3, [sp, #4]
 80075aa:	3b04      	subs	r3, #4
 80075ac:	429d      	cmp	r5, r3
 80075ae:	461a      	mov	r2, r3
 80075b0:	d32e      	bcc.n	8007610 <quorem+0xfa>
 80075b2:	613c      	str	r4, [r7, #16]
 80075b4:	4638      	mov	r0, r7
 80075b6:	f001 f8c5 	bl	8008744 <__mcmp>
 80075ba:	2800      	cmp	r0, #0
 80075bc:	db24      	blt.n	8007608 <quorem+0xf2>
 80075be:	3601      	adds	r6, #1
 80075c0:	4628      	mov	r0, r5
 80075c2:	f04f 0c00 	mov.w	ip, #0
 80075c6:	f858 2b04 	ldr.w	r2, [r8], #4
 80075ca:	f8d0 e000 	ldr.w	lr, [r0]
 80075ce:	b293      	uxth	r3, r2
 80075d0:	ebac 0303 	sub.w	r3, ip, r3
 80075d4:	0c12      	lsrs	r2, r2, #16
 80075d6:	fa13 f38e 	uxtah	r3, r3, lr
 80075da:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80075de:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80075e2:	b29b      	uxth	r3, r3
 80075e4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80075e8:	45c1      	cmp	r9, r8
 80075ea:	f840 3b04 	str.w	r3, [r0], #4
 80075ee:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80075f2:	d2e8      	bcs.n	80075c6 <quorem+0xb0>
 80075f4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80075f8:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80075fc:	b922      	cbnz	r2, 8007608 <quorem+0xf2>
 80075fe:	3b04      	subs	r3, #4
 8007600:	429d      	cmp	r5, r3
 8007602:	461a      	mov	r2, r3
 8007604:	d30a      	bcc.n	800761c <quorem+0x106>
 8007606:	613c      	str	r4, [r7, #16]
 8007608:	4630      	mov	r0, r6
 800760a:	b003      	add	sp, #12
 800760c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007610:	6812      	ldr	r2, [r2, #0]
 8007612:	3b04      	subs	r3, #4
 8007614:	2a00      	cmp	r2, #0
 8007616:	d1cc      	bne.n	80075b2 <quorem+0x9c>
 8007618:	3c01      	subs	r4, #1
 800761a:	e7c7      	b.n	80075ac <quorem+0x96>
 800761c:	6812      	ldr	r2, [r2, #0]
 800761e:	3b04      	subs	r3, #4
 8007620:	2a00      	cmp	r2, #0
 8007622:	d1f0      	bne.n	8007606 <quorem+0xf0>
 8007624:	3c01      	subs	r4, #1
 8007626:	e7eb      	b.n	8007600 <quorem+0xea>
 8007628:	2000      	movs	r0, #0
 800762a:	e7ee      	b.n	800760a <quorem+0xf4>
 800762c:	0000      	movs	r0, r0
	...

08007630 <_dtoa_r>:
 8007630:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007634:	ed2d 8b04 	vpush	{d8-d9}
 8007638:	ec57 6b10 	vmov	r6, r7, d0
 800763c:	b093      	sub	sp, #76	; 0x4c
 800763e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8007640:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8007644:	9106      	str	r1, [sp, #24]
 8007646:	ee10 aa10 	vmov	sl, s0
 800764a:	4604      	mov	r4, r0
 800764c:	9209      	str	r2, [sp, #36]	; 0x24
 800764e:	930c      	str	r3, [sp, #48]	; 0x30
 8007650:	46bb      	mov	fp, r7
 8007652:	b975      	cbnz	r5, 8007672 <_dtoa_r+0x42>
 8007654:	2010      	movs	r0, #16
 8007656:	f000 fddd 	bl	8008214 <malloc>
 800765a:	4602      	mov	r2, r0
 800765c:	6260      	str	r0, [r4, #36]	; 0x24
 800765e:	b920      	cbnz	r0, 800766a <_dtoa_r+0x3a>
 8007660:	4ba7      	ldr	r3, [pc, #668]	; (8007900 <_dtoa_r+0x2d0>)
 8007662:	21ea      	movs	r1, #234	; 0xea
 8007664:	48a7      	ldr	r0, [pc, #668]	; (8007904 <_dtoa_r+0x2d4>)
 8007666:	f001 fbd1 	bl	8008e0c <__assert_func>
 800766a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800766e:	6005      	str	r5, [r0, #0]
 8007670:	60c5      	str	r5, [r0, #12]
 8007672:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007674:	6819      	ldr	r1, [r3, #0]
 8007676:	b151      	cbz	r1, 800768e <_dtoa_r+0x5e>
 8007678:	685a      	ldr	r2, [r3, #4]
 800767a:	604a      	str	r2, [r1, #4]
 800767c:	2301      	movs	r3, #1
 800767e:	4093      	lsls	r3, r2
 8007680:	608b      	str	r3, [r1, #8]
 8007682:	4620      	mov	r0, r4
 8007684:	f000 fe1c 	bl	80082c0 <_Bfree>
 8007688:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800768a:	2200      	movs	r2, #0
 800768c:	601a      	str	r2, [r3, #0]
 800768e:	1e3b      	subs	r3, r7, #0
 8007690:	bfaa      	itet	ge
 8007692:	2300      	movge	r3, #0
 8007694:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8007698:	f8c8 3000 	strge.w	r3, [r8]
 800769c:	4b9a      	ldr	r3, [pc, #616]	; (8007908 <_dtoa_r+0x2d8>)
 800769e:	bfbc      	itt	lt
 80076a0:	2201      	movlt	r2, #1
 80076a2:	f8c8 2000 	strlt.w	r2, [r8]
 80076a6:	ea33 030b 	bics.w	r3, r3, fp
 80076aa:	d11b      	bne.n	80076e4 <_dtoa_r+0xb4>
 80076ac:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80076ae:	f242 730f 	movw	r3, #9999	; 0x270f
 80076b2:	6013      	str	r3, [r2, #0]
 80076b4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80076b8:	4333      	orrs	r3, r6
 80076ba:	f000 8592 	beq.w	80081e2 <_dtoa_r+0xbb2>
 80076be:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80076c0:	b963      	cbnz	r3, 80076dc <_dtoa_r+0xac>
 80076c2:	4b92      	ldr	r3, [pc, #584]	; (800790c <_dtoa_r+0x2dc>)
 80076c4:	e022      	b.n	800770c <_dtoa_r+0xdc>
 80076c6:	4b92      	ldr	r3, [pc, #584]	; (8007910 <_dtoa_r+0x2e0>)
 80076c8:	9301      	str	r3, [sp, #4]
 80076ca:	3308      	adds	r3, #8
 80076cc:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80076ce:	6013      	str	r3, [r2, #0]
 80076d0:	9801      	ldr	r0, [sp, #4]
 80076d2:	b013      	add	sp, #76	; 0x4c
 80076d4:	ecbd 8b04 	vpop	{d8-d9}
 80076d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80076dc:	4b8b      	ldr	r3, [pc, #556]	; (800790c <_dtoa_r+0x2dc>)
 80076de:	9301      	str	r3, [sp, #4]
 80076e0:	3303      	adds	r3, #3
 80076e2:	e7f3      	b.n	80076cc <_dtoa_r+0x9c>
 80076e4:	2200      	movs	r2, #0
 80076e6:	2300      	movs	r3, #0
 80076e8:	4650      	mov	r0, sl
 80076ea:	4659      	mov	r1, fp
 80076ec:	f7f9 f9fc 	bl	8000ae8 <__aeabi_dcmpeq>
 80076f0:	ec4b ab19 	vmov	d9, sl, fp
 80076f4:	4680      	mov	r8, r0
 80076f6:	b158      	cbz	r0, 8007710 <_dtoa_r+0xe0>
 80076f8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80076fa:	2301      	movs	r3, #1
 80076fc:	6013      	str	r3, [r2, #0]
 80076fe:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007700:	2b00      	cmp	r3, #0
 8007702:	f000 856b 	beq.w	80081dc <_dtoa_r+0xbac>
 8007706:	4883      	ldr	r0, [pc, #524]	; (8007914 <_dtoa_r+0x2e4>)
 8007708:	6018      	str	r0, [r3, #0]
 800770a:	1e43      	subs	r3, r0, #1
 800770c:	9301      	str	r3, [sp, #4]
 800770e:	e7df      	b.n	80076d0 <_dtoa_r+0xa0>
 8007710:	ec4b ab10 	vmov	d0, sl, fp
 8007714:	aa10      	add	r2, sp, #64	; 0x40
 8007716:	a911      	add	r1, sp, #68	; 0x44
 8007718:	4620      	mov	r0, r4
 800771a:	f001 f8b9 	bl	8008890 <__d2b>
 800771e:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8007722:	ee08 0a10 	vmov	s16, r0
 8007726:	2d00      	cmp	r5, #0
 8007728:	f000 8084 	beq.w	8007834 <_dtoa_r+0x204>
 800772c:	ee19 3a90 	vmov	r3, s19
 8007730:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007734:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8007738:	4656      	mov	r6, sl
 800773a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800773e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8007742:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8007746:	4b74      	ldr	r3, [pc, #464]	; (8007918 <_dtoa_r+0x2e8>)
 8007748:	2200      	movs	r2, #0
 800774a:	4630      	mov	r0, r6
 800774c:	4639      	mov	r1, r7
 800774e:	f7f8 fdab 	bl	80002a8 <__aeabi_dsub>
 8007752:	a365      	add	r3, pc, #404	; (adr r3, 80078e8 <_dtoa_r+0x2b8>)
 8007754:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007758:	f7f8 ff5e 	bl	8000618 <__aeabi_dmul>
 800775c:	a364      	add	r3, pc, #400	; (adr r3, 80078f0 <_dtoa_r+0x2c0>)
 800775e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007762:	f7f8 fda3 	bl	80002ac <__adddf3>
 8007766:	4606      	mov	r6, r0
 8007768:	4628      	mov	r0, r5
 800776a:	460f      	mov	r7, r1
 800776c:	f7f8 feea 	bl	8000544 <__aeabi_i2d>
 8007770:	a361      	add	r3, pc, #388	; (adr r3, 80078f8 <_dtoa_r+0x2c8>)
 8007772:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007776:	f7f8 ff4f 	bl	8000618 <__aeabi_dmul>
 800777a:	4602      	mov	r2, r0
 800777c:	460b      	mov	r3, r1
 800777e:	4630      	mov	r0, r6
 8007780:	4639      	mov	r1, r7
 8007782:	f7f8 fd93 	bl	80002ac <__adddf3>
 8007786:	4606      	mov	r6, r0
 8007788:	460f      	mov	r7, r1
 800778a:	f7f9 f9f5 	bl	8000b78 <__aeabi_d2iz>
 800778e:	2200      	movs	r2, #0
 8007790:	9000      	str	r0, [sp, #0]
 8007792:	2300      	movs	r3, #0
 8007794:	4630      	mov	r0, r6
 8007796:	4639      	mov	r1, r7
 8007798:	f7f9 f9b0 	bl	8000afc <__aeabi_dcmplt>
 800779c:	b150      	cbz	r0, 80077b4 <_dtoa_r+0x184>
 800779e:	9800      	ldr	r0, [sp, #0]
 80077a0:	f7f8 fed0 	bl	8000544 <__aeabi_i2d>
 80077a4:	4632      	mov	r2, r6
 80077a6:	463b      	mov	r3, r7
 80077a8:	f7f9 f99e 	bl	8000ae8 <__aeabi_dcmpeq>
 80077ac:	b910      	cbnz	r0, 80077b4 <_dtoa_r+0x184>
 80077ae:	9b00      	ldr	r3, [sp, #0]
 80077b0:	3b01      	subs	r3, #1
 80077b2:	9300      	str	r3, [sp, #0]
 80077b4:	9b00      	ldr	r3, [sp, #0]
 80077b6:	2b16      	cmp	r3, #22
 80077b8:	d85a      	bhi.n	8007870 <_dtoa_r+0x240>
 80077ba:	9a00      	ldr	r2, [sp, #0]
 80077bc:	4b57      	ldr	r3, [pc, #348]	; (800791c <_dtoa_r+0x2ec>)
 80077be:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80077c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077c6:	ec51 0b19 	vmov	r0, r1, d9
 80077ca:	f7f9 f997 	bl	8000afc <__aeabi_dcmplt>
 80077ce:	2800      	cmp	r0, #0
 80077d0:	d050      	beq.n	8007874 <_dtoa_r+0x244>
 80077d2:	9b00      	ldr	r3, [sp, #0]
 80077d4:	3b01      	subs	r3, #1
 80077d6:	9300      	str	r3, [sp, #0]
 80077d8:	2300      	movs	r3, #0
 80077da:	930b      	str	r3, [sp, #44]	; 0x2c
 80077dc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80077de:	1b5d      	subs	r5, r3, r5
 80077e0:	1e6b      	subs	r3, r5, #1
 80077e2:	9305      	str	r3, [sp, #20]
 80077e4:	bf45      	ittet	mi
 80077e6:	f1c5 0301 	rsbmi	r3, r5, #1
 80077ea:	9304      	strmi	r3, [sp, #16]
 80077ec:	2300      	movpl	r3, #0
 80077ee:	2300      	movmi	r3, #0
 80077f0:	bf4c      	ite	mi
 80077f2:	9305      	strmi	r3, [sp, #20]
 80077f4:	9304      	strpl	r3, [sp, #16]
 80077f6:	9b00      	ldr	r3, [sp, #0]
 80077f8:	2b00      	cmp	r3, #0
 80077fa:	db3d      	blt.n	8007878 <_dtoa_r+0x248>
 80077fc:	9b05      	ldr	r3, [sp, #20]
 80077fe:	9a00      	ldr	r2, [sp, #0]
 8007800:	920a      	str	r2, [sp, #40]	; 0x28
 8007802:	4413      	add	r3, r2
 8007804:	9305      	str	r3, [sp, #20]
 8007806:	2300      	movs	r3, #0
 8007808:	9307      	str	r3, [sp, #28]
 800780a:	9b06      	ldr	r3, [sp, #24]
 800780c:	2b09      	cmp	r3, #9
 800780e:	f200 8089 	bhi.w	8007924 <_dtoa_r+0x2f4>
 8007812:	2b05      	cmp	r3, #5
 8007814:	bfc4      	itt	gt
 8007816:	3b04      	subgt	r3, #4
 8007818:	9306      	strgt	r3, [sp, #24]
 800781a:	9b06      	ldr	r3, [sp, #24]
 800781c:	f1a3 0302 	sub.w	r3, r3, #2
 8007820:	bfcc      	ite	gt
 8007822:	2500      	movgt	r5, #0
 8007824:	2501      	movle	r5, #1
 8007826:	2b03      	cmp	r3, #3
 8007828:	f200 8087 	bhi.w	800793a <_dtoa_r+0x30a>
 800782c:	e8df f003 	tbb	[pc, r3]
 8007830:	59383a2d 	.word	0x59383a2d
 8007834:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8007838:	441d      	add	r5, r3
 800783a:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800783e:	2b20      	cmp	r3, #32
 8007840:	bfc1      	itttt	gt
 8007842:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8007846:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800784a:	fa0b f303 	lslgt.w	r3, fp, r3
 800784e:	fa26 f000 	lsrgt.w	r0, r6, r0
 8007852:	bfda      	itte	le
 8007854:	f1c3 0320 	rsble	r3, r3, #32
 8007858:	fa06 f003 	lslle.w	r0, r6, r3
 800785c:	4318      	orrgt	r0, r3
 800785e:	f7f8 fe61 	bl	8000524 <__aeabi_ui2d>
 8007862:	2301      	movs	r3, #1
 8007864:	4606      	mov	r6, r0
 8007866:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800786a:	3d01      	subs	r5, #1
 800786c:	930e      	str	r3, [sp, #56]	; 0x38
 800786e:	e76a      	b.n	8007746 <_dtoa_r+0x116>
 8007870:	2301      	movs	r3, #1
 8007872:	e7b2      	b.n	80077da <_dtoa_r+0x1aa>
 8007874:	900b      	str	r0, [sp, #44]	; 0x2c
 8007876:	e7b1      	b.n	80077dc <_dtoa_r+0x1ac>
 8007878:	9b04      	ldr	r3, [sp, #16]
 800787a:	9a00      	ldr	r2, [sp, #0]
 800787c:	1a9b      	subs	r3, r3, r2
 800787e:	9304      	str	r3, [sp, #16]
 8007880:	4253      	negs	r3, r2
 8007882:	9307      	str	r3, [sp, #28]
 8007884:	2300      	movs	r3, #0
 8007886:	930a      	str	r3, [sp, #40]	; 0x28
 8007888:	e7bf      	b.n	800780a <_dtoa_r+0x1da>
 800788a:	2300      	movs	r3, #0
 800788c:	9308      	str	r3, [sp, #32]
 800788e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007890:	2b00      	cmp	r3, #0
 8007892:	dc55      	bgt.n	8007940 <_dtoa_r+0x310>
 8007894:	2301      	movs	r3, #1
 8007896:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800789a:	461a      	mov	r2, r3
 800789c:	9209      	str	r2, [sp, #36]	; 0x24
 800789e:	e00c      	b.n	80078ba <_dtoa_r+0x28a>
 80078a0:	2301      	movs	r3, #1
 80078a2:	e7f3      	b.n	800788c <_dtoa_r+0x25c>
 80078a4:	2300      	movs	r3, #0
 80078a6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80078a8:	9308      	str	r3, [sp, #32]
 80078aa:	9b00      	ldr	r3, [sp, #0]
 80078ac:	4413      	add	r3, r2
 80078ae:	9302      	str	r3, [sp, #8]
 80078b0:	3301      	adds	r3, #1
 80078b2:	2b01      	cmp	r3, #1
 80078b4:	9303      	str	r3, [sp, #12]
 80078b6:	bfb8      	it	lt
 80078b8:	2301      	movlt	r3, #1
 80078ba:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80078bc:	2200      	movs	r2, #0
 80078be:	6042      	str	r2, [r0, #4]
 80078c0:	2204      	movs	r2, #4
 80078c2:	f102 0614 	add.w	r6, r2, #20
 80078c6:	429e      	cmp	r6, r3
 80078c8:	6841      	ldr	r1, [r0, #4]
 80078ca:	d93d      	bls.n	8007948 <_dtoa_r+0x318>
 80078cc:	4620      	mov	r0, r4
 80078ce:	f000 fcb7 	bl	8008240 <_Balloc>
 80078d2:	9001      	str	r0, [sp, #4]
 80078d4:	2800      	cmp	r0, #0
 80078d6:	d13b      	bne.n	8007950 <_dtoa_r+0x320>
 80078d8:	4b11      	ldr	r3, [pc, #68]	; (8007920 <_dtoa_r+0x2f0>)
 80078da:	4602      	mov	r2, r0
 80078dc:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80078e0:	e6c0      	b.n	8007664 <_dtoa_r+0x34>
 80078e2:	2301      	movs	r3, #1
 80078e4:	e7df      	b.n	80078a6 <_dtoa_r+0x276>
 80078e6:	bf00      	nop
 80078e8:	636f4361 	.word	0x636f4361
 80078ec:	3fd287a7 	.word	0x3fd287a7
 80078f0:	8b60c8b3 	.word	0x8b60c8b3
 80078f4:	3fc68a28 	.word	0x3fc68a28
 80078f8:	509f79fb 	.word	0x509f79fb
 80078fc:	3fd34413 	.word	0x3fd34413
 8007900:	08009ab5 	.word	0x08009ab5
 8007904:	08009acc 	.word	0x08009acc
 8007908:	7ff00000 	.word	0x7ff00000
 800790c:	08009ab1 	.word	0x08009ab1
 8007910:	08009aa8 	.word	0x08009aa8
 8007914:	08009a85 	.word	0x08009a85
 8007918:	3ff80000 	.word	0x3ff80000
 800791c:	08009bc0 	.word	0x08009bc0
 8007920:	08009b27 	.word	0x08009b27
 8007924:	2501      	movs	r5, #1
 8007926:	2300      	movs	r3, #0
 8007928:	9306      	str	r3, [sp, #24]
 800792a:	9508      	str	r5, [sp, #32]
 800792c:	f04f 33ff 	mov.w	r3, #4294967295
 8007930:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8007934:	2200      	movs	r2, #0
 8007936:	2312      	movs	r3, #18
 8007938:	e7b0      	b.n	800789c <_dtoa_r+0x26c>
 800793a:	2301      	movs	r3, #1
 800793c:	9308      	str	r3, [sp, #32]
 800793e:	e7f5      	b.n	800792c <_dtoa_r+0x2fc>
 8007940:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007942:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8007946:	e7b8      	b.n	80078ba <_dtoa_r+0x28a>
 8007948:	3101      	adds	r1, #1
 800794a:	6041      	str	r1, [r0, #4]
 800794c:	0052      	lsls	r2, r2, #1
 800794e:	e7b8      	b.n	80078c2 <_dtoa_r+0x292>
 8007950:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007952:	9a01      	ldr	r2, [sp, #4]
 8007954:	601a      	str	r2, [r3, #0]
 8007956:	9b03      	ldr	r3, [sp, #12]
 8007958:	2b0e      	cmp	r3, #14
 800795a:	f200 809d 	bhi.w	8007a98 <_dtoa_r+0x468>
 800795e:	2d00      	cmp	r5, #0
 8007960:	f000 809a 	beq.w	8007a98 <_dtoa_r+0x468>
 8007964:	9b00      	ldr	r3, [sp, #0]
 8007966:	2b00      	cmp	r3, #0
 8007968:	dd32      	ble.n	80079d0 <_dtoa_r+0x3a0>
 800796a:	4ab7      	ldr	r2, [pc, #732]	; (8007c48 <_dtoa_r+0x618>)
 800796c:	f003 030f 	and.w	r3, r3, #15
 8007970:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8007974:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007978:	9b00      	ldr	r3, [sp, #0]
 800797a:	05d8      	lsls	r0, r3, #23
 800797c:	ea4f 1723 	mov.w	r7, r3, asr #4
 8007980:	d516      	bpl.n	80079b0 <_dtoa_r+0x380>
 8007982:	4bb2      	ldr	r3, [pc, #712]	; (8007c4c <_dtoa_r+0x61c>)
 8007984:	ec51 0b19 	vmov	r0, r1, d9
 8007988:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800798c:	f7f8 ff6e 	bl	800086c <__aeabi_ddiv>
 8007990:	f007 070f 	and.w	r7, r7, #15
 8007994:	4682      	mov	sl, r0
 8007996:	468b      	mov	fp, r1
 8007998:	2503      	movs	r5, #3
 800799a:	4eac      	ldr	r6, [pc, #688]	; (8007c4c <_dtoa_r+0x61c>)
 800799c:	b957      	cbnz	r7, 80079b4 <_dtoa_r+0x384>
 800799e:	4642      	mov	r2, r8
 80079a0:	464b      	mov	r3, r9
 80079a2:	4650      	mov	r0, sl
 80079a4:	4659      	mov	r1, fp
 80079a6:	f7f8 ff61 	bl	800086c <__aeabi_ddiv>
 80079aa:	4682      	mov	sl, r0
 80079ac:	468b      	mov	fp, r1
 80079ae:	e028      	b.n	8007a02 <_dtoa_r+0x3d2>
 80079b0:	2502      	movs	r5, #2
 80079b2:	e7f2      	b.n	800799a <_dtoa_r+0x36a>
 80079b4:	07f9      	lsls	r1, r7, #31
 80079b6:	d508      	bpl.n	80079ca <_dtoa_r+0x39a>
 80079b8:	4640      	mov	r0, r8
 80079ba:	4649      	mov	r1, r9
 80079bc:	e9d6 2300 	ldrd	r2, r3, [r6]
 80079c0:	f7f8 fe2a 	bl	8000618 <__aeabi_dmul>
 80079c4:	3501      	adds	r5, #1
 80079c6:	4680      	mov	r8, r0
 80079c8:	4689      	mov	r9, r1
 80079ca:	107f      	asrs	r7, r7, #1
 80079cc:	3608      	adds	r6, #8
 80079ce:	e7e5      	b.n	800799c <_dtoa_r+0x36c>
 80079d0:	f000 809b 	beq.w	8007b0a <_dtoa_r+0x4da>
 80079d4:	9b00      	ldr	r3, [sp, #0]
 80079d6:	4f9d      	ldr	r7, [pc, #628]	; (8007c4c <_dtoa_r+0x61c>)
 80079d8:	425e      	negs	r6, r3
 80079da:	4b9b      	ldr	r3, [pc, #620]	; (8007c48 <_dtoa_r+0x618>)
 80079dc:	f006 020f 	and.w	r2, r6, #15
 80079e0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80079e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079e8:	ec51 0b19 	vmov	r0, r1, d9
 80079ec:	f7f8 fe14 	bl	8000618 <__aeabi_dmul>
 80079f0:	1136      	asrs	r6, r6, #4
 80079f2:	4682      	mov	sl, r0
 80079f4:	468b      	mov	fp, r1
 80079f6:	2300      	movs	r3, #0
 80079f8:	2502      	movs	r5, #2
 80079fa:	2e00      	cmp	r6, #0
 80079fc:	d17a      	bne.n	8007af4 <_dtoa_r+0x4c4>
 80079fe:	2b00      	cmp	r3, #0
 8007a00:	d1d3      	bne.n	80079aa <_dtoa_r+0x37a>
 8007a02:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007a04:	2b00      	cmp	r3, #0
 8007a06:	f000 8082 	beq.w	8007b0e <_dtoa_r+0x4de>
 8007a0a:	4b91      	ldr	r3, [pc, #580]	; (8007c50 <_dtoa_r+0x620>)
 8007a0c:	2200      	movs	r2, #0
 8007a0e:	4650      	mov	r0, sl
 8007a10:	4659      	mov	r1, fp
 8007a12:	f7f9 f873 	bl	8000afc <__aeabi_dcmplt>
 8007a16:	2800      	cmp	r0, #0
 8007a18:	d079      	beq.n	8007b0e <_dtoa_r+0x4de>
 8007a1a:	9b03      	ldr	r3, [sp, #12]
 8007a1c:	2b00      	cmp	r3, #0
 8007a1e:	d076      	beq.n	8007b0e <_dtoa_r+0x4de>
 8007a20:	9b02      	ldr	r3, [sp, #8]
 8007a22:	2b00      	cmp	r3, #0
 8007a24:	dd36      	ble.n	8007a94 <_dtoa_r+0x464>
 8007a26:	9b00      	ldr	r3, [sp, #0]
 8007a28:	4650      	mov	r0, sl
 8007a2a:	4659      	mov	r1, fp
 8007a2c:	1e5f      	subs	r7, r3, #1
 8007a2e:	2200      	movs	r2, #0
 8007a30:	4b88      	ldr	r3, [pc, #544]	; (8007c54 <_dtoa_r+0x624>)
 8007a32:	f7f8 fdf1 	bl	8000618 <__aeabi_dmul>
 8007a36:	9e02      	ldr	r6, [sp, #8]
 8007a38:	4682      	mov	sl, r0
 8007a3a:	468b      	mov	fp, r1
 8007a3c:	3501      	adds	r5, #1
 8007a3e:	4628      	mov	r0, r5
 8007a40:	f7f8 fd80 	bl	8000544 <__aeabi_i2d>
 8007a44:	4652      	mov	r2, sl
 8007a46:	465b      	mov	r3, fp
 8007a48:	f7f8 fde6 	bl	8000618 <__aeabi_dmul>
 8007a4c:	4b82      	ldr	r3, [pc, #520]	; (8007c58 <_dtoa_r+0x628>)
 8007a4e:	2200      	movs	r2, #0
 8007a50:	f7f8 fc2c 	bl	80002ac <__adddf3>
 8007a54:	46d0      	mov	r8, sl
 8007a56:	46d9      	mov	r9, fp
 8007a58:	4682      	mov	sl, r0
 8007a5a:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 8007a5e:	2e00      	cmp	r6, #0
 8007a60:	d158      	bne.n	8007b14 <_dtoa_r+0x4e4>
 8007a62:	4b7e      	ldr	r3, [pc, #504]	; (8007c5c <_dtoa_r+0x62c>)
 8007a64:	2200      	movs	r2, #0
 8007a66:	4640      	mov	r0, r8
 8007a68:	4649      	mov	r1, r9
 8007a6a:	f7f8 fc1d 	bl	80002a8 <__aeabi_dsub>
 8007a6e:	4652      	mov	r2, sl
 8007a70:	465b      	mov	r3, fp
 8007a72:	4680      	mov	r8, r0
 8007a74:	4689      	mov	r9, r1
 8007a76:	f7f9 f85f 	bl	8000b38 <__aeabi_dcmpgt>
 8007a7a:	2800      	cmp	r0, #0
 8007a7c:	f040 8295 	bne.w	8007faa <_dtoa_r+0x97a>
 8007a80:	4652      	mov	r2, sl
 8007a82:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8007a86:	4640      	mov	r0, r8
 8007a88:	4649      	mov	r1, r9
 8007a8a:	f7f9 f837 	bl	8000afc <__aeabi_dcmplt>
 8007a8e:	2800      	cmp	r0, #0
 8007a90:	f040 8289 	bne.w	8007fa6 <_dtoa_r+0x976>
 8007a94:	ec5b ab19 	vmov	sl, fp, d9
 8007a98:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007a9a:	2b00      	cmp	r3, #0
 8007a9c:	f2c0 8148 	blt.w	8007d30 <_dtoa_r+0x700>
 8007aa0:	9a00      	ldr	r2, [sp, #0]
 8007aa2:	2a0e      	cmp	r2, #14
 8007aa4:	f300 8144 	bgt.w	8007d30 <_dtoa_r+0x700>
 8007aa8:	4b67      	ldr	r3, [pc, #412]	; (8007c48 <_dtoa_r+0x618>)
 8007aaa:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007aae:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007ab2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007ab4:	2b00      	cmp	r3, #0
 8007ab6:	f280 80d5 	bge.w	8007c64 <_dtoa_r+0x634>
 8007aba:	9b03      	ldr	r3, [sp, #12]
 8007abc:	2b00      	cmp	r3, #0
 8007abe:	f300 80d1 	bgt.w	8007c64 <_dtoa_r+0x634>
 8007ac2:	f040 826f 	bne.w	8007fa4 <_dtoa_r+0x974>
 8007ac6:	4b65      	ldr	r3, [pc, #404]	; (8007c5c <_dtoa_r+0x62c>)
 8007ac8:	2200      	movs	r2, #0
 8007aca:	4640      	mov	r0, r8
 8007acc:	4649      	mov	r1, r9
 8007ace:	f7f8 fda3 	bl	8000618 <__aeabi_dmul>
 8007ad2:	4652      	mov	r2, sl
 8007ad4:	465b      	mov	r3, fp
 8007ad6:	f7f9 f825 	bl	8000b24 <__aeabi_dcmpge>
 8007ada:	9e03      	ldr	r6, [sp, #12]
 8007adc:	4637      	mov	r7, r6
 8007ade:	2800      	cmp	r0, #0
 8007ae0:	f040 8245 	bne.w	8007f6e <_dtoa_r+0x93e>
 8007ae4:	9d01      	ldr	r5, [sp, #4]
 8007ae6:	2331      	movs	r3, #49	; 0x31
 8007ae8:	f805 3b01 	strb.w	r3, [r5], #1
 8007aec:	9b00      	ldr	r3, [sp, #0]
 8007aee:	3301      	adds	r3, #1
 8007af0:	9300      	str	r3, [sp, #0]
 8007af2:	e240      	b.n	8007f76 <_dtoa_r+0x946>
 8007af4:	07f2      	lsls	r2, r6, #31
 8007af6:	d505      	bpl.n	8007b04 <_dtoa_r+0x4d4>
 8007af8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007afc:	f7f8 fd8c 	bl	8000618 <__aeabi_dmul>
 8007b00:	3501      	adds	r5, #1
 8007b02:	2301      	movs	r3, #1
 8007b04:	1076      	asrs	r6, r6, #1
 8007b06:	3708      	adds	r7, #8
 8007b08:	e777      	b.n	80079fa <_dtoa_r+0x3ca>
 8007b0a:	2502      	movs	r5, #2
 8007b0c:	e779      	b.n	8007a02 <_dtoa_r+0x3d2>
 8007b0e:	9f00      	ldr	r7, [sp, #0]
 8007b10:	9e03      	ldr	r6, [sp, #12]
 8007b12:	e794      	b.n	8007a3e <_dtoa_r+0x40e>
 8007b14:	9901      	ldr	r1, [sp, #4]
 8007b16:	4b4c      	ldr	r3, [pc, #304]	; (8007c48 <_dtoa_r+0x618>)
 8007b18:	4431      	add	r1, r6
 8007b1a:	910d      	str	r1, [sp, #52]	; 0x34
 8007b1c:	9908      	ldr	r1, [sp, #32]
 8007b1e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8007b22:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8007b26:	2900      	cmp	r1, #0
 8007b28:	d043      	beq.n	8007bb2 <_dtoa_r+0x582>
 8007b2a:	494d      	ldr	r1, [pc, #308]	; (8007c60 <_dtoa_r+0x630>)
 8007b2c:	2000      	movs	r0, #0
 8007b2e:	f7f8 fe9d 	bl	800086c <__aeabi_ddiv>
 8007b32:	4652      	mov	r2, sl
 8007b34:	465b      	mov	r3, fp
 8007b36:	f7f8 fbb7 	bl	80002a8 <__aeabi_dsub>
 8007b3a:	9d01      	ldr	r5, [sp, #4]
 8007b3c:	4682      	mov	sl, r0
 8007b3e:	468b      	mov	fp, r1
 8007b40:	4649      	mov	r1, r9
 8007b42:	4640      	mov	r0, r8
 8007b44:	f7f9 f818 	bl	8000b78 <__aeabi_d2iz>
 8007b48:	4606      	mov	r6, r0
 8007b4a:	f7f8 fcfb 	bl	8000544 <__aeabi_i2d>
 8007b4e:	4602      	mov	r2, r0
 8007b50:	460b      	mov	r3, r1
 8007b52:	4640      	mov	r0, r8
 8007b54:	4649      	mov	r1, r9
 8007b56:	f7f8 fba7 	bl	80002a8 <__aeabi_dsub>
 8007b5a:	3630      	adds	r6, #48	; 0x30
 8007b5c:	f805 6b01 	strb.w	r6, [r5], #1
 8007b60:	4652      	mov	r2, sl
 8007b62:	465b      	mov	r3, fp
 8007b64:	4680      	mov	r8, r0
 8007b66:	4689      	mov	r9, r1
 8007b68:	f7f8 ffc8 	bl	8000afc <__aeabi_dcmplt>
 8007b6c:	2800      	cmp	r0, #0
 8007b6e:	d163      	bne.n	8007c38 <_dtoa_r+0x608>
 8007b70:	4642      	mov	r2, r8
 8007b72:	464b      	mov	r3, r9
 8007b74:	4936      	ldr	r1, [pc, #216]	; (8007c50 <_dtoa_r+0x620>)
 8007b76:	2000      	movs	r0, #0
 8007b78:	f7f8 fb96 	bl	80002a8 <__aeabi_dsub>
 8007b7c:	4652      	mov	r2, sl
 8007b7e:	465b      	mov	r3, fp
 8007b80:	f7f8 ffbc 	bl	8000afc <__aeabi_dcmplt>
 8007b84:	2800      	cmp	r0, #0
 8007b86:	f040 80b5 	bne.w	8007cf4 <_dtoa_r+0x6c4>
 8007b8a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007b8c:	429d      	cmp	r5, r3
 8007b8e:	d081      	beq.n	8007a94 <_dtoa_r+0x464>
 8007b90:	4b30      	ldr	r3, [pc, #192]	; (8007c54 <_dtoa_r+0x624>)
 8007b92:	2200      	movs	r2, #0
 8007b94:	4650      	mov	r0, sl
 8007b96:	4659      	mov	r1, fp
 8007b98:	f7f8 fd3e 	bl	8000618 <__aeabi_dmul>
 8007b9c:	4b2d      	ldr	r3, [pc, #180]	; (8007c54 <_dtoa_r+0x624>)
 8007b9e:	4682      	mov	sl, r0
 8007ba0:	468b      	mov	fp, r1
 8007ba2:	4640      	mov	r0, r8
 8007ba4:	4649      	mov	r1, r9
 8007ba6:	2200      	movs	r2, #0
 8007ba8:	f7f8 fd36 	bl	8000618 <__aeabi_dmul>
 8007bac:	4680      	mov	r8, r0
 8007bae:	4689      	mov	r9, r1
 8007bb0:	e7c6      	b.n	8007b40 <_dtoa_r+0x510>
 8007bb2:	4650      	mov	r0, sl
 8007bb4:	4659      	mov	r1, fp
 8007bb6:	f7f8 fd2f 	bl	8000618 <__aeabi_dmul>
 8007bba:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007bbc:	9d01      	ldr	r5, [sp, #4]
 8007bbe:	930f      	str	r3, [sp, #60]	; 0x3c
 8007bc0:	4682      	mov	sl, r0
 8007bc2:	468b      	mov	fp, r1
 8007bc4:	4649      	mov	r1, r9
 8007bc6:	4640      	mov	r0, r8
 8007bc8:	f7f8 ffd6 	bl	8000b78 <__aeabi_d2iz>
 8007bcc:	4606      	mov	r6, r0
 8007bce:	f7f8 fcb9 	bl	8000544 <__aeabi_i2d>
 8007bd2:	3630      	adds	r6, #48	; 0x30
 8007bd4:	4602      	mov	r2, r0
 8007bd6:	460b      	mov	r3, r1
 8007bd8:	4640      	mov	r0, r8
 8007bda:	4649      	mov	r1, r9
 8007bdc:	f7f8 fb64 	bl	80002a8 <__aeabi_dsub>
 8007be0:	f805 6b01 	strb.w	r6, [r5], #1
 8007be4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007be6:	429d      	cmp	r5, r3
 8007be8:	4680      	mov	r8, r0
 8007bea:	4689      	mov	r9, r1
 8007bec:	f04f 0200 	mov.w	r2, #0
 8007bf0:	d124      	bne.n	8007c3c <_dtoa_r+0x60c>
 8007bf2:	4b1b      	ldr	r3, [pc, #108]	; (8007c60 <_dtoa_r+0x630>)
 8007bf4:	4650      	mov	r0, sl
 8007bf6:	4659      	mov	r1, fp
 8007bf8:	f7f8 fb58 	bl	80002ac <__adddf3>
 8007bfc:	4602      	mov	r2, r0
 8007bfe:	460b      	mov	r3, r1
 8007c00:	4640      	mov	r0, r8
 8007c02:	4649      	mov	r1, r9
 8007c04:	f7f8 ff98 	bl	8000b38 <__aeabi_dcmpgt>
 8007c08:	2800      	cmp	r0, #0
 8007c0a:	d173      	bne.n	8007cf4 <_dtoa_r+0x6c4>
 8007c0c:	4652      	mov	r2, sl
 8007c0e:	465b      	mov	r3, fp
 8007c10:	4913      	ldr	r1, [pc, #76]	; (8007c60 <_dtoa_r+0x630>)
 8007c12:	2000      	movs	r0, #0
 8007c14:	f7f8 fb48 	bl	80002a8 <__aeabi_dsub>
 8007c18:	4602      	mov	r2, r0
 8007c1a:	460b      	mov	r3, r1
 8007c1c:	4640      	mov	r0, r8
 8007c1e:	4649      	mov	r1, r9
 8007c20:	f7f8 ff6c 	bl	8000afc <__aeabi_dcmplt>
 8007c24:	2800      	cmp	r0, #0
 8007c26:	f43f af35 	beq.w	8007a94 <_dtoa_r+0x464>
 8007c2a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8007c2c:	1e6b      	subs	r3, r5, #1
 8007c2e:	930f      	str	r3, [sp, #60]	; 0x3c
 8007c30:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8007c34:	2b30      	cmp	r3, #48	; 0x30
 8007c36:	d0f8      	beq.n	8007c2a <_dtoa_r+0x5fa>
 8007c38:	9700      	str	r7, [sp, #0]
 8007c3a:	e049      	b.n	8007cd0 <_dtoa_r+0x6a0>
 8007c3c:	4b05      	ldr	r3, [pc, #20]	; (8007c54 <_dtoa_r+0x624>)
 8007c3e:	f7f8 fceb 	bl	8000618 <__aeabi_dmul>
 8007c42:	4680      	mov	r8, r0
 8007c44:	4689      	mov	r9, r1
 8007c46:	e7bd      	b.n	8007bc4 <_dtoa_r+0x594>
 8007c48:	08009bc0 	.word	0x08009bc0
 8007c4c:	08009b98 	.word	0x08009b98
 8007c50:	3ff00000 	.word	0x3ff00000
 8007c54:	40240000 	.word	0x40240000
 8007c58:	401c0000 	.word	0x401c0000
 8007c5c:	40140000 	.word	0x40140000
 8007c60:	3fe00000 	.word	0x3fe00000
 8007c64:	9d01      	ldr	r5, [sp, #4]
 8007c66:	4656      	mov	r6, sl
 8007c68:	465f      	mov	r7, fp
 8007c6a:	4642      	mov	r2, r8
 8007c6c:	464b      	mov	r3, r9
 8007c6e:	4630      	mov	r0, r6
 8007c70:	4639      	mov	r1, r7
 8007c72:	f7f8 fdfb 	bl	800086c <__aeabi_ddiv>
 8007c76:	f7f8 ff7f 	bl	8000b78 <__aeabi_d2iz>
 8007c7a:	4682      	mov	sl, r0
 8007c7c:	f7f8 fc62 	bl	8000544 <__aeabi_i2d>
 8007c80:	4642      	mov	r2, r8
 8007c82:	464b      	mov	r3, r9
 8007c84:	f7f8 fcc8 	bl	8000618 <__aeabi_dmul>
 8007c88:	4602      	mov	r2, r0
 8007c8a:	460b      	mov	r3, r1
 8007c8c:	4630      	mov	r0, r6
 8007c8e:	4639      	mov	r1, r7
 8007c90:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 8007c94:	f7f8 fb08 	bl	80002a8 <__aeabi_dsub>
 8007c98:	f805 6b01 	strb.w	r6, [r5], #1
 8007c9c:	9e01      	ldr	r6, [sp, #4]
 8007c9e:	9f03      	ldr	r7, [sp, #12]
 8007ca0:	1bae      	subs	r6, r5, r6
 8007ca2:	42b7      	cmp	r7, r6
 8007ca4:	4602      	mov	r2, r0
 8007ca6:	460b      	mov	r3, r1
 8007ca8:	d135      	bne.n	8007d16 <_dtoa_r+0x6e6>
 8007caa:	f7f8 faff 	bl	80002ac <__adddf3>
 8007cae:	4642      	mov	r2, r8
 8007cb0:	464b      	mov	r3, r9
 8007cb2:	4606      	mov	r6, r0
 8007cb4:	460f      	mov	r7, r1
 8007cb6:	f7f8 ff3f 	bl	8000b38 <__aeabi_dcmpgt>
 8007cba:	b9d0      	cbnz	r0, 8007cf2 <_dtoa_r+0x6c2>
 8007cbc:	4642      	mov	r2, r8
 8007cbe:	464b      	mov	r3, r9
 8007cc0:	4630      	mov	r0, r6
 8007cc2:	4639      	mov	r1, r7
 8007cc4:	f7f8 ff10 	bl	8000ae8 <__aeabi_dcmpeq>
 8007cc8:	b110      	cbz	r0, 8007cd0 <_dtoa_r+0x6a0>
 8007cca:	f01a 0f01 	tst.w	sl, #1
 8007cce:	d110      	bne.n	8007cf2 <_dtoa_r+0x6c2>
 8007cd0:	4620      	mov	r0, r4
 8007cd2:	ee18 1a10 	vmov	r1, s16
 8007cd6:	f000 faf3 	bl	80082c0 <_Bfree>
 8007cda:	2300      	movs	r3, #0
 8007cdc:	9800      	ldr	r0, [sp, #0]
 8007cde:	702b      	strb	r3, [r5, #0]
 8007ce0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007ce2:	3001      	adds	r0, #1
 8007ce4:	6018      	str	r0, [r3, #0]
 8007ce6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007ce8:	2b00      	cmp	r3, #0
 8007cea:	f43f acf1 	beq.w	80076d0 <_dtoa_r+0xa0>
 8007cee:	601d      	str	r5, [r3, #0]
 8007cf0:	e4ee      	b.n	80076d0 <_dtoa_r+0xa0>
 8007cf2:	9f00      	ldr	r7, [sp, #0]
 8007cf4:	462b      	mov	r3, r5
 8007cf6:	461d      	mov	r5, r3
 8007cf8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007cfc:	2a39      	cmp	r2, #57	; 0x39
 8007cfe:	d106      	bne.n	8007d0e <_dtoa_r+0x6de>
 8007d00:	9a01      	ldr	r2, [sp, #4]
 8007d02:	429a      	cmp	r2, r3
 8007d04:	d1f7      	bne.n	8007cf6 <_dtoa_r+0x6c6>
 8007d06:	9901      	ldr	r1, [sp, #4]
 8007d08:	2230      	movs	r2, #48	; 0x30
 8007d0a:	3701      	adds	r7, #1
 8007d0c:	700a      	strb	r2, [r1, #0]
 8007d0e:	781a      	ldrb	r2, [r3, #0]
 8007d10:	3201      	adds	r2, #1
 8007d12:	701a      	strb	r2, [r3, #0]
 8007d14:	e790      	b.n	8007c38 <_dtoa_r+0x608>
 8007d16:	4ba6      	ldr	r3, [pc, #664]	; (8007fb0 <_dtoa_r+0x980>)
 8007d18:	2200      	movs	r2, #0
 8007d1a:	f7f8 fc7d 	bl	8000618 <__aeabi_dmul>
 8007d1e:	2200      	movs	r2, #0
 8007d20:	2300      	movs	r3, #0
 8007d22:	4606      	mov	r6, r0
 8007d24:	460f      	mov	r7, r1
 8007d26:	f7f8 fedf 	bl	8000ae8 <__aeabi_dcmpeq>
 8007d2a:	2800      	cmp	r0, #0
 8007d2c:	d09d      	beq.n	8007c6a <_dtoa_r+0x63a>
 8007d2e:	e7cf      	b.n	8007cd0 <_dtoa_r+0x6a0>
 8007d30:	9a08      	ldr	r2, [sp, #32]
 8007d32:	2a00      	cmp	r2, #0
 8007d34:	f000 80d7 	beq.w	8007ee6 <_dtoa_r+0x8b6>
 8007d38:	9a06      	ldr	r2, [sp, #24]
 8007d3a:	2a01      	cmp	r2, #1
 8007d3c:	f300 80ba 	bgt.w	8007eb4 <_dtoa_r+0x884>
 8007d40:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007d42:	2a00      	cmp	r2, #0
 8007d44:	f000 80b2 	beq.w	8007eac <_dtoa_r+0x87c>
 8007d48:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8007d4c:	9e07      	ldr	r6, [sp, #28]
 8007d4e:	9d04      	ldr	r5, [sp, #16]
 8007d50:	9a04      	ldr	r2, [sp, #16]
 8007d52:	441a      	add	r2, r3
 8007d54:	9204      	str	r2, [sp, #16]
 8007d56:	9a05      	ldr	r2, [sp, #20]
 8007d58:	2101      	movs	r1, #1
 8007d5a:	441a      	add	r2, r3
 8007d5c:	4620      	mov	r0, r4
 8007d5e:	9205      	str	r2, [sp, #20]
 8007d60:	f000 fb66 	bl	8008430 <__i2b>
 8007d64:	4607      	mov	r7, r0
 8007d66:	2d00      	cmp	r5, #0
 8007d68:	dd0c      	ble.n	8007d84 <_dtoa_r+0x754>
 8007d6a:	9b05      	ldr	r3, [sp, #20]
 8007d6c:	2b00      	cmp	r3, #0
 8007d6e:	dd09      	ble.n	8007d84 <_dtoa_r+0x754>
 8007d70:	42ab      	cmp	r3, r5
 8007d72:	9a04      	ldr	r2, [sp, #16]
 8007d74:	bfa8      	it	ge
 8007d76:	462b      	movge	r3, r5
 8007d78:	1ad2      	subs	r2, r2, r3
 8007d7a:	9204      	str	r2, [sp, #16]
 8007d7c:	9a05      	ldr	r2, [sp, #20]
 8007d7e:	1aed      	subs	r5, r5, r3
 8007d80:	1ad3      	subs	r3, r2, r3
 8007d82:	9305      	str	r3, [sp, #20]
 8007d84:	9b07      	ldr	r3, [sp, #28]
 8007d86:	b31b      	cbz	r3, 8007dd0 <_dtoa_r+0x7a0>
 8007d88:	9b08      	ldr	r3, [sp, #32]
 8007d8a:	2b00      	cmp	r3, #0
 8007d8c:	f000 80af 	beq.w	8007eee <_dtoa_r+0x8be>
 8007d90:	2e00      	cmp	r6, #0
 8007d92:	dd13      	ble.n	8007dbc <_dtoa_r+0x78c>
 8007d94:	4639      	mov	r1, r7
 8007d96:	4632      	mov	r2, r6
 8007d98:	4620      	mov	r0, r4
 8007d9a:	f000 fc09 	bl	80085b0 <__pow5mult>
 8007d9e:	ee18 2a10 	vmov	r2, s16
 8007da2:	4601      	mov	r1, r0
 8007da4:	4607      	mov	r7, r0
 8007da6:	4620      	mov	r0, r4
 8007da8:	f000 fb58 	bl	800845c <__multiply>
 8007dac:	ee18 1a10 	vmov	r1, s16
 8007db0:	4680      	mov	r8, r0
 8007db2:	4620      	mov	r0, r4
 8007db4:	f000 fa84 	bl	80082c0 <_Bfree>
 8007db8:	ee08 8a10 	vmov	s16, r8
 8007dbc:	9b07      	ldr	r3, [sp, #28]
 8007dbe:	1b9a      	subs	r2, r3, r6
 8007dc0:	d006      	beq.n	8007dd0 <_dtoa_r+0x7a0>
 8007dc2:	ee18 1a10 	vmov	r1, s16
 8007dc6:	4620      	mov	r0, r4
 8007dc8:	f000 fbf2 	bl	80085b0 <__pow5mult>
 8007dcc:	ee08 0a10 	vmov	s16, r0
 8007dd0:	2101      	movs	r1, #1
 8007dd2:	4620      	mov	r0, r4
 8007dd4:	f000 fb2c 	bl	8008430 <__i2b>
 8007dd8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007dda:	2b00      	cmp	r3, #0
 8007ddc:	4606      	mov	r6, r0
 8007dde:	f340 8088 	ble.w	8007ef2 <_dtoa_r+0x8c2>
 8007de2:	461a      	mov	r2, r3
 8007de4:	4601      	mov	r1, r0
 8007de6:	4620      	mov	r0, r4
 8007de8:	f000 fbe2 	bl	80085b0 <__pow5mult>
 8007dec:	9b06      	ldr	r3, [sp, #24]
 8007dee:	2b01      	cmp	r3, #1
 8007df0:	4606      	mov	r6, r0
 8007df2:	f340 8081 	ble.w	8007ef8 <_dtoa_r+0x8c8>
 8007df6:	f04f 0800 	mov.w	r8, #0
 8007dfa:	6933      	ldr	r3, [r6, #16]
 8007dfc:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8007e00:	6918      	ldr	r0, [r3, #16]
 8007e02:	f000 fac5 	bl	8008390 <__hi0bits>
 8007e06:	f1c0 0020 	rsb	r0, r0, #32
 8007e0a:	9b05      	ldr	r3, [sp, #20]
 8007e0c:	4418      	add	r0, r3
 8007e0e:	f010 001f 	ands.w	r0, r0, #31
 8007e12:	f000 8092 	beq.w	8007f3a <_dtoa_r+0x90a>
 8007e16:	f1c0 0320 	rsb	r3, r0, #32
 8007e1a:	2b04      	cmp	r3, #4
 8007e1c:	f340 808a 	ble.w	8007f34 <_dtoa_r+0x904>
 8007e20:	f1c0 001c 	rsb	r0, r0, #28
 8007e24:	9b04      	ldr	r3, [sp, #16]
 8007e26:	4403      	add	r3, r0
 8007e28:	9304      	str	r3, [sp, #16]
 8007e2a:	9b05      	ldr	r3, [sp, #20]
 8007e2c:	4403      	add	r3, r0
 8007e2e:	4405      	add	r5, r0
 8007e30:	9305      	str	r3, [sp, #20]
 8007e32:	9b04      	ldr	r3, [sp, #16]
 8007e34:	2b00      	cmp	r3, #0
 8007e36:	dd07      	ble.n	8007e48 <_dtoa_r+0x818>
 8007e38:	ee18 1a10 	vmov	r1, s16
 8007e3c:	461a      	mov	r2, r3
 8007e3e:	4620      	mov	r0, r4
 8007e40:	f000 fc10 	bl	8008664 <__lshift>
 8007e44:	ee08 0a10 	vmov	s16, r0
 8007e48:	9b05      	ldr	r3, [sp, #20]
 8007e4a:	2b00      	cmp	r3, #0
 8007e4c:	dd05      	ble.n	8007e5a <_dtoa_r+0x82a>
 8007e4e:	4631      	mov	r1, r6
 8007e50:	461a      	mov	r2, r3
 8007e52:	4620      	mov	r0, r4
 8007e54:	f000 fc06 	bl	8008664 <__lshift>
 8007e58:	4606      	mov	r6, r0
 8007e5a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007e5c:	2b00      	cmp	r3, #0
 8007e5e:	d06e      	beq.n	8007f3e <_dtoa_r+0x90e>
 8007e60:	ee18 0a10 	vmov	r0, s16
 8007e64:	4631      	mov	r1, r6
 8007e66:	f000 fc6d 	bl	8008744 <__mcmp>
 8007e6a:	2800      	cmp	r0, #0
 8007e6c:	da67      	bge.n	8007f3e <_dtoa_r+0x90e>
 8007e6e:	9b00      	ldr	r3, [sp, #0]
 8007e70:	3b01      	subs	r3, #1
 8007e72:	ee18 1a10 	vmov	r1, s16
 8007e76:	9300      	str	r3, [sp, #0]
 8007e78:	220a      	movs	r2, #10
 8007e7a:	2300      	movs	r3, #0
 8007e7c:	4620      	mov	r0, r4
 8007e7e:	f000 fa41 	bl	8008304 <__multadd>
 8007e82:	9b08      	ldr	r3, [sp, #32]
 8007e84:	ee08 0a10 	vmov	s16, r0
 8007e88:	2b00      	cmp	r3, #0
 8007e8a:	f000 81b1 	beq.w	80081f0 <_dtoa_r+0xbc0>
 8007e8e:	2300      	movs	r3, #0
 8007e90:	4639      	mov	r1, r7
 8007e92:	220a      	movs	r2, #10
 8007e94:	4620      	mov	r0, r4
 8007e96:	f000 fa35 	bl	8008304 <__multadd>
 8007e9a:	9b02      	ldr	r3, [sp, #8]
 8007e9c:	2b00      	cmp	r3, #0
 8007e9e:	4607      	mov	r7, r0
 8007ea0:	f300 808e 	bgt.w	8007fc0 <_dtoa_r+0x990>
 8007ea4:	9b06      	ldr	r3, [sp, #24]
 8007ea6:	2b02      	cmp	r3, #2
 8007ea8:	dc51      	bgt.n	8007f4e <_dtoa_r+0x91e>
 8007eaa:	e089      	b.n	8007fc0 <_dtoa_r+0x990>
 8007eac:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007eae:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8007eb2:	e74b      	b.n	8007d4c <_dtoa_r+0x71c>
 8007eb4:	9b03      	ldr	r3, [sp, #12]
 8007eb6:	1e5e      	subs	r6, r3, #1
 8007eb8:	9b07      	ldr	r3, [sp, #28]
 8007eba:	42b3      	cmp	r3, r6
 8007ebc:	bfbf      	itttt	lt
 8007ebe:	9b07      	ldrlt	r3, [sp, #28]
 8007ec0:	9607      	strlt	r6, [sp, #28]
 8007ec2:	1af2      	sublt	r2, r6, r3
 8007ec4:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8007ec6:	bfb6      	itet	lt
 8007ec8:	189b      	addlt	r3, r3, r2
 8007eca:	1b9e      	subge	r6, r3, r6
 8007ecc:	930a      	strlt	r3, [sp, #40]	; 0x28
 8007ece:	9b03      	ldr	r3, [sp, #12]
 8007ed0:	bfb8      	it	lt
 8007ed2:	2600      	movlt	r6, #0
 8007ed4:	2b00      	cmp	r3, #0
 8007ed6:	bfb7      	itett	lt
 8007ed8:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 8007edc:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8007ee0:	1a9d      	sublt	r5, r3, r2
 8007ee2:	2300      	movlt	r3, #0
 8007ee4:	e734      	b.n	8007d50 <_dtoa_r+0x720>
 8007ee6:	9e07      	ldr	r6, [sp, #28]
 8007ee8:	9d04      	ldr	r5, [sp, #16]
 8007eea:	9f08      	ldr	r7, [sp, #32]
 8007eec:	e73b      	b.n	8007d66 <_dtoa_r+0x736>
 8007eee:	9a07      	ldr	r2, [sp, #28]
 8007ef0:	e767      	b.n	8007dc2 <_dtoa_r+0x792>
 8007ef2:	9b06      	ldr	r3, [sp, #24]
 8007ef4:	2b01      	cmp	r3, #1
 8007ef6:	dc18      	bgt.n	8007f2a <_dtoa_r+0x8fa>
 8007ef8:	f1ba 0f00 	cmp.w	sl, #0
 8007efc:	d115      	bne.n	8007f2a <_dtoa_r+0x8fa>
 8007efe:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007f02:	b993      	cbnz	r3, 8007f2a <_dtoa_r+0x8fa>
 8007f04:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8007f08:	0d1b      	lsrs	r3, r3, #20
 8007f0a:	051b      	lsls	r3, r3, #20
 8007f0c:	b183      	cbz	r3, 8007f30 <_dtoa_r+0x900>
 8007f0e:	9b04      	ldr	r3, [sp, #16]
 8007f10:	3301      	adds	r3, #1
 8007f12:	9304      	str	r3, [sp, #16]
 8007f14:	9b05      	ldr	r3, [sp, #20]
 8007f16:	3301      	adds	r3, #1
 8007f18:	9305      	str	r3, [sp, #20]
 8007f1a:	f04f 0801 	mov.w	r8, #1
 8007f1e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007f20:	2b00      	cmp	r3, #0
 8007f22:	f47f af6a 	bne.w	8007dfa <_dtoa_r+0x7ca>
 8007f26:	2001      	movs	r0, #1
 8007f28:	e76f      	b.n	8007e0a <_dtoa_r+0x7da>
 8007f2a:	f04f 0800 	mov.w	r8, #0
 8007f2e:	e7f6      	b.n	8007f1e <_dtoa_r+0x8ee>
 8007f30:	4698      	mov	r8, r3
 8007f32:	e7f4      	b.n	8007f1e <_dtoa_r+0x8ee>
 8007f34:	f43f af7d 	beq.w	8007e32 <_dtoa_r+0x802>
 8007f38:	4618      	mov	r0, r3
 8007f3a:	301c      	adds	r0, #28
 8007f3c:	e772      	b.n	8007e24 <_dtoa_r+0x7f4>
 8007f3e:	9b03      	ldr	r3, [sp, #12]
 8007f40:	2b00      	cmp	r3, #0
 8007f42:	dc37      	bgt.n	8007fb4 <_dtoa_r+0x984>
 8007f44:	9b06      	ldr	r3, [sp, #24]
 8007f46:	2b02      	cmp	r3, #2
 8007f48:	dd34      	ble.n	8007fb4 <_dtoa_r+0x984>
 8007f4a:	9b03      	ldr	r3, [sp, #12]
 8007f4c:	9302      	str	r3, [sp, #8]
 8007f4e:	9b02      	ldr	r3, [sp, #8]
 8007f50:	b96b      	cbnz	r3, 8007f6e <_dtoa_r+0x93e>
 8007f52:	4631      	mov	r1, r6
 8007f54:	2205      	movs	r2, #5
 8007f56:	4620      	mov	r0, r4
 8007f58:	f000 f9d4 	bl	8008304 <__multadd>
 8007f5c:	4601      	mov	r1, r0
 8007f5e:	4606      	mov	r6, r0
 8007f60:	ee18 0a10 	vmov	r0, s16
 8007f64:	f000 fbee 	bl	8008744 <__mcmp>
 8007f68:	2800      	cmp	r0, #0
 8007f6a:	f73f adbb 	bgt.w	8007ae4 <_dtoa_r+0x4b4>
 8007f6e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007f70:	9d01      	ldr	r5, [sp, #4]
 8007f72:	43db      	mvns	r3, r3
 8007f74:	9300      	str	r3, [sp, #0]
 8007f76:	f04f 0800 	mov.w	r8, #0
 8007f7a:	4631      	mov	r1, r6
 8007f7c:	4620      	mov	r0, r4
 8007f7e:	f000 f99f 	bl	80082c0 <_Bfree>
 8007f82:	2f00      	cmp	r7, #0
 8007f84:	f43f aea4 	beq.w	8007cd0 <_dtoa_r+0x6a0>
 8007f88:	f1b8 0f00 	cmp.w	r8, #0
 8007f8c:	d005      	beq.n	8007f9a <_dtoa_r+0x96a>
 8007f8e:	45b8      	cmp	r8, r7
 8007f90:	d003      	beq.n	8007f9a <_dtoa_r+0x96a>
 8007f92:	4641      	mov	r1, r8
 8007f94:	4620      	mov	r0, r4
 8007f96:	f000 f993 	bl	80082c0 <_Bfree>
 8007f9a:	4639      	mov	r1, r7
 8007f9c:	4620      	mov	r0, r4
 8007f9e:	f000 f98f 	bl	80082c0 <_Bfree>
 8007fa2:	e695      	b.n	8007cd0 <_dtoa_r+0x6a0>
 8007fa4:	2600      	movs	r6, #0
 8007fa6:	4637      	mov	r7, r6
 8007fa8:	e7e1      	b.n	8007f6e <_dtoa_r+0x93e>
 8007faa:	9700      	str	r7, [sp, #0]
 8007fac:	4637      	mov	r7, r6
 8007fae:	e599      	b.n	8007ae4 <_dtoa_r+0x4b4>
 8007fb0:	40240000 	.word	0x40240000
 8007fb4:	9b08      	ldr	r3, [sp, #32]
 8007fb6:	2b00      	cmp	r3, #0
 8007fb8:	f000 80ca 	beq.w	8008150 <_dtoa_r+0xb20>
 8007fbc:	9b03      	ldr	r3, [sp, #12]
 8007fbe:	9302      	str	r3, [sp, #8]
 8007fc0:	2d00      	cmp	r5, #0
 8007fc2:	dd05      	ble.n	8007fd0 <_dtoa_r+0x9a0>
 8007fc4:	4639      	mov	r1, r7
 8007fc6:	462a      	mov	r2, r5
 8007fc8:	4620      	mov	r0, r4
 8007fca:	f000 fb4b 	bl	8008664 <__lshift>
 8007fce:	4607      	mov	r7, r0
 8007fd0:	f1b8 0f00 	cmp.w	r8, #0
 8007fd4:	d05b      	beq.n	800808e <_dtoa_r+0xa5e>
 8007fd6:	6879      	ldr	r1, [r7, #4]
 8007fd8:	4620      	mov	r0, r4
 8007fda:	f000 f931 	bl	8008240 <_Balloc>
 8007fde:	4605      	mov	r5, r0
 8007fe0:	b928      	cbnz	r0, 8007fee <_dtoa_r+0x9be>
 8007fe2:	4b87      	ldr	r3, [pc, #540]	; (8008200 <_dtoa_r+0xbd0>)
 8007fe4:	4602      	mov	r2, r0
 8007fe6:	f240 21ea 	movw	r1, #746	; 0x2ea
 8007fea:	f7ff bb3b 	b.w	8007664 <_dtoa_r+0x34>
 8007fee:	693a      	ldr	r2, [r7, #16]
 8007ff0:	3202      	adds	r2, #2
 8007ff2:	0092      	lsls	r2, r2, #2
 8007ff4:	f107 010c 	add.w	r1, r7, #12
 8007ff8:	300c      	adds	r0, #12
 8007ffa:	f000 f913 	bl	8008224 <memcpy>
 8007ffe:	2201      	movs	r2, #1
 8008000:	4629      	mov	r1, r5
 8008002:	4620      	mov	r0, r4
 8008004:	f000 fb2e 	bl	8008664 <__lshift>
 8008008:	9b01      	ldr	r3, [sp, #4]
 800800a:	f103 0901 	add.w	r9, r3, #1
 800800e:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8008012:	4413      	add	r3, r2
 8008014:	9305      	str	r3, [sp, #20]
 8008016:	f00a 0301 	and.w	r3, sl, #1
 800801a:	46b8      	mov	r8, r7
 800801c:	9304      	str	r3, [sp, #16]
 800801e:	4607      	mov	r7, r0
 8008020:	4631      	mov	r1, r6
 8008022:	ee18 0a10 	vmov	r0, s16
 8008026:	f7ff fa76 	bl	8007516 <quorem>
 800802a:	4641      	mov	r1, r8
 800802c:	9002      	str	r0, [sp, #8]
 800802e:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8008032:	ee18 0a10 	vmov	r0, s16
 8008036:	f000 fb85 	bl	8008744 <__mcmp>
 800803a:	463a      	mov	r2, r7
 800803c:	9003      	str	r0, [sp, #12]
 800803e:	4631      	mov	r1, r6
 8008040:	4620      	mov	r0, r4
 8008042:	f000 fb9b 	bl	800877c <__mdiff>
 8008046:	68c2      	ldr	r2, [r0, #12]
 8008048:	f109 3bff 	add.w	fp, r9, #4294967295
 800804c:	4605      	mov	r5, r0
 800804e:	bb02      	cbnz	r2, 8008092 <_dtoa_r+0xa62>
 8008050:	4601      	mov	r1, r0
 8008052:	ee18 0a10 	vmov	r0, s16
 8008056:	f000 fb75 	bl	8008744 <__mcmp>
 800805a:	4602      	mov	r2, r0
 800805c:	4629      	mov	r1, r5
 800805e:	4620      	mov	r0, r4
 8008060:	9207      	str	r2, [sp, #28]
 8008062:	f000 f92d 	bl	80082c0 <_Bfree>
 8008066:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800806a:	ea43 0102 	orr.w	r1, r3, r2
 800806e:	9b04      	ldr	r3, [sp, #16]
 8008070:	430b      	orrs	r3, r1
 8008072:	464d      	mov	r5, r9
 8008074:	d10f      	bne.n	8008096 <_dtoa_r+0xa66>
 8008076:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800807a:	d02a      	beq.n	80080d2 <_dtoa_r+0xaa2>
 800807c:	9b03      	ldr	r3, [sp, #12]
 800807e:	2b00      	cmp	r3, #0
 8008080:	dd02      	ble.n	8008088 <_dtoa_r+0xa58>
 8008082:	9b02      	ldr	r3, [sp, #8]
 8008084:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8008088:	f88b a000 	strb.w	sl, [fp]
 800808c:	e775      	b.n	8007f7a <_dtoa_r+0x94a>
 800808e:	4638      	mov	r0, r7
 8008090:	e7ba      	b.n	8008008 <_dtoa_r+0x9d8>
 8008092:	2201      	movs	r2, #1
 8008094:	e7e2      	b.n	800805c <_dtoa_r+0xa2c>
 8008096:	9b03      	ldr	r3, [sp, #12]
 8008098:	2b00      	cmp	r3, #0
 800809a:	db04      	blt.n	80080a6 <_dtoa_r+0xa76>
 800809c:	9906      	ldr	r1, [sp, #24]
 800809e:	430b      	orrs	r3, r1
 80080a0:	9904      	ldr	r1, [sp, #16]
 80080a2:	430b      	orrs	r3, r1
 80080a4:	d122      	bne.n	80080ec <_dtoa_r+0xabc>
 80080a6:	2a00      	cmp	r2, #0
 80080a8:	ddee      	ble.n	8008088 <_dtoa_r+0xa58>
 80080aa:	ee18 1a10 	vmov	r1, s16
 80080ae:	2201      	movs	r2, #1
 80080b0:	4620      	mov	r0, r4
 80080b2:	f000 fad7 	bl	8008664 <__lshift>
 80080b6:	4631      	mov	r1, r6
 80080b8:	ee08 0a10 	vmov	s16, r0
 80080bc:	f000 fb42 	bl	8008744 <__mcmp>
 80080c0:	2800      	cmp	r0, #0
 80080c2:	dc03      	bgt.n	80080cc <_dtoa_r+0xa9c>
 80080c4:	d1e0      	bne.n	8008088 <_dtoa_r+0xa58>
 80080c6:	f01a 0f01 	tst.w	sl, #1
 80080ca:	d0dd      	beq.n	8008088 <_dtoa_r+0xa58>
 80080cc:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80080d0:	d1d7      	bne.n	8008082 <_dtoa_r+0xa52>
 80080d2:	2339      	movs	r3, #57	; 0x39
 80080d4:	f88b 3000 	strb.w	r3, [fp]
 80080d8:	462b      	mov	r3, r5
 80080da:	461d      	mov	r5, r3
 80080dc:	3b01      	subs	r3, #1
 80080de:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80080e2:	2a39      	cmp	r2, #57	; 0x39
 80080e4:	d071      	beq.n	80081ca <_dtoa_r+0xb9a>
 80080e6:	3201      	adds	r2, #1
 80080e8:	701a      	strb	r2, [r3, #0]
 80080ea:	e746      	b.n	8007f7a <_dtoa_r+0x94a>
 80080ec:	2a00      	cmp	r2, #0
 80080ee:	dd07      	ble.n	8008100 <_dtoa_r+0xad0>
 80080f0:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80080f4:	d0ed      	beq.n	80080d2 <_dtoa_r+0xaa2>
 80080f6:	f10a 0301 	add.w	r3, sl, #1
 80080fa:	f88b 3000 	strb.w	r3, [fp]
 80080fe:	e73c      	b.n	8007f7a <_dtoa_r+0x94a>
 8008100:	9b05      	ldr	r3, [sp, #20]
 8008102:	f809 ac01 	strb.w	sl, [r9, #-1]
 8008106:	4599      	cmp	r9, r3
 8008108:	d047      	beq.n	800819a <_dtoa_r+0xb6a>
 800810a:	ee18 1a10 	vmov	r1, s16
 800810e:	2300      	movs	r3, #0
 8008110:	220a      	movs	r2, #10
 8008112:	4620      	mov	r0, r4
 8008114:	f000 f8f6 	bl	8008304 <__multadd>
 8008118:	45b8      	cmp	r8, r7
 800811a:	ee08 0a10 	vmov	s16, r0
 800811e:	f04f 0300 	mov.w	r3, #0
 8008122:	f04f 020a 	mov.w	r2, #10
 8008126:	4641      	mov	r1, r8
 8008128:	4620      	mov	r0, r4
 800812a:	d106      	bne.n	800813a <_dtoa_r+0xb0a>
 800812c:	f000 f8ea 	bl	8008304 <__multadd>
 8008130:	4680      	mov	r8, r0
 8008132:	4607      	mov	r7, r0
 8008134:	f109 0901 	add.w	r9, r9, #1
 8008138:	e772      	b.n	8008020 <_dtoa_r+0x9f0>
 800813a:	f000 f8e3 	bl	8008304 <__multadd>
 800813e:	4639      	mov	r1, r7
 8008140:	4680      	mov	r8, r0
 8008142:	2300      	movs	r3, #0
 8008144:	220a      	movs	r2, #10
 8008146:	4620      	mov	r0, r4
 8008148:	f000 f8dc 	bl	8008304 <__multadd>
 800814c:	4607      	mov	r7, r0
 800814e:	e7f1      	b.n	8008134 <_dtoa_r+0xb04>
 8008150:	9b03      	ldr	r3, [sp, #12]
 8008152:	9302      	str	r3, [sp, #8]
 8008154:	9d01      	ldr	r5, [sp, #4]
 8008156:	ee18 0a10 	vmov	r0, s16
 800815a:	4631      	mov	r1, r6
 800815c:	f7ff f9db 	bl	8007516 <quorem>
 8008160:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8008164:	9b01      	ldr	r3, [sp, #4]
 8008166:	f805 ab01 	strb.w	sl, [r5], #1
 800816a:	1aea      	subs	r2, r5, r3
 800816c:	9b02      	ldr	r3, [sp, #8]
 800816e:	4293      	cmp	r3, r2
 8008170:	dd09      	ble.n	8008186 <_dtoa_r+0xb56>
 8008172:	ee18 1a10 	vmov	r1, s16
 8008176:	2300      	movs	r3, #0
 8008178:	220a      	movs	r2, #10
 800817a:	4620      	mov	r0, r4
 800817c:	f000 f8c2 	bl	8008304 <__multadd>
 8008180:	ee08 0a10 	vmov	s16, r0
 8008184:	e7e7      	b.n	8008156 <_dtoa_r+0xb26>
 8008186:	9b02      	ldr	r3, [sp, #8]
 8008188:	2b00      	cmp	r3, #0
 800818a:	bfc8      	it	gt
 800818c:	461d      	movgt	r5, r3
 800818e:	9b01      	ldr	r3, [sp, #4]
 8008190:	bfd8      	it	le
 8008192:	2501      	movle	r5, #1
 8008194:	441d      	add	r5, r3
 8008196:	f04f 0800 	mov.w	r8, #0
 800819a:	ee18 1a10 	vmov	r1, s16
 800819e:	2201      	movs	r2, #1
 80081a0:	4620      	mov	r0, r4
 80081a2:	f000 fa5f 	bl	8008664 <__lshift>
 80081a6:	4631      	mov	r1, r6
 80081a8:	ee08 0a10 	vmov	s16, r0
 80081ac:	f000 faca 	bl	8008744 <__mcmp>
 80081b0:	2800      	cmp	r0, #0
 80081b2:	dc91      	bgt.n	80080d8 <_dtoa_r+0xaa8>
 80081b4:	d102      	bne.n	80081bc <_dtoa_r+0xb8c>
 80081b6:	f01a 0f01 	tst.w	sl, #1
 80081ba:	d18d      	bne.n	80080d8 <_dtoa_r+0xaa8>
 80081bc:	462b      	mov	r3, r5
 80081be:	461d      	mov	r5, r3
 80081c0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80081c4:	2a30      	cmp	r2, #48	; 0x30
 80081c6:	d0fa      	beq.n	80081be <_dtoa_r+0xb8e>
 80081c8:	e6d7      	b.n	8007f7a <_dtoa_r+0x94a>
 80081ca:	9a01      	ldr	r2, [sp, #4]
 80081cc:	429a      	cmp	r2, r3
 80081ce:	d184      	bne.n	80080da <_dtoa_r+0xaaa>
 80081d0:	9b00      	ldr	r3, [sp, #0]
 80081d2:	3301      	adds	r3, #1
 80081d4:	9300      	str	r3, [sp, #0]
 80081d6:	2331      	movs	r3, #49	; 0x31
 80081d8:	7013      	strb	r3, [r2, #0]
 80081da:	e6ce      	b.n	8007f7a <_dtoa_r+0x94a>
 80081dc:	4b09      	ldr	r3, [pc, #36]	; (8008204 <_dtoa_r+0xbd4>)
 80081de:	f7ff ba95 	b.w	800770c <_dtoa_r+0xdc>
 80081e2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80081e4:	2b00      	cmp	r3, #0
 80081e6:	f47f aa6e 	bne.w	80076c6 <_dtoa_r+0x96>
 80081ea:	4b07      	ldr	r3, [pc, #28]	; (8008208 <_dtoa_r+0xbd8>)
 80081ec:	f7ff ba8e 	b.w	800770c <_dtoa_r+0xdc>
 80081f0:	9b02      	ldr	r3, [sp, #8]
 80081f2:	2b00      	cmp	r3, #0
 80081f4:	dcae      	bgt.n	8008154 <_dtoa_r+0xb24>
 80081f6:	9b06      	ldr	r3, [sp, #24]
 80081f8:	2b02      	cmp	r3, #2
 80081fa:	f73f aea8 	bgt.w	8007f4e <_dtoa_r+0x91e>
 80081fe:	e7a9      	b.n	8008154 <_dtoa_r+0xb24>
 8008200:	08009b27 	.word	0x08009b27
 8008204:	08009a84 	.word	0x08009a84
 8008208:	08009aa8 	.word	0x08009aa8

0800820c <_localeconv_r>:
 800820c:	4800      	ldr	r0, [pc, #0]	; (8008210 <_localeconv_r+0x4>)
 800820e:	4770      	bx	lr
 8008210:	20000164 	.word	0x20000164

08008214 <malloc>:
 8008214:	4b02      	ldr	r3, [pc, #8]	; (8008220 <malloc+0xc>)
 8008216:	4601      	mov	r1, r0
 8008218:	6818      	ldr	r0, [r3, #0]
 800821a:	f000 bc17 	b.w	8008a4c <_malloc_r>
 800821e:	bf00      	nop
 8008220:	20000010 	.word	0x20000010

08008224 <memcpy>:
 8008224:	440a      	add	r2, r1
 8008226:	4291      	cmp	r1, r2
 8008228:	f100 33ff 	add.w	r3, r0, #4294967295
 800822c:	d100      	bne.n	8008230 <memcpy+0xc>
 800822e:	4770      	bx	lr
 8008230:	b510      	push	{r4, lr}
 8008232:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008236:	f803 4f01 	strb.w	r4, [r3, #1]!
 800823a:	4291      	cmp	r1, r2
 800823c:	d1f9      	bne.n	8008232 <memcpy+0xe>
 800823e:	bd10      	pop	{r4, pc}

08008240 <_Balloc>:
 8008240:	b570      	push	{r4, r5, r6, lr}
 8008242:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8008244:	4604      	mov	r4, r0
 8008246:	460d      	mov	r5, r1
 8008248:	b976      	cbnz	r6, 8008268 <_Balloc+0x28>
 800824a:	2010      	movs	r0, #16
 800824c:	f7ff ffe2 	bl	8008214 <malloc>
 8008250:	4602      	mov	r2, r0
 8008252:	6260      	str	r0, [r4, #36]	; 0x24
 8008254:	b920      	cbnz	r0, 8008260 <_Balloc+0x20>
 8008256:	4b18      	ldr	r3, [pc, #96]	; (80082b8 <_Balloc+0x78>)
 8008258:	4818      	ldr	r0, [pc, #96]	; (80082bc <_Balloc+0x7c>)
 800825a:	2166      	movs	r1, #102	; 0x66
 800825c:	f000 fdd6 	bl	8008e0c <__assert_func>
 8008260:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008264:	6006      	str	r6, [r0, #0]
 8008266:	60c6      	str	r6, [r0, #12]
 8008268:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800826a:	68f3      	ldr	r3, [r6, #12]
 800826c:	b183      	cbz	r3, 8008290 <_Balloc+0x50>
 800826e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008270:	68db      	ldr	r3, [r3, #12]
 8008272:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8008276:	b9b8      	cbnz	r0, 80082a8 <_Balloc+0x68>
 8008278:	2101      	movs	r1, #1
 800827a:	fa01 f605 	lsl.w	r6, r1, r5
 800827e:	1d72      	adds	r2, r6, #5
 8008280:	0092      	lsls	r2, r2, #2
 8008282:	4620      	mov	r0, r4
 8008284:	f000 fb60 	bl	8008948 <_calloc_r>
 8008288:	b160      	cbz	r0, 80082a4 <_Balloc+0x64>
 800828a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800828e:	e00e      	b.n	80082ae <_Balloc+0x6e>
 8008290:	2221      	movs	r2, #33	; 0x21
 8008292:	2104      	movs	r1, #4
 8008294:	4620      	mov	r0, r4
 8008296:	f000 fb57 	bl	8008948 <_calloc_r>
 800829a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800829c:	60f0      	str	r0, [r6, #12]
 800829e:	68db      	ldr	r3, [r3, #12]
 80082a0:	2b00      	cmp	r3, #0
 80082a2:	d1e4      	bne.n	800826e <_Balloc+0x2e>
 80082a4:	2000      	movs	r0, #0
 80082a6:	bd70      	pop	{r4, r5, r6, pc}
 80082a8:	6802      	ldr	r2, [r0, #0]
 80082aa:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80082ae:	2300      	movs	r3, #0
 80082b0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80082b4:	e7f7      	b.n	80082a6 <_Balloc+0x66>
 80082b6:	bf00      	nop
 80082b8:	08009ab5 	.word	0x08009ab5
 80082bc:	08009b38 	.word	0x08009b38

080082c0 <_Bfree>:
 80082c0:	b570      	push	{r4, r5, r6, lr}
 80082c2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80082c4:	4605      	mov	r5, r0
 80082c6:	460c      	mov	r4, r1
 80082c8:	b976      	cbnz	r6, 80082e8 <_Bfree+0x28>
 80082ca:	2010      	movs	r0, #16
 80082cc:	f7ff ffa2 	bl	8008214 <malloc>
 80082d0:	4602      	mov	r2, r0
 80082d2:	6268      	str	r0, [r5, #36]	; 0x24
 80082d4:	b920      	cbnz	r0, 80082e0 <_Bfree+0x20>
 80082d6:	4b09      	ldr	r3, [pc, #36]	; (80082fc <_Bfree+0x3c>)
 80082d8:	4809      	ldr	r0, [pc, #36]	; (8008300 <_Bfree+0x40>)
 80082da:	218a      	movs	r1, #138	; 0x8a
 80082dc:	f000 fd96 	bl	8008e0c <__assert_func>
 80082e0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80082e4:	6006      	str	r6, [r0, #0]
 80082e6:	60c6      	str	r6, [r0, #12]
 80082e8:	b13c      	cbz	r4, 80082fa <_Bfree+0x3a>
 80082ea:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80082ec:	6862      	ldr	r2, [r4, #4]
 80082ee:	68db      	ldr	r3, [r3, #12]
 80082f0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80082f4:	6021      	str	r1, [r4, #0]
 80082f6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80082fa:	bd70      	pop	{r4, r5, r6, pc}
 80082fc:	08009ab5 	.word	0x08009ab5
 8008300:	08009b38 	.word	0x08009b38

08008304 <__multadd>:
 8008304:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008308:	690d      	ldr	r5, [r1, #16]
 800830a:	4607      	mov	r7, r0
 800830c:	460c      	mov	r4, r1
 800830e:	461e      	mov	r6, r3
 8008310:	f101 0c14 	add.w	ip, r1, #20
 8008314:	2000      	movs	r0, #0
 8008316:	f8dc 3000 	ldr.w	r3, [ip]
 800831a:	b299      	uxth	r1, r3
 800831c:	fb02 6101 	mla	r1, r2, r1, r6
 8008320:	0c1e      	lsrs	r6, r3, #16
 8008322:	0c0b      	lsrs	r3, r1, #16
 8008324:	fb02 3306 	mla	r3, r2, r6, r3
 8008328:	b289      	uxth	r1, r1
 800832a:	3001      	adds	r0, #1
 800832c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8008330:	4285      	cmp	r5, r0
 8008332:	f84c 1b04 	str.w	r1, [ip], #4
 8008336:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800833a:	dcec      	bgt.n	8008316 <__multadd+0x12>
 800833c:	b30e      	cbz	r6, 8008382 <__multadd+0x7e>
 800833e:	68a3      	ldr	r3, [r4, #8]
 8008340:	42ab      	cmp	r3, r5
 8008342:	dc19      	bgt.n	8008378 <__multadd+0x74>
 8008344:	6861      	ldr	r1, [r4, #4]
 8008346:	4638      	mov	r0, r7
 8008348:	3101      	adds	r1, #1
 800834a:	f7ff ff79 	bl	8008240 <_Balloc>
 800834e:	4680      	mov	r8, r0
 8008350:	b928      	cbnz	r0, 800835e <__multadd+0x5a>
 8008352:	4602      	mov	r2, r0
 8008354:	4b0c      	ldr	r3, [pc, #48]	; (8008388 <__multadd+0x84>)
 8008356:	480d      	ldr	r0, [pc, #52]	; (800838c <__multadd+0x88>)
 8008358:	21b5      	movs	r1, #181	; 0xb5
 800835a:	f000 fd57 	bl	8008e0c <__assert_func>
 800835e:	6922      	ldr	r2, [r4, #16]
 8008360:	3202      	adds	r2, #2
 8008362:	f104 010c 	add.w	r1, r4, #12
 8008366:	0092      	lsls	r2, r2, #2
 8008368:	300c      	adds	r0, #12
 800836a:	f7ff ff5b 	bl	8008224 <memcpy>
 800836e:	4621      	mov	r1, r4
 8008370:	4638      	mov	r0, r7
 8008372:	f7ff ffa5 	bl	80082c0 <_Bfree>
 8008376:	4644      	mov	r4, r8
 8008378:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800837c:	3501      	adds	r5, #1
 800837e:	615e      	str	r6, [r3, #20]
 8008380:	6125      	str	r5, [r4, #16]
 8008382:	4620      	mov	r0, r4
 8008384:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008388:	08009b27 	.word	0x08009b27
 800838c:	08009b38 	.word	0x08009b38

08008390 <__hi0bits>:
 8008390:	0c03      	lsrs	r3, r0, #16
 8008392:	041b      	lsls	r3, r3, #16
 8008394:	b9d3      	cbnz	r3, 80083cc <__hi0bits+0x3c>
 8008396:	0400      	lsls	r0, r0, #16
 8008398:	2310      	movs	r3, #16
 800839a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800839e:	bf04      	itt	eq
 80083a0:	0200      	lsleq	r0, r0, #8
 80083a2:	3308      	addeq	r3, #8
 80083a4:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80083a8:	bf04      	itt	eq
 80083aa:	0100      	lsleq	r0, r0, #4
 80083ac:	3304      	addeq	r3, #4
 80083ae:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80083b2:	bf04      	itt	eq
 80083b4:	0080      	lsleq	r0, r0, #2
 80083b6:	3302      	addeq	r3, #2
 80083b8:	2800      	cmp	r0, #0
 80083ba:	db05      	blt.n	80083c8 <__hi0bits+0x38>
 80083bc:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80083c0:	f103 0301 	add.w	r3, r3, #1
 80083c4:	bf08      	it	eq
 80083c6:	2320      	moveq	r3, #32
 80083c8:	4618      	mov	r0, r3
 80083ca:	4770      	bx	lr
 80083cc:	2300      	movs	r3, #0
 80083ce:	e7e4      	b.n	800839a <__hi0bits+0xa>

080083d0 <__lo0bits>:
 80083d0:	6803      	ldr	r3, [r0, #0]
 80083d2:	f013 0207 	ands.w	r2, r3, #7
 80083d6:	4601      	mov	r1, r0
 80083d8:	d00b      	beq.n	80083f2 <__lo0bits+0x22>
 80083da:	07da      	lsls	r2, r3, #31
 80083dc:	d423      	bmi.n	8008426 <__lo0bits+0x56>
 80083de:	0798      	lsls	r0, r3, #30
 80083e0:	bf49      	itett	mi
 80083e2:	085b      	lsrmi	r3, r3, #1
 80083e4:	089b      	lsrpl	r3, r3, #2
 80083e6:	2001      	movmi	r0, #1
 80083e8:	600b      	strmi	r3, [r1, #0]
 80083ea:	bf5c      	itt	pl
 80083ec:	600b      	strpl	r3, [r1, #0]
 80083ee:	2002      	movpl	r0, #2
 80083f0:	4770      	bx	lr
 80083f2:	b298      	uxth	r0, r3
 80083f4:	b9a8      	cbnz	r0, 8008422 <__lo0bits+0x52>
 80083f6:	0c1b      	lsrs	r3, r3, #16
 80083f8:	2010      	movs	r0, #16
 80083fa:	b2da      	uxtb	r2, r3
 80083fc:	b90a      	cbnz	r2, 8008402 <__lo0bits+0x32>
 80083fe:	3008      	adds	r0, #8
 8008400:	0a1b      	lsrs	r3, r3, #8
 8008402:	071a      	lsls	r2, r3, #28
 8008404:	bf04      	itt	eq
 8008406:	091b      	lsreq	r3, r3, #4
 8008408:	3004      	addeq	r0, #4
 800840a:	079a      	lsls	r2, r3, #30
 800840c:	bf04      	itt	eq
 800840e:	089b      	lsreq	r3, r3, #2
 8008410:	3002      	addeq	r0, #2
 8008412:	07da      	lsls	r2, r3, #31
 8008414:	d403      	bmi.n	800841e <__lo0bits+0x4e>
 8008416:	085b      	lsrs	r3, r3, #1
 8008418:	f100 0001 	add.w	r0, r0, #1
 800841c:	d005      	beq.n	800842a <__lo0bits+0x5a>
 800841e:	600b      	str	r3, [r1, #0]
 8008420:	4770      	bx	lr
 8008422:	4610      	mov	r0, r2
 8008424:	e7e9      	b.n	80083fa <__lo0bits+0x2a>
 8008426:	2000      	movs	r0, #0
 8008428:	4770      	bx	lr
 800842a:	2020      	movs	r0, #32
 800842c:	4770      	bx	lr
	...

08008430 <__i2b>:
 8008430:	b510      	push	{r4, lr}
 8008432:	460c      	mov	r4, r1
 8008434:	2101      	movs	r1, #1
 8008436:	f7ff ff03 	bl	8008240 <_Balloc>
 800843a:	4602      	mov	r2, r0
 800843c:	b928      	cbnz	r0, 800844a <__i2b+0x1a>
 800843e:	4b05      	ldr	r3, [pc, #20]	; (8008454 <__i2b+0x24>)
 8008440:	4805      	ldr	r0, [pc, #20]	; (8008458 <__i2b+0x28>)
 8008442:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8008446:	f000 fce1 	bl	8008e0c <__assert_func>
 800844a:	2301      	movs	r3, #1
 800844c:	6144      	str	r4, [r0, #20]
 800844e:	6103      	str	r3, [r0, #16]
 8008450:	bd10      	pop	{r4, pc}
 8008452:	bf00      	nop
 8008454:	08009b27 	.word	0x08009b27
 8008458:	08009b38 	.word	0x08009b38

0800845c <__multiply>:
 800845c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008460:	4691      	mov	r9, r2
 8008462:	690a      	ldr	r2, [r1, #16]
 8008464:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8008468:	429a      	cmp	r2, r3
 800846a:	bfb8      	it	lt
 800846c:	460b      	movlt	r3, r1
 800846e:	460c      	mov	r4, r1
 8008470:	bfbc      	itt	lt
 8008472:	464c      	movlt	r4, r9
 8008474:	4699      	movlt	r9, r3
 8008476:	6927      	ldr	r7, [r4, #16]
 8008478:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800847c:	68a3      	ldr	r3, [r4, #8]
 800847e:	6861      	ldr	r1, [r4, #4]
 8008480:	eb07 060a 	add.w	r6, r7, sl
 8008484:	42b3      	cmp	r3, r6
 8008486:	b085      	sub	sp, #20
 8008488:	bfb8      	it	lt
 800848a:	3101      	addlt	r1, #1
 800848c:	f7ff fed8 	bl	8008240 <_Balloc>
 8008490:	b930      	cbnz	r0, 80084a0 <__multiply+0x44>
 8008492:	4602      	mov	r2, r0
 8008494:	4b44      	ldr	r3, [pc, #272]	; (80085a8 <__multiply+0x14c>)
 8008496:	4845      	ldr	r0, [pc, #276]	; (80085ac <__multiply+0x150>)
 8008498:	f240 115d 	movw	r1, #349	; 0x15d
 800849c:	f000 fcb6 	bl	8008e0c <__assert_func>
 80084a0:	f100 0514 	add.w	r5, r0, #20
 80084a4:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80084a8:	462b      	mov	r3, r5
 80084aa:	2200      	movs	r2, #0
 80084ac:	4543      	cmp	r3, r8
 80084ae:	d321      	bcc.n	80084f4 <__multiply+0x98>
 80084b0:	f104 0314 	add.w	r3, r4, #20
 80084b4:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 80084b8:	f109 0314 	add.w	r3, r9, #20
 80084bc:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 80084c0:	9202      	str	r2, [sp, #8]
 80084c2:	1b3a      	subs	r2, r7, r4
 80084c4:	3a15      	subs	r2, #21
 80084c6:	f022 0203 	bic.w	r2, r2, #3
 80084ca:	3204      	adds	r2, #4
 80084cc:	f104 0115 	add.w	r1, r4, #21
 80084d0:	428f      	cmp	r7, r1
 80084d2:	bf38      	it	cc
 80084d4:	2204      	movcc	r2, #4
 80084d6:	9201      	str	r2, [sp, #4]
 80084d8:	9a02      	ldr	r2, [sp, #8]
 80084da:	9303      	str	r3, [sp, #12]
 80084dc:	429a      	cmp	r2, r3
 80084de:	d80c      	bhi.n	80084fa <__multiply+0x9e>
 80084e0:	2e00      	cmp	r6, #0
 80084e2:	dd03      	ble.n	80084ec <__multiply+0x90>
 80084e4:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80084e8:	2b00      	cmp	r3, #0
 80084ea:	d05a      	beq.n	80085a2 <__multiply+0x146>
 80084ec:	6106      	str	r6, [r0, #16]
 80084ee:	b005      	add	sp, #20
 80084f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80084f4:	f843 2b04 	str.w	r2, [r3], #4
 80084f8:	e7d8      	b.n	80084ac <__multiply+0x50>
 80084fa:	f8b3 a000 	ldrh.w	sl, [r3]
 80084fe:	f1ba 0f00 	cmp.w	sl, #0
 8008502:	d024      	beq.n	800854e <__multiply+0xf2>
 8008504:	f104 0e14 	add.w	lr, r4, #20
 8008508:	46a9      	mov	r9, r5
 800850a:	f04f 0c00 	mov.w	ip, #0
 800850e:	f85e 2b04 	ldr.w	r2, [lr], #4
 8008512:	f8d9 1000 	ldr.w	r1, [r9]
 8008516:	fa1f fb82 	uxth.w	fp, r2
 800851a:	b289      	uxth	r1, r1
 800851c:	fb0a 110b 	mla	r1, sl, fp, r1
 8008520:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8008524:	f8d9 2000 	ldr.w	r2, [r9]
 8008528:	4461      	add	r1, ip
 800852a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800852e:	fb0a c20b 	mla	r2, sl, fp, ip
 8008532:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8008536:	b289      	uxth	r1, r1
 8008538:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800853c:	4577      	cmp	r7, lr
 800853e:	f849 1b04 	str.w	r1, [r9], #4
 8008542:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8008546:	d8e2      	bhi.n	800850e <__multiply+0xb2>
 8008548:	9a01      	ldr	r2, [sp, #4]
 800854a:	f845 c002 	str.w	ip, [r5, r2]
 800854e:	9a03      	ldr	r2, [sp, #12]
 8008550:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8008554:	3304      	adds	r3, #4
 8008556:	f1b9 0f00 	cmp.w	r9, #0
 800855a:	d020      	beq.n	800859e <__multiply+0x142>
 800855c:	6829      	ldr	r1, [r5, #0]
 800855e:	f104 0c14 	add.w	ip, r4, #20
 8008562:	46ae      	mov	lr, r5
 8008564:	f04f 0a00 	mov.w	sl, #0
 8008568:	f8bc b000 	ldrh.w	fp, [ip]
 800856c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8008570:	fb09 220b 	mla	r2, r9, fp, r2
 8008574:	4492      	add	sl, r2
 8008576:	b289      	uxth	r1, r1
 8008578:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800857c:	f84e 1b04 	str.w	r1, [lr], #4
 8008580:	f85c 2b04 	ldr.w	r2, [ip], #4
 8008584:	f8be 1000 	ldrh.w	r1, [lr]
 8008588:	0c12      	lsrs	r2, r2, #16
 800858a:	fb09 1102 	mla	r1, r9, r2, r1
 800858e:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8008592:	4567      	cmp	r7, ip
 8008594:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8008598:	d8e6      	bhi.n	8008568 <__multiply+0x10c>
 800859a:	9a01      	ldr	r2, [sp, #4]
 800859c:	50a9      	str	r1, [r5, r2]
 800859e:	3504      	adds	r5, #4
 80085a0:	e79a      	b.n	80084d8 <__multiply+0x7c>
 80085a2:	3e01      	subs	r6, #1
 80085a4:	e79c      	b.n	80084e0 <__multiply+0x84>
 80085a6:	bf00      	nop
 80085a8:	08009b27 	.word	0x08009b27
 80085ac:	08009b38 	.word	0x08009b38

080085b0 <__pow5mult>:
 80085b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80085b4:	4615      	mov	r5, r2
 80085b6:	f012 0203 	ands.w	r2, r2, #3
 80085ba:	4606      	mov	r6, r0
 80085bc:	460f      	mov	r7, r1
 80085be:	d007      	beq.n	80085d0 <__pow5mult+0x20>
 80085c0:	4c25      	ldr	r4, [pc, #148]	; (8008658 <__pow5mult+0xa8>)
 80085c2:	3a01      	subs	r2, #1
 80085c4:	2300      	movs	r3, #0
 80085c6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80085ca:	f7ff fe9b 	bl	8008304 <__multadd>
 80085ce:	4607      	mov	r7, r0
 80085d0:	10ad      	asrs	r5, r5, #2
 80085d2:	d03d      	beq.n	8008650 <__pow5mult+0xa0>
 80085d4:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80085d6:	b97c      	cbnz	r4, 80085f8 <__pow5mult+0x48>
 80085d8:	2010      	movs	r0, #16
 80085da:	f7ff fe1b 	bl	8008214 <malloc>
 80085de:	4602      	mov	r2, r0
 80085e0:	6270      	str	r0, [r6, #36]	; 0x24
 80085e2:	b928      	cbnz	r0, 80085f0 <__pow5mult+0x40>
 80085e4:	4b1d      	ldr	r3, [pc, #116]	; (800865c <__pow5mult+0xac>)
 80085e6:	481e      	ldr	r0, [pc, #120]	; (8008660 <__pow5mult+0xb0>)
 80085e8:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 80085ec:	f000 fc0e 	bl	8008e0c <__assert_func>
 80085f0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80085f4:	6004      	str	r4, [r0, #0]
 80085f6:	60c4      	str	r4, [r0, #12]
 80085f8:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80085fc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8008600:	b94c      	cbnz	r4, 8008616 <__pow5mult+0x66>
 8008602:	f240 2171 	movw	r1, #625	; 0x271
 8008606:	4630      	mov	r0, r6
 8008608:	f7ff ff12 	bl	8008430 <__i2b>
 800860c:	2300      	movs	r3, #0
 800860e:	f8c8 0008 	str.w	r0, [r8, #8]
 8008612:	4604      	mov	r4, r0
 8008614:	6003      	str	r3, [r0, #0]
 8008616:	f04f 0900 	mov.w	r9, #0
 800861a:	07eb      	lsls	r3, r5, #31
 800861c:	d50a      	bpl.n	8008634 <__pow5mult+0x84>
 800861e:	4639      	mov	r1, r7
 8008620:	4622      	mov	r2, r4
 8008622:	4630      	mov	r0, r6
 8008624:	f7ff ff1a 	bl	800845c <__multiply>
 8008628:	4639      	mov	r1, r7
 800862a:	4680      	mov	r8, r0
 800862c:	4630      	mov	r0, r6
 800862e:	f7ff fe47 	bl	80082c0 <_Bfree>
 8008632:	4647      	mov	r7, r8
 8008634:	106d      	asrs	r5, r5, #1
 8008636:	d00b      	beq.n	8008650 <__pow5mult+0xa0>
 8008638:	6820      	ldr	r0, [r4, #0]
 800863a:	b938      	cbnz	r0, 800864c <__pow5mult+0x9c>
 800863c:	4622      	mov	r2, r4
 800863e:	4621      	mov	r1, r4
 8008640:	4630      	mov	r0, r6
 8008642:	f7ff ff0b 	bl	800845c <__multiply>
 8008646:	6020      	str	r0, [r4, #0]
 8008648:	f8c0 9000 	str.w	r9, [r0]
 800864c:	4604      	mov	r4, r0
 800864e:	e7e4      	b.n	800861a <__pow5mult+0x6a>
 8008650:	4638      	mov	r0, r7
 8008652:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008656:	bf00      	nop
 8008658:	08009c88 	.word	0x08009c88
 800865c:	08009ab5 	.word	0x08009ab5
 8008660:	08009b38 	.word	0x08009b38

08008664 <__lshift>:
 8008664:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008668:	460c      	mov	r4, r1
 800866a:	6849      	ldr	r1, [r1, #4]
 800866c:	6923      	ldr	r3, [r4, #16]
 800866e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8008672:	68a3      	ldr	r3, [r4, #8]
 8008674:	4607      	mov	r7, r0
 8008676:	4691      	mov	r9, r2
 8008678:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800867c:	f108 0601 	add.w	r6, r8, #1
 8008680:	42b3      	cmp	r3, r6
 8008682:	db0b      	blt.n	800869c <__lshift+0x38>
 8008684:	4638      	mov	r0, r7
 8008686:	f7ff fddb 	bl	8008240 <_Balloc>
 800868a:	4605      	mov	r5, r0
 800868c:	b948      	cbnz	r0, 80086a2 <__lshift+0x3e>
 800868e:	4602      	mov	r2, r0
 8008690:	4b2a      	ldr	r3, [pc, #168]	; (800873c <__lshift+0xd8>)
 8008692:	482b      	ldr	r0, [pc, #172]	; (8008740 <__lshift+0xdc>)
 8008694:	f240 11d9 	movw	r1, #473	; 0x1d9
 8008698:	f000 fbb8 	bl	8008e0c <__assert_func>
 800869c:	3101      	adds	r1, #1
 800869e:	005b      	lsls	r3, r3, #1
 80086a0:	e7ee      	b.n	8008680 <__lshift+0x1c>
 80086a2:	2300      	movs	r3, #0
 80086a4:	f100 0114 	add.w	r1, r0, #20
 80086a8:	f100 0210 	add.w	r2, r0, #16
 80086ac:	4618      	mov	r0, r3
 80086ae:	4553      	cmp	r3, sl
 80086b0:	db37      	blt.n	8008722 <__lshift+0xbe>
 80086b2:	6920      	ldr	r0, [r4, #16]
 80086b4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80086b8:	f104 0314 	add.w	r3, r4, #20
 80086bc:	f019 091f 	ands.w	r9, r9, #31
 80086c0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80086c4:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80086c8:	d02f      	beq.n	800872a <__lshift+0xc6>
 80086ca:	f1c9 0e20 	rsb	lr, r9, #32
 80086ce:	468a      	mov	sl, r1
 80086d0:	f04f 0c00 	mov.w	ip, #0
 80086d4:	681a      	ldr	r2, [r3, #0]
 80086d6:	fa02 f209 	lsl.w	r2, r2, r9
 80086da:	ea42 020c 	orr.w	r2, r2, ip
 80086de:	f84a 2b04 	str.w	r2, [sl], #4
 80086e2:	f853 2b04 	ldr.w	r2, [r3], #4
 80086e6:	4298      	cmp	r0, r3
 80086e8:	fa22 fc0e 	lsr.w	ip, r2, lr
 80086ec:	d8f2      	bhi.n	80086d4 <__lshift+0x70>
 80086ee:	1b03      	subs	r3, r0, r4
 80086f0:	3b15      	subs	r3, #21
 80086f2:	f023 0303 	bic.w	r3, r3, #3
 80086f6:	3304      	adds	r3, #4
 80086f8:	f104 0215 	add.w	r2, r4, #21
 80086fc:	4290      	cmp	r0, r2
 80086fe:	bf38      	it	cc
 8008700:	2304      	movcc	r3, #4
 8008702:	f841 c003 	str.w	ip, [r1, r3]
 8008706:	f1bc 0f00 	cmp.w	ip, #0
 800870a:	d001      	beq.n	8008710 <__lshift+0xac>
 800870c:	f108 0602 	add.w	r6, r8, #2
 8008710:	3e01      	subs	r6, #1
 8008712:	4638      	mov	r0, r7
 8008714:	612e      	str	r6, [r5, #16]
 8008716:	4621      	mov	r1, r4
 8008718:	f7ff fdd2 	bl	80082c0 <_Bfree>
 800871c:	4628      	mov	r0, r5
 800871e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008722:	f842 0f04 	str.w	r0, [r2, #4]!
 8008726:	3301      	adds	r3, #1
 8008728:	e7c1      	b.n	80086ae <__lshift+0x4a>
 800872a:	3904      	subs	r1, #4
 800872c:	f853 2b04 	ldr.w	r2, [r3], #4
 8008730:	f841 2f04 	str.w	r2, [r1, #4]!
 8008734:	4298      	cmp	r0, r3
 8008736:	d8f9      	bhi.n	800872c <__lshift+0xc8>
 8008738:	e7ea      	b.n	8008710 <__lshift+0xac>
 800873a:	bf00      	nop
 800873c:	08009b27 	.word	0x08009b27
 8008740:	08009b38 	.word	0x08009b38

08008744 <__mcmp>:
 8008744:	b530      	push	{r4, r5, lr}
 8008746:	6902      	ldr	r2, [r0, #16]
 8008748:	690c      	ldr	r4, [r1, #16]
 800874a:	1b12      	subs	r2, r2, r4
 800874c:	d10e      	bne.n	800876c <__mcmp+0x28>
 800874e:	f100 0314 	add.w	r3, r0, #20
 8008752:	3114      	adds	r1, #20
 8008754:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8008758:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800875c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8008760:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8008764:	42a5      	cmp	r5, r4
 8008766:	d003      	beq.n	8008770 <__mcmp+0x2c>
 8008768:	d305      	bcc.n	8008776 <__mcmp+0x32>
 800876a:	2201      	movs	r2, #1
 800876c:	4610      	mov	r0, r2
 800876e:	bd30      	pop	{r4, r5, pc}
 8008770:	4283      	cmp	r3, r0
 8008772:	d3f3      	bcc.n	800875c <__mcmp+0x18>
 8008774:	e7fa      	b.n	800876c <__mcmp+0x28>
 8008776:	f04f 32ff 	mov.w	r2, #4294967295
 800877a:	e7f7      	b.n	800876c <__mcmp+0x28>

0800877c <__mdiff>:
 800877c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008780:	460c      	mov	r4, r1
 8008782:	4606      	mov	r6, r0
 8008784:	4611      	mov	r1, r2
 8008786:	4620      	mov	r0, r4
 8008788:	4690      	mov	r8, r2
 800878a:	f7ff ffdb 	bl	8008744 <__mcmp>
 800878e:	1e05      	subs	r5, r0, #0
 8008790:	d110      	bne.n	80087b4 <__mdiff+0x38>
 8008792:	4629      	mov	r1, r5
 8008794:	4630      	mov	r0, r6
 8008796:	f7ff fd53 	bl	8008240 <_Balloc>
 800879a:	b930      	cbnz	r0, 80087aa <__mdiff+0x2e>
 800879c:	4b3a      	ldr	r3, [pc, #232]	; (8008888 <__mdiff+0x10c>)
 800879e:	4602      	mov	r2, r0
 80087a0:	f240 2132 	movw	r1, #562	; 0x232
 80087a4:	4839      	ldr	r0, [pc, #228]	; (800888c <__mdiff+0x110>)
 80087a6:	f000 fb31 	bl	8008e0c <__assert_func>
 80087aa:	2301      	movs	r3, #1
 80087ac:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80087b0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80087b4:	bfa4      	itt	ge
 80087b6:	4643      	movge	r3, r8
 80087b8:	46a0      	movge	r8, r4
 80087ba:	4630      	mov	r0, r6
 80087bc:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80087c0:	bfa6      	itte	ge
 80087c2:	461c      	movge	r4, r3
 80087c4:	2500      	movge	r5, #0
 80087c6:	2501      	movlt	r5, #1
 80087c8:	f7ff fd3a 	bl	8008240 <_Balloc>
 80087cc:	b920      	cbnz	r0, 80087d8 <__mdiff+0x5c>
 80087ce:	4b2e      	ldr	r3, [pc, #184]	; (8008888 <__mdiff+0x10c>)
 80087d0:	4602      	mov	r2, r0
 80087d2:	f44f 7110 	mov.w	r1, #576	; 0x240
 80087d6:	e7e5      	b.n	80087a4 <__mdiff+0x28>
 80087d8:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80087dc:	6926      	ldr	r6, [r4, #16]
 80087de:	60c5      	str	r5, [r0, #12]
 80087e0:	f104 0914 	add.w	r9, r4, #20
 80087e4:	f108 0514 	add.w	r5, r8, #20
 80087e8:	f100 0e14 	add.w	lr, r0, #20
 80087ec:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 80087f0:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 80087f4:	f108 0210 	add.w	r2, r8, #16
 80087f8:	46f2      	mov	sl, lr
 80087fa:	2100      	movs	r1, #0
 80087fc:	f859 3b04 	ldr.w	r3, [r9], #4
 8008800:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8008804:	fa1f f883 	uxth.w	r8, r3
 8008808:	fa11 f18b 	uxtah	r1, r1, fp
 800880c:	0c1b      	lsrs	r3, r3, #16
 800880e:	eba1 0808 	sub.w	r8, r1, r8
 8008812:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8008816:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800881a:	fa1f f888 	uxth.w	r8, r8
 800881e:	1419      	asrs	r1, r3, #16
 8008820:	454e      	cmp	r6, r9
 8008822:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8008826:	f84a 3b04 	str.w	r3, [sl], #4
 800882a:	d8e7      	bhi.n	80087fc <__mdiff+0x80>
 800882c:	1b33      	subs	r3, r6, r4
 800882e:	3b15      	subs	r3, #21
 8008830:	f023 0303 	bic.w	r3, r3, #3
 8008834:	3304      	adds	r3, #4
 8008836:	3415      	adds	r4, #21
 8008838:	42a6      	cmp	r6, r4
 800883a:	bf38      	it	cc
 800883c:	2304      	movcc	r3, #4
 800883e:	441d      	add	r5, r3
 8008840:	4473      	add	r3, lr
 8008842:	469e      	mov	lr, r3
 8008844:	462e      	mov	r6, r5
 8008846:	4566      	cmp	r6, ip
 8008848:	d30e      	bcc.n	8008868 <__mdiff+0xec>
 800884a:	f10c 0203 	add.w	r2, ip, #3
 800884e:	1b52      	subs	r2, r2, r5
 8008850:	f022 0203 	bic.w	r2, r2, #3
 8008854:	3d03      	subs	r5, #3
 8008856:	45ac      	cmp	ip, r5
 8008858:	bf38      	it	cc
 800885a:	2200      	movcc	r2, #0
 800885c:	441a      	add	r2, r3
 800885e:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8008862:	b17b      	cbz	r3, 8008884 <__mdiff+0x108>
 8008864:	6107      	str	r7, [r0, #16]
 8008866:	e7a3      	b.n	80087b0 <__mdiff+0x34>
 8008868:	f856 8b04 	ldr.w	r8, [r6], #4
 800886c:	fa11 f288 	uxtah	r2, r1, r8
 8008870:	1414      	asrs	r4, r2, #16
 8008872:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8008876:	b292      	uxth	r2, r2
 8008878:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800887c:	f84e 2b04 	str.w	r2, [lr], #4
 8008880:	1421      	asrs	r1, r4, #16
 8008882:	e7e0      	b.n	8008846 <__mdiff+0xca>
 8008884:	3f01      	subs	r7, #1
 8008886:	e7ea      	b.n	800885e <__mdiff+0xe2>
 8008888:	08009b27 	.word	0x08009b27
 800888c:	08009b38 	.word	0x08009b38

08008890 <__d2b>:
 8008890:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8008894:	4689      	mov	r9, r1
 8008896:	2101      	movs	r1, #1
 8008898:	ec57 6b10 	vmov	r6, r7, d0
 800889c:	4690      	mov	r8, r2
 800889e:	f7ff fccf 	bl	8008240 <_Balloc>
 80088a2:	4604      	mov	r4, r0
 80088a4:	b930      	cbnz	r0, 80088b4 <__d2b+0x24>
 80088a6:	4602      	mov	r2, r0
 80088a8:	4b25      	ldr	r3, [pc, #148]	; (8008940 <__d2b+0xb0>)
 80088aa:	4826      	ldr	r0, [pc, #152]	; (8008944 <__d2b+0xb4>)
 80088ac:	f240 310a 	movw	r1, #778	; 0x30a
 80088b0:	f000 faac 	bl	8008e0c <__assert_func>
 80088b4:	f3c7 550a 	ubfx	r5, r7, #20, #11
 80088b8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80088bc:	bb35      	cbnz	r5, 800890c <__d2b+0x7c>
 80088be:	2e00      	cmp	r6, #0
 80088c0:	9301      	str	r3, [sp, #4]
 80088c2:	d028      	beq.n	8008916 <__d2b+0x86>
 80088c4:	4668      	mov	r0, sp
 80088c6:	9600      	str	r6, [sp, #0]
 80088c8:	f7ff fd82 	bl	80083d0 <__lo0bits>
 80088cc:	9900      	ldr	r1, [sp, #0]
 80088ce:	b300      	cbz	r0, 8008912 <__d2b+0x82>
 80088d0:	9a01      	ldr	r2, [sp, #4]
 80088d2:	f1c0 0320 	rsb	r3, r0, #32
 80088d6:	fa02 f303 	lsl.w	r3, r2, r3
 80088da:	430b      	orrs	r3, r1
 80088dc:	40c2      	lsrs	r2, r0
 80088de:	6163      	str	r3, [r4, #20]
 80088e0:	9201      	str	r2, [sp, #4]
 80088e2:	9b01      	ldr	r3, [sp, #4]
 80088e4:	61a3      	str	r3, [r4, #24]
 80088e6:	2b00      	cmp	r3, #0
 80088e8:	bf14      	ite	ne
 80088ea:	2202      	movne	r2, #2
 80088ec:	2201      	moveq	r2, #1
 80088ee:	6122      	str	r2, [r4, #16]
 80088f0:	b1d5      	cbz	r5, 8008928 <__d2b+0x98>
 80088f2:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80088f6:	4405      	add	r5, r0
 80088f8:	f8c9 5000 	str.w	r5, [r9]
 80088fc:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8008900:	f8c8 0000 	str.w	r0, [r8]
 8008904:	4620      	mov	r0, r4
 8008906:	b003      	add	sp, #12
 8008908:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800890c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008910:	e7d5      	b.n	80088be <__d2b+0x2e>
 8008912:	6161      	str	r1, [r4, #20]
 8008914:	e7e5      	b.n	80088e2 <__d2b+0x52>
 8008916:	a801      	add	r0, sp, #4
 8008918:	f7ff fd5a 	bl	80083d0 <__lo0bits>
 800891c:	9b01      	ldr	r3, [sp, #4]
 800891e:	6163      	str	r3, [r4, #20]
 8008920:	2201      	movs	r2, #1
 8008922:	6122      	str	r2, [r4, #16]
 8008924:	3020      	adds	r0, #32
 8008926:	e7e3      	b.n	80088f0 <__d2b+0x60>
 8008928:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800892c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8008930:	f8c9 0000 	str.w	r0, [r9]
 8008934:	6918      	ldr	r0, [r3, #16]
 8008936:	f7ff fd2b 	bl	8008390 <__hi0bits>
 800893a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800893e:	e7df      	b.n	8008900 <__d2b+0x70>
 8008940:	08009b27 	.word	0x08009b27
 8008944:	08009b38 	.word	0x08009b38

08008948 <_calloc_r>:
 8008948:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800894a:	fba1 2402 	umull	r2, r4, r1, r2
 800894e:	b94c      	cbnz	r4, 8008964 <_calloc_r+0x1c>
 8008950:	4611      	mov	r1, r2
 8008952:	9201      	str	r2, [sp, #4]
 8008954:	f000 f87a 	bl	8008a4c <_malloc_r>
 8008958:	9a01      	ldr	r2, [sp, #4]
 800895a:	4605      	mov	r5, r0
 800895c:	b930      	cbnz	r0, 800896c <_calloc_r+0x24>
 800895e:	4628      	mov	r0, r5
 8008960:	b003      	add	sp, #12
 8008962:	bd30      	pop	{r4, r5, pc}
 8008964:	220c      	movs	r2, #12
 8008966:	6002      	str	r2, [r0, #0]
 8008968:	2500      	movs	r5, #0
 800896a:	e7f8      	b.n	800895e <_calloc_r+0x16>
 800896c:	4621      	mov	r1, r4
 800896e:	f7fe f8ff 	bl	8006b70 <memset>
 8008972:	e7f4      	b.n	800895e <_calloc_r+0x16>

08008974 <_free_r>:
 8008974:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008976:	2900      	cmp	r1, #0
 8008978:	d044      	beq.n	8008a04 <_free_r+0x90>
 800897a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800897e:	9001      	str	r0, [sp, #4]
 8008980:	2b00      	cmp	r3, #0
 8008982:	f1a1 0404 	sub.w	r4, r1, #4
 8008986:	bfb8      	it	lt
 8008988:	18e4      	addlt	r4, r4, r3
 800898a:	f000 fa9b 	bl	8008ec4 <__malloc_lock>
 800898e:	4a1e      	ldr	r2, [pc, #120]	; (8008a08 <_free_r+0x94>)
 8008990:	9801      	ldr	r0, [sp, #4]
 8008992:	6813      	ldr	r3, [r2, #0]
 8008994:	b933      	cbnz	r3, 80089a4 <_free_r+0x30>
 8008996:	6063      	str	r3, [r4, #4]
 8008998:	6014      	str	r4, [r2, #0]
 800899a:	b003      	add	sp, #12
 800899c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80089a0:	f000 ba96 	b.w	8008ed0 <__malloc_unlock>
 80089a4:	42a3      	cmp	r3, r4
 80089a6:	d908      	bls.n	80089ba <_free_r+0x46>
 80089a8:	6825      	ldr	r5, [r4, #0]
 80089aa:	1961      	adds	r1, r4, r5
 80089ac:	428b      	cmp	r3, r1
 80089ae:	bf01      	itttt	eq
 80089b0:	6819      	ldreq	r1, [r3, #0]
 80089b2:	685b      	ldreq	r3, [r3, #4]
 80089b4:	1949      	addeq	r1, r1, r5
 80089b6:	6021      	streq	r1, [r4, #0]
 80089b8:	e7ed      	b.n	8008996 <_free_r+0x22>
 80089ba:	461a      	mov	r2, r3
 80089bc:	685b      	ldr	r3, [r3, #4]
 80089be:	b10b      	cbz	r3, 80089c4 <_free_r+0x50>
 80089c0:	42a3      	cmp	r3, r4
 80089c2:	d9fa      	bls.n	80089ba <_free_r+0x46>
 80089c4:	6811      	ldr	r1, [r2, #0]
 80089c6:	1855      	adds	r5, r2, r1
 80089c8:	42a5      	cmp	r5, r4
 80089ca:	d10b      	bne.n	80089e4 <_free_r+0x70>
 80089cc:	6824      	ldr	r4, [r4, #0]
 80089ce:	4421      	add	r1, r4
 80089d0:	1854      	adds	r4, r2, r1
 80089d2:	42a3      	cmp	r3, r4
 80089d4:	6011      	str	r1, [r2, #0]
 80089d6:	d1e0      	bne.n	800899a <_free_r+0x26>
 80089d8:	681c      	ldr	r4, [r3, #0]
 80089da:	685b      	ldr	r3, [r3, #4]
 80089dc:	6053      	str	r3, [r2, #4]
 80089de:	4421      	add	r1, r4
 80089e0:	6011      	str	r1, [r2, #0]
 80089e2:	e7da      	b.n	800899a <_free_r+0x26>
 80089e4:	d902      	bls.n	80089ec <_free_r+0x78>
 80089e6:	230c      	movs	r3, #12
 80089e8:	6003      	str	r3, [r0, #0]
 80089ea:	e7d6      	b.n	800899a <_free_r+0x26>
 80089ec:	6825      	ldr	r5, [r4, #0]
 80089ee:	1961      	adds	r1, r4, r5
 80089f0:	428b      	cmp	r3, r1
 80089f2:	bf04      	itt	eq
 80089f4:	6819      	ldreq	r1, [r3, #0]
 80089f6:	685b      	ldreq	r3, [r3, #4]
 80089f8:	6063      	str	r3, [r4, #4]
 80089fa:	bf04      	itt	eq
 80089fc:	1949      	addeq	r1, r1, r5
 80089fe:	6021      	streq	r1, [r4, #0]
 8008a00:	6054      	str	r4, [r2, #4]
 8008a02:	e7ca      	b.n	800899a <_free_r+0x26>
 8008a04:	b003      	add	sp, #12
 8008a06:	bd30      	pop	{r4, r5, pc}
 8008a08:	2000a44c 	.word	0x2000a44c

08008a0c <sbrk_aligned>:
 8008a0c:	b570      	push	{r4, r5, r6, lr}
 8008a0e:	4e0e      	ldr	r6, [pc, #56]	; (8008a48 <sbrk_aligned+0x3c>)
 8008a10:	460c      	mov	r4, r1
 8008a12:	6831      	ldr	r1, [r6, #0]
 8008a14:	4605      	mov	r5, r0
 8008a16:	b911      	cbnz	r1, 8008a1e <sbrk_aligned+0x12>
 8008a18:	f000 f9e8 	bl	8008dec <_sbrk_r>
 8008a1c:	6030      	str	r0, [r6, #0]
 8008a1e:	4621      	mov	r1, r4
 8008a20:	4628      	mov	r0, r5
 8008a22:	f000 f9e3 	bl	8008dec <_sbrk_r>
 8008a26:	1c43      	adds	r3, r0, #1
 8008a28:	d00a      	beq.n	8008a40 <sbrk_aligned+0x34>
 8008a2a:	1cc4      	adds	r4, r0, #3
 8008a2c:	f024 0403 	bic.w	r4, r4, #3
 8008a30:	42a0      	cmp	r0, r4
 8008a32:	d007      	beq.n	8008a44 <sbrk_aligned+0x38>
 8008a34:	1a21      	subs	r1, r4, r0
 8008a36:	4628      	mov	r0, r5
 8008a38:	f000 f9d8 	bl	8008dec <_sbrk_r>
 8008a3c:	3001      	adds	r0, #1
 8008a3e:	d101      	bne.n	8008a44 <sbrk_aligned+0x38>
 8008a40:	f04f 34ff 	mov.w	r4, #4294967295
 8008a44:	4620      	mov	r0, r4
 8008a46:	bd70      	pop	{r4, r5, r6, pc}
 8008a48:	2000a450 	.word	0x2000a450

08008a4c <_malloc_r>:
 8008a4c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008a50:	1ccd      	adds	r5, r1, #3
 8008a52:	f025 0503 	bic.w	r5, r5, #3
 8008a56:	3508      	adds	r5, #8
 8008a58:	2d0c      	cmp	r5, #12
 8008a5a:	bf38      	it	cc
 8008a5c:	250c      	movcc	r5, #12
 8008a5e:	2d00      	cmp	r5, #0
 8008a60:	4607      	mov	r7, r0
 8008a62:	db01      	blt.n	8008a68 <_malloc_r+0x1c>
 8008a64:	42a9      	cmp	r1, r5
 8008a66:	d905      	bls.n	8008a74 <_malloc_r+0x28>
 8008a68:	230c      	movs	r3, #12
 8008a6a:	603b      	str	r3, [r7, #0]
 8008a6c:	2600      	movs	r6, #0
 8008a6e:	4630      	mov	r0, r6
 8008a70:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008a74:	4e2e      	ldr	r6, [pc, #184]	; (8008b30 <_malloc_r+0xe4>)
 8008a76:	f000 fa25 	bl	8008ec4 <__malloc_lock>
 8008a7a:	6833      	ldr	r3, [r6, #0]
 8008a7c:	461c      	mov	r4, r3
 8008a7e:	bb34      	cbnz	r4, 8008ace <_malloc_r+0x82>
 8008a80:	4629      	mov	r1, r5
 8008a82:	4638      	mov	r0, r7
 8008a84:	f7ff ffc2 	bl	8008a0c <sbrk_aligned>
 8008a88:	1c43      	adds	r3, r0, #1
 8008a8a:	4604      	mov	r4, r0
 8008a8c:	d14d      	bne.n	8008b2a <_malloc_r+0xde>
 8008a8e:	6834      	ldr	r4, [r6, #0]
 8008a90:	4626      	mov	r6, r4
 8008a92:	2e00      	cmp	r6, #0
 8008a94:	d140      	bne.n	8008b18 <_malloc_r+0xcc>
 8008a96:	6823      	ldr	r3, [r4, #0]
 8008a98:	4631      	mov	r1, r6
 8008a9a:	4638      	mov	r0, r7
 8008a9c:	eb04 0803 	add.w	r8, r4, r3
 8008aa0:	f000 f9a4 	bl	8008dec <_sbrk_r>
 8008aa4:	4580      	cmp	r8, r0
 8008aa6:	d13a      	bne.n	8008b1e <_malloc_r+0xd2>
 8008aa8:	6821      	ldr	r1, [r4, #0]
 8008aaa:	3503      	adds	r5, #3
 8008aac:	1a6d      	subs	r5, r5, r1
 8008aae:	f025 0503 	bic.w	r5, r5, #3
 8008ab2:	3508      	adds	r5, #8
 8008ab4:	2d0c      	cmp	r5, #12
 8008ab6:	bf38      	it	cc
 8008ab8:	250c      	movcc	r5, #12
 8008aba:	4629      	mov	r1, r5
 8008abc:	4638      	mov	r0, r7
 8008abe:	f7ff ffa5 	bl	8008a0c <sbrk_aligned>
 8008ac2:	3001      	adds	r0, #1
 8008ac4:	d02b      	beq.n	8008b1e <_malloc_r+0xd2>
 8008ac6:	6823      	ldr	r3, [r4, #0]
 8008ac8:	442b      	add	r3, r5
 8008aca:	6023      	str	r3, [r4, #0]
 8008acc:	e00e      	b.n	8008aec <_malloc_r+0xa0>
 8008ace:	6822      	ldr	r2, [r4, #0]
 8008ad0:	1b52      	subs	r2, r2, r5
 8008ad2:	d41e      	bmi.n	8008b12 <_malloc_r+0xc6>
 8008ad4:	2a0b      	cmp	r2, #11
 8008ad6:	d916      	bls.n	8008b06 <_malloc_r+0xba>
 8008ad8:	1961      	adds	r1, r4, r5
 8008ada:	42a3      	cmp	r3, r4
 8008adc:	6025      	str	r5, [r4, #0]
 8008ade:	bf18      	it	ne
 8008ae0:	6059      	strne	r1, [r3, #4]
 8008ae2:	6863      	ldr	r3, [r4, #4]
 8008ae4:	bf08      	it	eq
 8008ae6:	6031      	streq	r1, [r6, #0]
 8008ae8:	5162      	str	r2, [r4, r5]
 8008aea:	604b      	str	r3, [r1, #4]
 8008aec:	4638      	mov	r0, r7
 8008aee:	f104 060b 	add.w	r6, r4, #11
 8008af2:	f000 f9ed 	bl	8008ed0 <__malloc_unlock>
 8008af6:	f026 0607 	bic.w	r6, r6, #7
 8008afa:	1d23      	adds	r3, r4, #4
 8008afc:	1af2      	subs	r2, r6, r3
 8008afe:	d0b6      	beq.n	8008a6e <_malloc_r+0x22>
 8008b00:	1b9b      	subs	r3, r3, r6
 8008b02:	50a3      	str	r3, [r4, r2]
 8008b04:	e7b3      	b.n	8008a6e <_malloc_r+0x22>
 8008b06:	6862      	ldr	r2, [r4, #4]
 8008b08:	42a3      	cmp	r3, r4
 8008b0a:	bf0c      	ite	eq
 8008b0c:	6032      	streq	r2, [r6, #0]
 8008b0e:	605a      	strne	r2, [r3, #4]
 8008b10:	e7ec      	b.n	8008aec <_malloc_r+0xa0>
 8008b12:	4623      	mov	r3, r4
 8008b14:	6864      	ldr	r4, [r4, #4]
 8008b16:	e7b2      	b.n	8008a7e <_malloc_r+0x32>
 8008b18:	4634      	mov	r4, r6
 8008b1a:	6876      	ldr	r6, [r6, #4]
 8008b1c:	e7b9      	b.n	8008a92 <_malloc_r+0x46>
 8008b1e:	230c      	movs	r3, #12
 8008b20:	603b      	str	r3, [r7, #0]
 8008b22:	4638      	mov	r0, r7
 8008b24:	f000 f9d4 	bl	8008ed0 <__malloc_unlock>
 8008b28:	e7a1      	b.n	8008a6e <_malloc_r+0x22>
 8008b2a:	6025      	str	r5, [r4, #0]
 8008b2c:	e7de      	b.n	8008aec <_malloc_r+0xa0>
 8008b2e:	bf00      	nop
 8008b30:	2000a44c 	.word	0x2000a44c

08008b34 <__ssputs_r>:
 8008b34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008b38:	688e      	ldr	r6, [r1, #8]
 8008b3a:	429e      	cmp	r6, r3
 8008b3c:	4682      	mov	sl, r0
 8008b3e:	460c      	mov	r4, r1
 8008b40:	4690      	mov	r8, r2
 8008b42:	461f      	mov	r7, r3
 8008b44:	d838      	bhi.n	8008bb8 <__ssputs_r+0x84>
 8008b46:	898a      	ldrh	r2, [r1, #12]
 8008b48:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008b4c:	d032      	beq.n	8008bb4 <__ssputs_r+0x80>
 8008b4e:	6825      	ldr	r5, [r4, #0]
 8008b50:	6909      	ldr	r1, [r1, #16]
 8008b52:	eba5 0901 	sub.w	r9, r5, r1
 8008b56:	6965      	ldr	r5, [r4, #20]
 8008b58:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008b5c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008b60:	3301      	adds	r3, #1
 8008b62:	444b      	add	r3, r9
 8008b64:	106d      	asrs	r5, r5, #1
 8008b66:	429d      	cmp	r5, r3
 8008b68:	bf38      	it	cc
 8008b6a:	461d      	movcc	r5, r3
 8008b6c:	0553      	lsls	r3, r2, #21
 8008b6e:	d531      	bpl.n	8008bd4 <__ssputs_r+0xa0>
 8008b70:	4629      	mov	r1, r5
 8008b72:	f7ff ff6b 	bl	8008a4c <_malloc_r>
 8008b76:	4606      	mov	r6, r0
 8008b78:	b950      	cbnz	r0, 8008b90 <__ssputs_r+0x5c>
 8008b7a:	230c      	movs	r3, #12
 8008b7c:	f8ca 3000 	str.w	r3, [sl]
 8008b80:	89a3      	ldrh	r3, [r4, #12]
 8008b82:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008b86:	81a3      	strh	r3, [r4, #12]
 8008b88:	f04f 30ff 	mov.w	r0, #4294967295
 8008b8c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008b90:	6921      	ldr	r1, [r4, #16]
 8008b92:	464a      	mov	r2, r9
 8008b94:	f7ff fb46 	bl	8008224 <memcpy>
 8008b98:	89a3      	ldrh	r3, [r4, #12]
 8008b9a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8008b9e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008ba2:	81a3      	strh	r3, [r4, #12]
 8008ba4:	6126      	str	r6, [r4, #16]
 8008ba6:	6165      	str	r5, [r4, #20]
 8008ba8:	444e      	add	r6, r9
 8008baa:	eba5 0509 	sub.w	r5, r5, r9
 8008bae:	6026      	str	r6, [r4, #0]
 8008bb0:	60a5      	str	r5, [r4, #8]
 8008bb2:	463e      	mov	r6, r7
 8008bb4:	42be      	cmp	r6, r7
 8008bb6:	d900      	bls.n	8008bba <__ssputs_r+0x86>
 8008bb8:	463e      	mov	r6, r7
 8008bba:	6820      	ldr	r0, [r4, #0]
 8008bbc:	4632      	mov	r2, r6
 8008bbe:	4641      	mov	r1, r8
 8008bc0:	f000 f966 	bl	8008e90 <memmove>
 8008bc4:	68a3      	ldr	r3, [r4, #8]
 8008bc6:	1b9b      	subs	r3, r3, r6
 8008bc8:	60a3      	str	r3, [r4, #8]
 8008bca:	6823      	ldr	r3, [r4, #0]
 8008bcc:	4433      	add	r3, r6
 8008bce:	6023      	str	r3, [r4, #0]
 8008bd0:	2000      	movs	r0, #0
 8008bd2:	e7db      	b.n	8008b8c <__ssputs_r+0x58>
 8008bd4:	462a      	mov	r2, r5
 8008bd6:	f000 f981 	bl	8008edc <_realloc_r>
 8008bda:	4606      	mov	r6, r0
 8008bdc:	2800      	cmp	r0, #0
 8008bde:	d1e1      	bne.n	8008ba4 <__ssputs_r+0x70>
 8008be0:	6921      	ldr	r1, [r4, #16]
 8008be2:	4650      	mov	r0, sl
 8008be4:	f7ff fec6 	bl	8008974 <_free_r>
 8008be8:	e7c7      	b.n	8008b7a <__ssputs_r+0x46>
	...

08008bec <_svfiprintf_r>:
 8008bec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008bf0:	4698      	mov	r8, r3
 8008bf2:	898b      	ldrh	r3, [r1, #12]
 8008bf4:	061b      	lsls	r3, r3, #24
 8008bf6:	b09d      	sub	sp, #116	; 0x74
 8008bf8:	4607      	mov	r7, r0
 8008bfa:	460d      	mov	r5, r1
 8008bfc:	4614      	mov	r4, r2
 8008bfe:	d50e      	bpl.n	8008c1e <_svfiprintf_r+0x32>
 8008c00:	690b      	ldr	r3, [r1, #16]
 8008c02:	b963      	cbnz	r3, 8008c1e <_svfiprintf_r+0x32>
 8008c04:	2140      	movs	r1, #64	; 0x40
 8008c06:	f7ff ff21 	bl	8008a4c <_malloc_r>
 8008c0a:	6028      	str	r0, [r5, #0]
 8008c0c:	6128      	str	r0, [r5, #16]
 8008c0e:	b920      	cbnz	r0, 8008c1a <_svfiprintf_r+0x2e>
 8008c10:	230c      	movs	r3, #12
 8008c12:	603b      	str	r3, [r7, #0]
 8008c14:	f04f 30ff 	mov.w	r0, #4294967295
 8008c18:	e0d1      	b.n	8008dbe <_svfiprintf_r+0x1d2>
 8008c1a:	2340      	movs	r3, #64	; 0x40
 8008c1c:	616b      	str	r3, [r5, #20]
 8008c1e:	2300      	movs	r3, #0
 8008c20:	9309      	str	r3, [sp, #36]	; 0x24
 8008c22:	2320      	movs	r3, #32
 8008c24:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008c28:	f8cd 800c 	str.w	r8, [sp, #12]
 8008c2c:	2330      	movs	r3, #48	; 0x30
 8008c2e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8008dd8 <_svfiprintf_r+0x1ec>
 8008c32:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008c36:	f04f 0901 	mov.w	r9, #1
 8008c3a:	4623      	mov	r3, r4
 8008c3c:	469a      	mov	sl, r3
 8008c3e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008c42:	b10a      	cbz	r2, 8008c48 <_svfiprintf_r+0x5c>
 8008c44:	2a25      	cmp	r2, #37	; 0x25
 8008c46:	d1f9      	bne.n	8008c3c <_svfiprintf_r+0x50>
 8008c48:	ebba 0b04 	subs.w	fp, sl, r4
 8008c4c:	d00b      	beq.n	8008c66 <_svfiprintf_r+0x7a>
 8008c4e:	465b      	mov	r3, fp
 8008c50:	4622      	mov	r2, r4
 8008c52:	4629      	mov	r1, r5
 8008c54:	4638      	mov	r0, r7
 8008c56:	f7ff ff6d 	bl	8008b34 <__ssputs_r>
 8008c5a:	3001      	adds	r0, #1
 8008c5c:	f000 80aa 	beq.w	8008db4 <_svfiprintf_r+0x1c8>
 8008c60:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008c62:	445a      	add	r2, fp
 8008c64:	9209      	str	r2, [sp, #36]	; 0x24
 8008c66:	f89a 3000 	ldrb.w	r3, [sl]
 8008c6a:	2b00      	cmp	r3, #0
 8008c6c:	f000 80a2 	beq.w	8008db4 <_svfiprintf_r+0x1c8>
 8008c70:	2300      	movs	r3, #0
 8008c72:	f04f 32ff 	mov.w	r2, #4294967295
 8008c76:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008c7a:	f10a 0a01 	add.w	sl, sl, #1
 8008c7e:	9304      	str	r3, [sp, #16]
 8008c80:	9307      	str	r3, [sp, #28]
 8008c82:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008c86:	931a      	str	r3, [sp, #104]	; 0x68
 8008c88:	4654      	mov	r4, sl
 8008c8a:	2205      	movs	r2, #5
 8008c8c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008c90:	4851      	ldr	r0, [pc, #324]	; (8008dd8 <_svfiprintf_r+0x1ec>)
 8008c92:	f7f7 fab5 	bl	8000200 <memchr>
 8008c96:	9a04      	ldr	r2, [sp, #16]
 8008c98:	b9d8      	cbnz	r0, 8008cd2 <_svfiprintf_r+0xe6>
 8008c9a:	06d0      	lsls	r0, r2, #27
 8008c9c:	bf44      	itt	mi
 8008c9e:	2320      	movmi	r3, #32
 8008ca0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008ca4:	0711      	lsls	r1, r2, #28
 8008ca6:	bf44      	itt	mi
 8008ca8:	232b      	movmi	r3, #43	; 0x2b
 8008caa:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008cae:	f89a 3000 	ldrb.w	r3, [sl]
 8008cb2:	2b2a      	cmp	r3, #42	; 0x2a
 8008cb4:	d015      	beq.n	8008ce2 <_svfiprintf_r+0xf6>
 8008cb6:	9a07      	ldr	r2, [sp, #28]
 8008cb8:	4654      	mov	r4, sl
 8008cba:	2000      	movs	r0, #0
 8008cbc:	f04f 0c0a 	mov.w	ip, #10
 8008cc0:	4621      	mov	r1, r4
 8008cc2:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008cc6:	3b30      	subs	r3, #48	; 0x30
 8008cc8:	2b09      	cmp	r3, #9
 8008cca:	d94e      	bls.n	8008d6a <_svfiprintf_r+0x17e>
 8008ccc:	b1b0      	cbz	r0, 8008cfc <_svfiprintf_r+0x110>
 8008cce:	9207      	str	r2, [sp, #28]
 8008cd0:	e014      	b.n	8008cfc <_svfiprintf_r+0x110>
 8008cd2:	eba0 0308 	sub.w	r3, r0, r8
 8008cd6:	fa09 f303 	lsl.w	r3, r9, r3
 8008cda:	4313      	orrs	r3, r2
 8008cdc:	9304      	str	r3, [sp, #16]
 8008cde:	46a2      	mov	sl, r4
 8008ce0:	e7d2      	b.n	8008c88 <_svfiprintf_r+0x9c>
 8008ce2:	9b03      	ldr	r3, [sp, #12]
 8008ce4:	1d19      	adds	r1, r3, #4
 8008ce6:	681b      	ldr	r3, [r3, #0]
 8008ce8:	9103      	str	r1, [sp, #12]
 8008cea:	2b00      	cmp	r3, #0
 8008cec:	bfbb      	ittet	lt
 8008cee:	425b      	neglt	r3, r3
 8008cf0:	f042 0202 	orrlt.w	r2, r2, #2
 8008cf4:	9307      	strge	r3, [sp, #28]
 8008cf6:	9307      	strlt	r3, [sp, #28]
 8008cf8:	bfb8      	it	lt
 8008cfa:	9204      	strlt	r2, [sp, #16]
 8008cfc:	7823      	ldrb	r3, [r4, #0]
 8008cfe:	2b2e      	cmp	r3, #46	; 0x2e
 8008d00:	d10c      	bne.n	8008d1c <_svfiprintf_r+0x130>
 8008d02:	7863      	ldrb	r3, [r4, #1]
 8008d04:	2b2a      	cmp	r3, #42	; 0x2a
 8008d06:	d135      	bne.n	8008d74 <_svfiprintf_r+0x188>
 8008d08:	9b03      	ldr	r3, [sp, #12]
 8008d0a:	1d1a      	adds	r2, r3, #4
 8008d0c:	681b      	ldr	r3, [r3, #0]
 8008d0e:	9203      	str	r2, [sp, #12]
 8008d10:	2b00      	cmp	r3, #0
 8008d12:	bfb8      	it	lt
 8008d14:	f04f 33ff 	movlt.w	r3, #4294967295
 8008d18:	3402      	adds	r4, #2
 8008d1a:	9305      	str	r3, [sp, #20]
 8008d1c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8008de8 <_svfiprintf_r+0x1fc>
 8008d20:	7821      	ldrb	r1, [r4, #0]
 8008d22:	2203      	movs	r2, #3
 8008d24:	4650      	mov	r0, sl
 8008d26:	f7f7 fa6b 	bl	8000200 <memchr>
 8008d2a:	b140      	cbz	r0, 8008d3e <_svfiprintf_r+0x152>
 8008d2c:	2340      	movs	r3, #64	; 0x40
 8008d2e:	eba0 000a 	sub.w	r0, r0, sl
 8008d32:	fa03 f000 	lsl.w	r0, r3, r0
 8008d36:	9b04      	ldr	r3, [sp, #16]
 8008d38:	4303      	orrs	r3, r0
 8008d3a:	3401      	adds	r4, #1
 8008d3c:	9304      	str	r3, [sp, #16]
 8008d3e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008d42:	4826      	ldr	r0, [pc, #152]	; (8008ddc <_svfiprintf_r+0x1f0>)
 8008d44:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008d48:	2206      	movs	r2, #6
 8008d4a:	f7f7 fa59 	bl	8000200 <memchr>
 8008d4e:	2800      	cmp	r0, #0
 8008d50:	d038      	beq.n	8008dc4 <_svfiprintf_r+0x1d8>
 8008d52:	4b23      	ldr	r3, [pc, #140]	; (8008de0 <_svfiprintf_r+0x1f4>)
 8008d54:	bb1b      	cbnz	r3, 8008d9e <_svfiprintf_r+0x1b2>
 8008d56:	9b03      	ldr	r3, [sp, #12]
 8008d58:	3307      	adds	r3, #7
 8008d5a:	f023 0307 	bic.w	r3, r3, #7
 8008d5e:	3308      	adds	r3, #8
 8008d60:	9303      	str	r3, [sp, #12]
 8008d62:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008d64:	4433      	add	r3, r6
 8008d66:	9309      	str	r3, [sp, #36]	; 0x24
 8008d68:	e767      	b.n	8008c3a <_svfiprintf_r+0x4e>
 8008d6a:	fb0c 3202 	mla	r2, ip, r2, r3
 8008d6e:	460c      	mov	r4, r1
 8008d70:	2001      	movs	r0, #1
 8008d72:	e7a5      	b.n	8008cc0 <_svfiprintf_r+0xd4>
 8008d74:	2300      	movs	r3, #0
 8008d76:	3401      	adds	r4, #1
 8008d78:	9305      	str	r3, [sp, #20]
 8008d7a:	4619      	mov	r1, r3
 8008d7c:	f04f 0c0a 	mov.w	ip, #10
 8008d80:	4620      	mov	r0, r4
 8008d82:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008d86:	3a30      	subs	r2, #48	; 0x30
 8008d88:	2a09      	cmp	r2, #9
 8008d8a:	d903      	bls.n	8008d94 <_svfiprintf_r+0x1a8>
 8008d8c:	2b00      	cmp	r3, #0
 8008d8e:	d0c5      	beq.n	8008d1c <_svfiprintf_r+0x130>
 8008d90:	9105      	str	r1, [sp, #20]
 8008d92:	e7c3      	b.n	8008d1c <_svfiprintf_r+0x130>
 8008d94:	fb0c 2101 	mla	r1, ip, r1, r2
 8008d98:	4604      	mov	r4, r0
 8008d9a:	2301      	movs	r3, #1
 8008d9c:	e7f0      	b.n	8008d80 <_svfiprintf_r+0x194>
 8008d9e:	ab03      	add	r3, sp, #12
 8008da0:	9300      	str	r3, [sp, #0]
 8008da2:	462a      	mov	r2, r5
 8008da4:	4b0f      	ldr	r3, [pc, #60]	; (8008de4 <_svfiprintf_r+0x1f8>)
 8008da6:	a904      	add	r1, sp, #16
 8008da8:	4638      	mov	r0, r7
 8008daa:	f7fd ff89 	bl	8006cc0 <_printf_float>
 8008dae:	1c42      	adds	r2, r0, #1
 8008db0:	4606      	mov	r6, r0
 8008db2:	d1d6      	bne.n	8008d62 <_svfiprintf_r+0x176>
 8008db4:	89ab      	ldrh	r3, [r5, #12]
 8008db6:	065b      	lsls	r3, r3, #25
 8008db8:	f53f af2c 	bmi.w	8008c14 <_svfiprintf_r+0x28>
 8008dbc:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008dbe:	b01d      	add	sp, #116	; 0x74
 8008dc0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008dc4:	ab03      	add	r3, sp, #12
 8008dc6:	9300      	str	r3, [sp, #0]
 8008dc8:	462a      	mov	r2, r5
 8008dca:	4b06      	ldr	r3, [pc, #24]	; (8008de4 <_svfiprintf_r+0x1f8>)
 8008dcc:	a904      	add	r1, sp, #16
 8008dce:	4638      	mov	r0, r7
 8008dd0:	f7fe fa1a 	bl	8007208 <_printf_i>
 8008dd4:	e7eb      	b.n	8008dae <_svfiprintf_r+0x1c2>
 8008dd6:	bf00      	nop
 8008dd8:	08009c94 	.word	0x08009c94
 8008ddc:	08009c9e 	.word	0x08009c9e
 8008de0:	08006cc1 	.word	0x08006cc1
 8008de4:	08008b35 	.word	0x08008b35
 8008de8:	08009c9a 	.word	0x08009c9a

08008dec <_sbrk_r>:
 8008dec:	b538      	push	{r3, r4, r5, lr}
 8008dee:	4d06      	ldr	r5, [pc, #24]	; (8008e08 <_sbrk_r+0x1c>)
 8008df0:	2300      	movs	r3, #0
 8008df2:	4604      	mov	r4, r0
 8008df4:	4608      	mov	r0, r1
 8008df6:	602b      	str	r3, [r5, #0]
 8008df8:	f7f9 fac6 	bl	8002388 <_sbrk>
 8008dfc:	1c43      	adds	r3, r0, #1
 8008dfe:	d102      	bne.n	8008e06 <_sbrk_r+0x1a>
 8008e00:	682b      	ldr	r3, [r5, #0]
 8008e02:	b103      	cbz	r3, 8008e06 <_sbrk_r+0x1a>
 8008e04:	6023      	str	r3, [r4, #0]
 8008e06:	bd38      	pop	{r3, r4, r5, pc}
 8008e08:	2000a454 	.word	0x2000a454

08008e0c <__assert_func>:
 8008e0c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008e0e:	4614      	mov	r4, r2
 8008e10:	461a      	mov	r2, r3
 8008e12:	4b09      	ldr	r3, [pc, #36]	; (8008e38 <__assert_func+0x2c>)
 8008e14:	681b      	ldr	r3, [r3, #0]
 8008e16:	4605      	mov	r5, r0
 8008e18:	68d8      	ldr	r0, [r3, #12]
 8008e1a:	b14c      	cbz	r4, 8008e30 <__assert_func+0x24>
 8008e1c:	4b07      	ldr	r3, [pc, #28]	; (8008e3c <__assert_func+0x30>)
 8008e1e:	9100      	str	r1, [sp, #0]
 8008e20:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008e24:	4906      	ldr	r1, [pc, #24]	; (8008e40 <__assert_func+0x34>)
 8008e26:	462b      	mov	r3, r5
 8008e28:	f000 f80e 	bl	8008e48 <fiprintf>
 8008e2c:	f000 faac 	bl	8009388 <abort>
 8008e30:	4b04      	ldr	r3, [pc, #16]	; (8008e44 <__assert_func+0x38>)
 8008e32:	461c      	mov	r4, r3
 8008e34:	e7f3      	b.n	8008e1e <__assert_func+0x12>
 8008e36:	bf00      	nop
 8008e38:	20000010 	.word	0x20000010
 8008e3c:	08009ca5 	.word	0x08009ca5
 8008e40:	08009cb2 	.word	0x08009cb2
 8008e44:	08009ce0 	.word	0x08009ce0

08008e48 <fiprintf>:
 8008e48:	b40e      	push	{r1, r2, r3}
 8008e4a:	b503      	push	{r0, r1, lr}
 8008e4c:	4601      	mov	r1, r0
 8008e4e:	ab03      	add	r3, sp, #12
 8008e50:	4805      	ldr	r0, [pc, #20]	; (8008e68 <fiprintf+0x20>)
 8008e52:	f853 2b04 	ldr.w	r2, [r3], #4
 8008e56:	6800      	ldr	r0, [r0, #0]
 8008e58:	9301      	str	r3, [sp, #4]
 8008e5a:	f000 f897 	bl	8008f8c <_vfiprintf_r>
 8008e5e:	b002      	add	sp, #8
 8008e60:	f85d eb04 	ldr.w	lr, [sp], #4
 8008e64:	b003      	add	sp, #12
 8008e66:	4770      	bx	lr
 8008e68:	20000010 	.word	0x20000010

08008e6c <__ascii_mbtowc>:
 8008e6c:	b082      	sub	sp, #8
 8008e6e:	b901      	cbnz	r1, 8008e72 <__ascii_mbtowc+0x6>
 8008e70:	a901      	add	r1, sp, #4
 8008e72:	b142      	cbz	r2, 8008e86 <__ascii_mbtowc+0x1a>
 8008e74:	b14b      	cbz	r3, 8008e8a <__ascii_mbtowc+0x1e>
 8008e76:	7813      	ldrb	r3, [r2, #0]
 8008e78:	600b      	str	r3, [r1, #0]
 8008e7a:	7812      	ldrb	r2, [r2, #0]
 8008e7c:	1e10      	subs	r0, r2, #0
 8008e7e:	bf18      	it	ne
 8008e80:	2001      	movne	r0, #1
 8008e82:	b002      	add	sp, #8
 8008e84:	4770      	bx	lr
 8008e86:	4610      	mov	r0, r2
 8008e88:	e7fb      	b.n	8008e82 <__ascii_mbtowc+0x16>
 8008e8a:	f06f 0001 	mvn.w	r0, #1
 8008e8e:	e7f8      	b.n	8008e82 <__ascii_mbtowc+0x16>

08008e90 <memmove>:
 8008e90:	4288      	cmp	r0, r1
 8008e92:	b510      	push	{r4, lr}
 8008e94:	eb01 0402 	add.w	r4, r1, r2
 8008e98:	d902      	bls.n	8008ea0 <memmove+0x10>
 8008e9a:	4284      	cmp	r4, r0
 8008e9c:	4623      	mov	r3, r4
 8008e9e:	d807      	bhi.n	8008eb0 <memmove+0x20>
 8008ea0:	1e43      	subs	r3, r0, #1
 8008ea2:	42a1      	cmp	r1, r4
 8008ea4:	d008      	beq.n	8008eb8 <memmove+0x28>
 8008ea6:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008eaa:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008eae:	e7f8      	b.n	8008ea2 <memmove+0x12>
 8008eb0:	4402      	add	r2, r0
 8008eb2:	4601      	mov	r1, r0
 8008eb4:	428a      	cmp	r2, r1
 8008eb6:	d100      	bne.n	8008eba <memmove+0x2a>
 8008eb8:	bd10      	pop	{r4, pc}
 8008eba:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008ebe:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008ec2:	e7f7      	b.n	8008eb4 <memmove+0x24>

08008ec4 <__malloc_lock>:
 8008ec4:	4801      	ldr	r0, [pc, #4]	; (8008ecc <__malloc_lock+0x8>)
 8008ec6:	f000 bc1f 	b.w	8009708 <__retarget_lock_acquire_recursive>
 8008eca:	bf00      	nop
 8008ecc:	2000a458 	.word	0x2000a458

08008ed0 <__malloc_unlock>:
 8008ed0:	4801      	ldr	r0, [pc, #4]	; (8008ed8 <__malloc_unlock+0x8>)
 8008ed2:	f000 bc1a 	b.w	800970a <__retarget_lock_release_recursive>
 8008ed6:	bf00      	nop
 8008ed8:	2000a458 	.word	0x2000a458

08008edc <_realloc_r>:
 8008edc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008ee0:	4680      	mov	r8, r0
 8008ee2:	4614      	mov	r4, r2
 8008ee4:	460e      	mov	r6, r1
 8008ee6:	b921      	cbnz	r1, 8008ef2 <_realloc_r+0x16>
 8008ee8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008eec:	4611      	mov	r1, r2
 8008eee:	f7ff bdad 	b.w	8008a4c <_malloc_r>
 8008ef2:	b92a      	cbnz	r2, 8008f00 <_realloc_r+0x24>
 8008ef4:	f7ff fd3e 	bl	8008974 <_free_r>
 8008ef8:	4625      	mov	r5, r4
 8008efa:	4628      	mov	r0, r5
 8008efc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008f00:	f000 fc6a 	bl	80097d8 <_malloc_usable_size_r>
 8008f04:	4284      	cmp	r4, r0
 8008f06:	4607      	mov	r7, r0
 8008f08:	d802      	bhi.n	8008f10 <_realloc_r+0x34>
 8008f0a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8008f0e:	d812      	bhi.n	8008f36 <_realloc_r+0x5a>
 8008f10:	4621      	mov	r1, r4
 8008f12:	4640      	mov	r0, r8
 8008f14:	f7ff fd9a 	bl	8008a4c <_malloc_r>
 8008f18:	4605      	mov	r5, r0
 8008f1a:	2800      	cmp	r0, #0
 8008f1c:	d0ed      	beq.n	8008efa <_realloc_r+0x1e>
 8008f1e:	42bc      	cmp	r4, r7
 8008f20:	4622      	mov	r2, r4
 8008f22:	4631      	mov	r1, r6
 8008f24:	bf28      	it	cs
 8008f26:	463a      	movcs	r2, r7
 8008f28:	f7ff f97c 	bl	8008224 <memcpy>
 8008f2c:	4631      	mov	r1, r6
 8008f2e:	4640      	mov	r0, r8
 8008f30:	f7ff fd20 	bl	8008974 <_free_r>
 8008f34:	e7e1      	b.n	8008efa <_realloc_r+0x1e>
 8008f36:	4635      	mov	r5, r6
 8008f38:	e7df      	b.n	8008efa <_realloc_r+0x1e>

08008f3a <__sfputc_r>:
 8008f3a:	6893      	ldr	r3, [r2, #8]
 8008f3c:	3b01      	subs	r3, #1
 8008f3e:	2b00      	cmp	r3, #0
 8008f40:	b410      	push	{r4}
 8008f42:	6093      	str	r3, [r2, #8]
 8008f44:	da08      	bge.n	8008f58 <__sfputc_r+0x1e>
 8008f46:	6994      	ldr	r4, [r2, #24]
 8008f48:	42a3      	cmp	r3, r4
 8008f4a:	db01      	blt.n	8008f50 <__sfputc_r+0x16>
 8008f4c:	290a      	cmp	r1, #10
 8008f4e:	d103      	bne.n	8008f58 <__sfputc_r+0x1e>
 8008f50:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008f54:	f000 b94a 	b.w	80091ec <__swbuf_r>
 8008f58:	6813      	ldr	r3, [r2, #0]
 8008f5a:	1c58      	adds	r0, r3, #1
 8008f5c:	6010      	str	r0, [r2, #0]
 8008f5e:	7019      	strb	r1, [r3, #0]
 8008f60:	4608      	mov	r0, r1
 8008f62:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008f66:	4770      	bx	lr

08008f68 <__sfputs_r>:
 8008f68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008f6a:	4606      	mov	r6, r0
 8008f6c:	460f      	mov	r7, r1
 8008f6e:	4614      	mov	r4, r2
 8008f70:	18d5      	adds	r5, r2, r3
 8008f72:	42ac      	cmp	r4, r5
 8008f74:	d101      	bne.n	8008f7a <__sfputs_r+0x12>
 8008f76:	2000      	movs	r0, #0
 8008f78:	e007      	b.n	8008f8a <__sfputs_r+0x22>
 8008f7a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008f7e:	463a      	mov	r2, r7
 8008f80:	4630      	mov	r0, r6
 8008f82:	f7ff ffda 	bl	8008f3a <__sfputc_r>
 8008f86:	1c43      	adds	r3, r0, #1
 8008f88:	d1f3      	bne.n	8008f72 <__sfputs_r+0xa>
 8008f8a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08008f8c <_vfiprintf_r>:
 8008f8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008f90:	460d      	mov	r5, r1
 8008f92:	b09d      	sub	sp, #116	; 0x74
 8008f94:	4614      	mov	r4, r2
 8008f96:	4698      	mov	r8, r3
 8008f98:	4606      	mov	r6, r0
 8008f9a:	b118      	cbz	r0, 8008fa4 <_vfiprintf_r+0x18>
 8008f9c:	6983      	ldr	r3, [r0, #24]
 8008f9e:	b90b      	cbnz	r3, 8008fa4 <_vfiprintf_r+0x18>
 8008fa0:	f000 fb14 	bl	80095cc <__sinit>
 8008fa4:	4b89      	ldr	r3, [pc, #548]	; (80091cc <_vfiprintf_r+0x240>)
 8008fa6:	429d      	cmp	r5, r3
 8008fa8:	d11b      	bne.n	8008fe2 <_vfiprintf_r+0x56>
 8008faa:	6875      	ldr	r5, [r6, #4]
 8008fac:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008fae:	07d9      	lsls	r1, r3, #31
 8008fb0:	d405      	bmi.n	8008fbe <_vfiprintf_r+0x32>
 8008fb2:	89ab      	ldrh	r3, [r5, #12]
 8008fb4:	059a      	lsls	r2, r3, #22
 8008fb6:	d402      	bmi.n	8008fbe <_vfiprintf_r+0x32>
 8008fb8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008fba:	f000 fba5 	bl	8009708 <__retarget_lock_acquire_recursive>
 8008fbe:	89ab      	ldrh	r3, [r5, #12]
 8008fc0:	071b      	lsls	r3, r3, #28
 8008fc2:	d501      	bpl.n	8008fc8 <_vfiprintf_r+0x3c>
 8008fc4:	692b      	ldr	r3, [r5, #16]
 8008fc6:	b9eb      	cbnz	r3, 8009004 <_vfiprintf_r+0x78>
 8008fc8:	4629      	mov	r1, r5
 8008fca:	4630      	mov	r0, r6
 8008fcc:	f000 f96e 	bl	80092ac <__swsetup_r>
 8008fd0:	b1c0      	cbz	r0, 8009004 <_vfiprintf_r+0x78>
 8008fd2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008fd4:	07dc      	lsls	r4, r3, #31
 8008fd6:	d50e      	bpl.n	8008ff6 <_vfiprintf_r+0x6a>
 8008fd8:	f04f 30ff 	mov.w	r0, #4294967295
 8008fdc:	b01d      	add	sp, #116	; 0x74
 8008fde:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008fe2:	4b7b      	ldr	r3, [pc, #492]	; (80091d0 <_vfiprintf_r+0x244>)
 8008fe4:	429d      	cmp	r5, r3
 8008fe6:	d101      	bne.n	8008fec <_vfiprintf_r+0x60>
 8008fe8:	68b5      	ldr	r5, [r6, #8]
 8008fea:	e7df      	b.n	8008fac <_vfiprintf_r+0x20>
 8008fec:	4b79      	ldr	r3, [pc, #484]	; (80091d4 <_vfiprintf_r+0x248>)
 8008fee:	429d      	cmp	r5, r3
 8008ff0:	bf08      	it	eq
 8008ff2:	68f5      	ldreq	r5, [r6, #12]
 8008ff4:	e7da      	b.n	8008fac <_vfiprintf_r+0x20>
 8008ff6:	89ab      	ldrh	r3, [r5, #12]
 8008ff8:	0598      	lsls	r0, r3, #22
 8008ffa:	d4ed      	bmi.n	8008fd8 <_vfiprintf_r+0x4c>
 8008ffc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008ffe:	f000 fb84 	bl	800970a <__retarget_lock_release_recursive>
 8009002:	e7e9      	b.n	8008fd8 <_vfiprintf_r+0x4c>
 8009004:	2300      	movs	r3, #0
 8009006:	9309      	str	r3, [sp, #36]	; 0x24
 8009008:	2320      	movs	r3, #32
 800900a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800900e:	f8cd 800c 	str.w	r8, [sp, #12]
 8009012:	2330      	movs	r3, #48	; 0x30
 8009014:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80091d8 <_vfiprintf_r+0x24c>
 8009018:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800901c:	f04f 0901 	mov.w	r9, #1
 8009020:	4623      	mov	r3, r4
 8009022:	469a      	mov	sl, r3
 8009024:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009028:	b10a      	cbz	r2, 800902e <_vfiprintf_r+0xa2>
 800902a:	2a25      	cmp	r2, #37	; 0x25
 800902c:	d1f9      	bne.n	8009022 <_vfiprintf_r+0x96>
 800902e:	ebba 0b04 	subs.w	fp, sl, r4
 8009032:	d00b      	beq.n	800904c <_vfiprintf_r+0xc0>
 8009034:	465b      	mov	r3, fp
 8009036:	4622      	mov	r2, r4
 8009038:	4629      	mov	r1, r5
 800903a:	4630      	mov	r0, r6
 800903c:	f7ff ff94 	bl	8008f68 <__sfputs_r>
 8009040:	3001      	adds	r0, #1
 8009042:	f000 80aa 	beq.w	800919a <_vfiprintf_r+0x20e>
 8009046:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009048:	445a      	add	r2, fp
 800904a:	9209      	str	r2, [sp, #36]	; 0x24
 800904c:	f89a 3000 	ldrb.w	r3, [sl]
 8009050:	2b00      	cmp	r3, #0
 8009052:	f000 80a2 	beq.w	800919a <_vfiprintf_r+0x20e>
 8009056:	2300      	movs	r3, #0
 8009058:	f04f 32ff 	mov.w	r2, #4294967295
 800905c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009060:	f10a 0a01 	add.w	sl, sl, #1
 8009064:	9304      	str	r3, [sp, #16]
 8009066:	9307      	str	r3, [sp, #28]
 8009068:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800906c:	931a      	str	r3, [sp, #104]	; 0x68
 800906e:	4654      	mov	r4, sl
 8009070:	2205      	movs	r2, #5
 8009072:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009076:	4858      	ldr	r0, [pc, #352]	; (80091d8 <_vfiprintf_r+0x24c>)
 8009078:	f7f7 f8c2 	bl	8000200 <memchr>
 800907c:	9a04      	ldr	r2, [sp, #16]
 800907e:	b9d8      	cbnz	r0, 80090b8 <_vfiprintf_r+0x12c>
 8009080:	06d1      	lsls	r1, r2, #27
 8009082:	bf44      	itt	mi
 8009084:	2320      	movmi	r3, #32
 8009086:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800908a:	0713      	lsls	r3, r2, #28
 800908c:	bf44      	itt	mi
 800908e:	232b      	movmi	r3, #43	; 0x2b
 8009090:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009094:	f89a 3000 	ldrb.w	r3, [sl]
 8009098:	2b2a      	cmp	r3, #42	; 0x2a
 800909a:	d015      	beq.n	80090c8 <_vfiprintf_r+0x13c>
 800909c:	9a07      	ldr	r2, [sp, #28]
 800909e:	4654      	mov	r4, sl
 80090a0:	2000      	movs	r0, #0
 80090a2:	f04f 0c0a 	mov.w	ip, #10
 80090a6:	4621      	mov	r1, r4
 80090a8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80090ac:	3b30      	subs	r3, #48	; 0x30
 80090ae:	2b09      	cmp	r3, #9
 80090b0:	d94e      	bls.n	8009150 <_vfiprintf_r+0x1c4>
 80090b2:	b1b0      	cbz	r0, 80090e2 <_vfiprintf_r+0x156>
 80090b4:	9207      	str	r2, [sp, #28]
 80090b6:	e014      	b.n	80090e2 <_vfiprintf_r+0x156>
 80090b8:	eba0 0308 	sub.w	r3, r0, r8
 80090bc:	fa09 f303 	lsl.w	r3, r9, r3
 80090c0:	4313      	orrs	r3, r2
 80090c2:	9304      	str	r3, [sp, #16]
 80090c4:	46a2      	mov	sl, r4
 80090c6:	e7d2      	b.n	800906e <_vfiprintf_r+0xe2>
 80090c8:	9b03      	ldr	r3, [sp, #12]
 80090ca:	1d19      	adds	r1, r3, #4
 80090cc:	681b      	ldr	r3, [r3, #0]
 80090ce:	9103      	str	r1, [sp, #12]
 80090d0:	2b00      	cmp	r3, #0
 80090d2:	bfbb      	ittet	lt
 80090d4:	425b      	neglt	r3, r3
 80090d6:	f042 0202 	orrlt.w	r2, r2, #2
 80090da:	9307      	strge	r3, [sp, #28]
 80090dc:	9307      	strlt	r3, [sp, #28]
 80090de:	bfb8      	it	lt
 80090e0:	9204      	strlt	r2, [sp, #16]
 80090e2:	7823      	ldrb	r3, [r4, #0]
 80090e4:	2b2e      	cmp	r3, #46	; 0x2e
 80090e6:	d10c      	bne.n	8009102 <_vfiprintf_r+0x176>
 80090e8:	7863      	ldrb	r3, [r4, #1]
 80090ea:	2b2a      	cmp	r3, #42	; 0x2a
 80090ec:	d135      	bne.n	800915a <_vfiprintf_r+0x1ce>
 80090ee:	9b03      	ldr	r3, [sp, #12]
 80090f0:	1d1a      	adds	r2, r3, #4
 80090f2:	681b      	ldr	r3, [r3, #0]
 80090f4:	9203      	str	r2, [sp, #12]
 80090f6:	2b00      	cmp	r3, #0
 80090f8:	bfb8      	it	lt
 80090fa:	f04f 33ff 	movlt.w	r3, #4294967295
 80090fe:	3402      	adds	r4, #2
 8009100:	9305      	str	r3, [sp, #20]
 8009102:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80091e8 <_vfiprintf_r+0x25c>
 8009106:	7821      	ldrb	r1, [r4, #0]
 8009108:	2203      	movs	r2, #3
 800910a:	4650      	mov	r0, sl
 800910c:	f7f7 f878 	bl	8000200 <memchr>
 8009110:	b140      	cbz	r0, 8009124 <_vfiprintf_r+0x198>
 8009112:	2340      	movs	r3, #64	; 0x40
 8009114:	eba0 000a 	sub.w	r0, r0, sl
 8009118:	fa03 f000 	lsl.w	r0, r3, r0
 800911c:	9b04      	ldr	r3, [sp, #16]
 800911e:	4303      	orrs	r3, r0
 8009120:	3401      	adds	r4, #1
 8009122:	9304      	str	r3, [sp, #16]
 8009124:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009128:	482c      	ldr	r0, [pc, #176]	; (80091dc <_vfiprintf_r+0x250>)
 800912a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800912e:	2206      	movs	r2, #6
 8009130:	f7f7 f866 	bl	8000200 <memchr>
 8009134:	2800      	cmp	r0, #0
 8009136:	d03f      	beq.n	80091b8 <_vfiprintf_r+0x22c>
 8009138:	4b29      	ldr	r3, [pc, #164]	; (80091e0 <_vfiprintf_r+0x254>)
 800913a:	bb1b      	cbnz	r3, 8009184 <_vfiprintf_r+0x1f8>
 800913c:	9b03      	ldr	r3, [sp, #12]
 800913e:	3307      	adds	r3, #7
 8009140:	f023 0307 	bic.w	r3, r3, #7
 8009144:	3308      	adds	r3, #8
 8009146:	9303      	str	r3, [sp, #12]
 8009148:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800914a:	443b      	add	r3, r7
 800914c:	9309      	str	r3, [sp, #36]	; 0x24
 800914e:	e767      	b.n	8009020 <_vfiprintf_r+0x94>
 8009150:	fb0c 3202 	mla	r2, ip, r2, r3
 8009154:	460c      	mov	r4, r1
 8009156:	2001      	movs	r0, #1
 8009158:	e7a5      	b.n	80090a6 <_vfiprintf_r+0x11a>
 800915a:	2300      	movs	r3, #0
 800915c:	3401      	adds	r4, #1
 800915e:	9305      	str	r3, [sp, #20]
 8009160:	4619      	mov	r1, r3
 8009162:	f04f 0c0a 	mov.w	ip, #10
 8009166:	4620      	mov	r0, r4
 8009168:	f810 2b01 	ldrb.w	r2, [r0], #1
 800916c:	3a30      	subs	r2, #48	; 0x30
 800916e:	2a09      	cmp	r2, #9
 8009170:	d903      	bls.n	800917a <_vfiprintf_r+0x1ee>
 8009172:	2b00      	cmp	r3, #0
 8009174:	d0c5      	beq.n	8009102 <_vfiprintf_r+0x176>
 8009176:	9105      	str	r1, [sp, #20]
 8009178:	e7c3      	b.n	8009102 <_vfiprintf_r+0x176>
 800917a:	fb0c 2101 	mla	r1, ip, r1, r2
 800917e:	4604      	mov	r4, r0
 8009180:	2301      	movs	r3, #1
 8009182:	e7f0      	b.n	8009166 <_vfiprintf_r+0x1da>
 8009184:	ab03      	add	r3, sp, #12
 8009186:	9300      	str	r3, [sp, #0]
 8009188:	462a      	mov	r2, r5
 800918a:	4b16      	ldr	r3, [pc, #88]	; (80091e4 <_vfiprintf_r+0x258>)
 800918c:	a904      	add	r1, sp, #16
 800918e:	4630      	mov	r0, r6
 8009190:	f7fd fd96 	bl	8006cc0 <_printf_float>
 8009194:	4607      	mov	r7, r0
 8009196:	1c78      	adds	r0, r7, #1
 8009198:	d1d6      	bne.n	8009148 <_vfiprintf_r+0x1bc>
 800919a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800919c:	07d9      	lsls	r1, r3, #31
 800919e:	d405      	bmi.n	80091ac <_vfiprintf_r+0x220>
 80091a0:	89ab      	ldrh	r3, [r5, #12]
 80091a2:	059a      	lsls	r2, r3, #22
 80091a4:	d402      	bmi.n	80091ac <_vfiprintf_r+0x220>
 80091a6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80091a8:	f000 faaf 	bl	800970a <__retarget_lock_release_recursive>
 80091ac:	89ab      	ldrh	r3, [r5, #12]
 80091ae:	065b      	lsls	r3, r3, #25
 80091b0:	f53f af12 	bmi.w	8008fd8 <_vfiprintf_r+0x4c>
 80091b4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80091b6:	e711      	b.n	8008fdc <_vfiprintf_r+0x50>
 80091b8:	ab03      	add	r3, sp, #12
 80091ba:	9300      	str	r3, [sp, #0]
 80091bc:	462a      	mov	r2, r5
 80091be:	4b09      	ldr	r3, [pc, #36]	; (80091e4 <_vfiprintf_r+0x258>)
 80091c0:	a904      	add	r1, sp, #16
 80091c2:	4630      	mov	r0, r6
 80091c4:	f7fe f820 	bl	8007208 <_printf_i>
 80091c8:	e7e4      	b.n	8009194 <_vfiprintf_r+0x208>
 80091ca:	bf00      	nop
 80091cc:	08009e0c 	.word	0x08009e0c
 80091d0:	08009e2c 	.word	0x08009e2c
 80091d4:	08009dec 	.word	0x08009dec
 80091d8:	08009c94 	.word	0x08009c94
 80091dc:	08009c9e 	.word	0x08009c9e
 80091e0:	08006cc1 	.word	0x08006cc1
 80091e4:	08008f69 	.word	0x08008f69
 80091e8:	08009c9a 	.word	0x08009c9a

080091ec <__swbuf_r>:
 80091ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80091ee:	460e      	mov	r6, r1
 80091f0:	4614      	mov	r4, r2
 80091f2:	4605      	mov	r5, r0
 80091f4:	b118      	cbz	r0, 80091fe <__swbuf_r+0x12>
 80091f6:	6983      	ldr	r3, [r0, #24]
 80091f8:	b90b      	cbnz	r3, 80091fe <__swbuf_r+0x12>
 80091fa:	f000 f9e7 	bl	80095cc <__sinit>
 80091fe:	4b21      	ldr	r3, [pc, #132]	; (8009284 <__swbuf_r+0x98>)
 8009200:	429c      	cmp	r4, r3
 8009202:	d12b      	bne.n	800925c <__swbuf_r+0x70>
 8009204:	686c      	ldr	r4, [r5, #4]
 8009206:	69a3      	ldr	r3, [r4, #24]
 8009208:	60a3      	str	r3, [r4, #8]
 800920a:	89a3      	ldrh	r3, [r4, #12]
 800920c:	071a      	lsls	r2, r3, #28
 800920e:	d52f      	bpl.n	8009270 <__swbuf_r+0x84>
 8009210:	6923      	ldr	r3, [r4, #16]
 8009212:	b36b      	cbz	r3, 8009270 <__swbuf_r+0x84>
 8009214:	6923      	ldr	r3, [r4, #16]
 8009216:	6820      	ldr	r0, [r4, #0]
 8009218:	1ac0      	subs	r0, r0, r3
 800921a:	6963      	ldr	r3, [r4, #20]
 800921c:	b2f6      	uxtb	r6, r6
 800921e:	4283      	cmp	r3, r0
 8009220:	4637      	mov	r7, r6
 8009222:	dc04      	bgt.n	800922e <__swbuf_r+0x42>
 8009224:	4621      	mov	r1, r4
 8009226:	4628      	mov	r0, r5
 8009228:	f000 f93c 	bl	80094a4 <_fflush_r>
 800922c:	bb30      	cbnz	r0, 800927c <__swbuf_r+0x90>
 800922e:	68a3      	ldr	r3, [r4, #8]
 8009230:	3b01      	subs	r3, #1
 8009232:	60a3      	str	r3, [r4, #8]
 8009234:	6823      	ldr	r3, [r4, #0]
 8009236:	1c5a      	adds	r2, r3, #1
 8009238:	6022      	str	r2, [r4, #0]
 800923a:	701e      	strb	r6, [r3, #0]
 800923c:	6963      	ldr	r3, [r4, #20]
 800923e:	3001      	adds	r0, #1
 8009240:	4283      	cmp	r3, r0
 8009242:	d004      	beq.n	800924e <__swbuf_r+0x62>
 8009244:	89a3      	ldrh	r3, [r4, #12]
 8009246:	07db      	lsls	r3, r3, #31
 8009248:	d506      	bpl.n	8009258 <__swbuf_r+0x6c>
 800924a:	2e0a      	cmp	r6, #10
 800924c:	d104      	bne.n	8009258 <__swbuf_r+0x6c>
 800924e:	4621      	mov	r1, r4
 8009250:	4628      	mov	r0, r5
 8009252:	f000 f927 	bl	80094a4 <_fflush_r>
 8009256:	b988      	cbnz	r0, 800927c <__swbuf_r+0x90>
 8009258:	4638      	mov	r0, r7
 800925a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800925c:	4b0a      	ldr	r3, [pc, #40]	; (8009288 <__swbuf_r+0x9c>)
 800925e:	429c      	cmp	r4, r3
 8009260:	d101      	bne.n	8009266 <__swbuf_r+0x7a>
 8009262:	68ac      	ldr	r4, [r5, #8]
 8009264:	e7cf      	b.n	8009206 <__swbuf_r+0x1a>
 8009266:	4b09      	ldr	r3, [pc, #36]	; (800928c <__swbuf_r+0xa0>)
 8009268:	429c      	cmp	r4, r3
 800926a:	bf08      	it	eq
 800926c:	68ec      	ldreq	r4, [r5, #12]
 800926e:	e7ca      	b.n	8009206 <__swbuf_r+0x1a>
 8009270:	4621      	mov	r1, r4
 8009272:	4628      	mov	r0, r5
 8009274:	f000 f81a 	bl	80092ac <__swsetup_r>
 8009278:	2800      	cmp	r0, #0
 800927a:	d0cb      	beq.n	8009214 <__swbuf_r+0x28>
 800927c:	f04f 37ff 	mov.w	r7, #4294967295
 8009280:	e7ea      	b.n	8009258 <__swbuf_r+0x6c>
 8009282:	bf00      	nop
 8009284:	08009e0c 	.word	0x08009e0c
 8009288:	08009e2c 	.word	0x08009e2c
 800928c:	08009dec 	.word	0x08009dec

08009290 <__ascii_wctomb>:
 8009290:	b149      	cbz	r1, 80092a6 <__ascii_wctomb+0x16>
 8009292:	2aff      	cmp	r2, #255	; 0xff
 8009294:	bf85      	ittet	hi
 8009296:	238a      	movhi	r3, #138	; 0x8a
 8009298:	6003      	strhi	r3, [r0, #0]
 800929a:	700a      	strbls	r2, [r1, #0]
 800929c:	f04f 30ff 	movhi.w	r0, #4294967295
 80092a0:	bf98      	it	ls
 80092a2:	2001      	movls	r0, #1
 80092a4:	4770      	bx	lr
 80092a6:	4608      	mov	r0, r1
 80092a8:	4770      	bx	lr
	...

080092ac <__swsetup_r>:
 80092ac:	4b32      	ldr	r3, [pc, #200]	; (8009378 <__swsetup_r+0xcc>)
 80092ae:	b570      	push	{r4, r5, r6, lr}
 80092b0:	681d      	ldr	r5, [r3, #0]
 80092b2:	4606      	mov	r6, r0
 80092b4:	460c      	mov	r4, r1
 80092b6:	b125      	cbz	r5, 80092c2 <__swsetup_r+0x16>
 80092b8:	69ab      	ldr	r3, [r5, #24]
 80092ba:	b913      	cbnz	r3, 80092c2 <__swsetup_r+0x16>
 80092bc:	4628      	mov	r0, r5
 80092be:	f000 f985 	bl	80095cc <__sinit>
 80092c2:	4b2e      	ldr	r3, [pc, #184]	; (800937c <__swsetup_r+0xd0>)
 80092c4:	429c      	cmp	r4, r3
 80092c6:	d10f      	bne.n	80092e8 <__swsetup_r+0x3c>
 80092c8:	686c      	ldr	r4, [r5, #4]
 80092ca:	89a3      	ldrh	r3, [r4, #12]
 80092cc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80092d0:	0719      	lsls	r1, r3, #28
 80092d2:	d42c      	bmi.n	800932e <__swsetup_r+0x82>
 80092d4:	06dd      	lsls	r5, r3, #27
 80092d6:	d411      	bmi.n	80092fc <__swsetup_r+0x50>
 80092d8:	2309      	movs	r3, #9
 80092da:	6033      	str	r3, [r6, #0]
 80092dc:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80092e0:	81a3      	strh	r3, [r4, #12]
 80092e2:	f04f 30ff 	mov.w	r0, #4294967295
 80092e6:	e03e      	b.n	8009366 <__swsetup_r+0xba>
 80092e8:	4b25      	ldr	r3, [pc, #148]	; (8009380 <__swsetup_r+0xd4>)
 80092ea:	429c      	cmp	r4, r3
 80092ec:	d101      	bne.n	80092f2 <__swsetup_r+0x46>
 80092ee:	68ac      	ldr	r4, [r5, #8]
 80092f0:	e7eb      	b.n	80092ca <__swsetup_r+0x1e>
 80092f2:	4b24      	ldr	r3, [pc, #144]	; (8009384 <__swsetup_r+0xd8>)
 80092f4:	429c      	cmp	r4, r3
 80092f6:	bf08      	it	eq
 80092f8:	68ec      	ldreq	r4, [r5, #12]
 80092fa:	e7e6      	b.n	80092ca <__swsetup_r+0x1e>
 80092fc:	0758      	lsls	r0, r3, #29
 80092fe:	d512      	bpl.n	8009326 <__swsetup_r+0x7a>
 8009300:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009302:	b141      	cbz	r1, 8009316 <__swsetup_r+0x6a>
 8009304:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009308:	4299      	cmp	r1, r3
 800930a:	d002      	beq.n	8009312 <__swsetup_r+0x66>
 800930c:	4630      	mov	r0, r6
 800930e:	f7ff fb31 	bl	8008974 <_free_r>
 8009312:	2300      	movs	r3, #0
 8009314:	6363      	str	r3, [r4, #52]	; 0x34
 8009316:	89a3      	ldrh	r3, [r4, #12]
 8009318:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800931c:	81a3      	strh	r3, [r4, #12]
 800931e:	2300      	movs	r3, #0
 8009320:	6063      	str	r3, [r4, #4]
 8009322:	6923      	ldr	r3, [r4, #16]
 8009324:	6023      	str	r3, [r4, #0]
 8009326:	89a3      	ldrh	r3, [r4, #12]
 8009328:	f043 0308 	orr.w	r3, r3, #8
 800932c:	81a3      	strh	r3, [r4, #12]
 800932e:	6923      	ldr	r3, [r4, #16]
 8009330:	b94b      	cbnz	r3, 8009346 <__swsetup_r+0x9a>
 8009332:	89a3      	ldrh	r3, [r4, #12]
 8009334:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8009338:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800933c:	d003      	beq.n	8009346 <__swsetup_r+0x9a>
 800933e:	4621      	mov	r1, r4
 8009340:	4630      	mov	r0, r6
 8009342:	f000 fa09 	bl	8009758 <__smakebuf_r>
 8009346:	89a0      	ldrh	r0, [r4, #12]
 8009348:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800934c:	f010 0301 	ands.w	r3, r0, #1
 8009350:	d00a      	beq.n	8009368 <__swsetup_r+0xbc>
 8009352:	2300      	movs	r3, #0
 8009354:	60a3      	str	r3, [r4, #8]
 8009356:	6963      	ldr	r3, [r4, #20]
 8009358:	425b      	negs	r3, r3
 800935a:	61a3      	str	r3, [r4, #24]
 800935c:	6923      	ldr	r3, [r4, #16]
 800935e:	b943      	cbnz	r3, 8009372 <__swsetup_r+0xc6>
 8009360:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8009364:	d1ba      	bne.n	80092dc <__swsetup_r+0x30>
 8009366:	bd70      	pop	{r4, r5, r6, pc}
 8009368:	0781      	lsls	r1, r0, #30
 800936a:	bf58      	it	pl
 800936c:	6963      	ldrpl	r3, [r4, #20]
 800936e:	60a3      	str	r3, [r4, #8]
 8009370:	e7f4      	b.n	800935c <__swsetup_r+0xb0>
 8009372:	2000      	movs	r0, #0
 8009374:	e7f7      	b.n	8009366 <__swsetup_r+0xba>
 8009376:	bf00      	nop
 8009378:	20000010 	.word	0x20000010
 800937c:	08009e0c 	.word	0x08009e0c
 8009380:	08009e2c 	.word	0x08009e2c
 8009384:	08009dec 	.word	0x08009dec

08009388 <abort>:
 8009388:	b508      	push	{r3, lr}
 800938a:	2006      	movs	r0, #6
 800938c:	f000 fa54 	bl	8009838 <raise>
 8009390:	2001      	movs	r0, #1
 8009392:	f7f8 ff81 	bl	8002298 <_exit>
	...

08009398 <__sflush_r>:
 8009398:	898a      	ldrh	r2, [r1, #12]
 800939a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800939e:	4605      	mov	r5, r0
 80093a0:	0710      	lsls	r0, r2, #28
 80093a2:	460c      	mov	r4, r1
 80093a4:	d458      	bmi.n	8009458 <__sflush_r+0xc0>
 80093a6:	684b      	ldr	r3, [r1, #4]
 80093a8:	2b00      	cmp	r3, #0
 80093aa:	dc05      	bgt.n	80093b8 <__sflush_r+0x20>
 80093ac:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80093ae:	2b00      	cmp	r3, #0
 80093b0:	dc02      	bgt.n	80093b8 <__sflush_r+0x20>
 80093b2:	2000      	movs	r0, #0
 80093b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80093b8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80093ba:	2e00      	cmp	r6, #0
 80093bc:	d0f9      	beq.n	80093b2 <__sflush_r+0x1a>
 80093be:	2300      	movs	r3, #0
 80093c0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80093c4:	682f      	ldr	r7, [r5, #0]
 80093c6:	602b      	str	r3, [r5, #0]
 80093c8:	d032      	beq.n	8009430 <__sflush_r+0x98>
 80093ca:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80093cc:	89a3      	ldrh	r3, [r4, #12]
 80093ce:	075a      	lsls	r2, r3, #29
 80093d0:	d505      	bpl.n	80093de <__sflush_r+0x46>
 80093d2:	6863      	ldr	r3, [r4, #4]
 80093d4:	1ac0      	subs	r0, r0, r3
 80093d6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80093d8:	b10b      	cbz	r3, 80093de <__sflush_r+0x46>
 80093da:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80093dc:	1ac0      	subs	r0, r0, r3
 80093de:	2300      	movs	r3, #0
 80093e0:	4602      	mov	r2, r0
 80093e2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80093e4:	6a21      	ldr	r1, [r4, #32]
 80093e6:	4628      	mov	r0, r5
 80093e8:	47b0      	blx	r6
 80093ea:	1c43      	adds	r3, r0, #1
 80093ec:	89a3      	ldrh	r3, [r4, #12]
 80093ee:	d106      	bne.n	80093fe <__sflush_r+0x66>
 80093f0:	6829      	ldr	r1, [r5, #0]
 80093f2:	291d      	cmp	r1, #29
 80093f4:	d82c      	bhi.n	8009450 <__sflush_r+0xb8>
 80093f6:	4a2a      	ldr	r2, [pc, #168]	; (80094a0 <__sflush_r+0x108>)
 80093f8:	40ca      	lsrs	r2, r1
 80093fa:	07d6      	lsls	r6, r2, #31
 80093fc:	d528      	bpl.n	8009450 <__sflush_r+0xb8>
 80093fe:	2200      	movs	r2, #0
 8009400:	6062      	str	r2, [r4, #4]
 8009402:	04d9      	lsls	r1, r3, #19
 8009404:	6922      	ldr	r2, [r4, #16]
 8009406:	6022      	str	r2, [r4, #0]
 8009408:	d504      	bpl.n	8009414 <__sflush_r+0x7c>
 800940a:	1c42      	adds	r2, r0, #1
 800940c:	d101      	bne.n	8009412 <__sflush_r+0x7a>
 800940e:	682b      	ldr	r3, [r5, #0]
 8009410:	b903      	cbnz	r3, 8009414 <__sflush_r+0x7c>
 8009412:	6560      	str	r0, [r4, #84]	; 0x54
 8009414:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009416:	602f      	str	r7, [r5, #0]
 8009418:	2900      	cmp	r1, #0
 800941a:	d0ca      	beq.n	80093b2 <__sflush_r+0x1a>
 800941c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009420:	4299      	cmp	r1, r3
 8009422:	d002      	beq.n	800942a <__sflush_r+0x92>
 8009424:	4628      	mov	r0, r5
 8009426:	f7ff faa5 	bl	8008974 <_free_r>
 800942a:	2000      	movs	r0, #0
 800942c:	6360      	str	r0, [r4, #52]	; 0x34
 800942e:	e7c1      	b.n	80093b4 <__sflush_r+0x1c>
 8009430:	6a21      	ldr	r1, [r4, #32]
 8009432:	2301      	movs	r3, #1
 8009434:	4628      	mov	r0, r5
 8009436:	47b0      	blx	r6
 8009438:	1c41      	adds	r1, r0, #1
 800943a:	d1c7      	bne.n	80093cc <__sflush_r+0x34>
 800943c:	682b      	ldr	r3, [r5, #0]
 800943e:	2b00      	cmp	r3, #0
 8009440:	d0c4      	beq.n	80093cc <__sflush_r+0x34>
 8009442:	2b1d      	cmp	r3, #29
 8009444:	d001      	beq.n	800944a <__sflush_r+0xb2>
 8009446:	2b16      	cmp	r3, #22
 8009448:	d101      	bne.n	800944e <__sflush_r+0xb6>
 800944a:	602f      	str	r7, [r5, #0]
 800944c:	e7b1      	b.n	80093b2 <__sflush_r+0x1a>
 800944e:	89a3      	ldrh	r3, [r4, #12]
 8009450:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009454:	81a3      	strh	r3, [r4, #12]
 8009456:	e7ad      	b.n	80093b4 <__sflush_r+0x1c>
 8009458:	690f      	ldr	r7, [r1, #16]
 800945a:	2f00      	cmp	r7, #0
 800945c:	d0a9      	beq.n	80093b2 <__sflush_r+0x1a>
 800945e:	0793      	lsls	r3, r2, #30
 8009460:	680e      	ldr	r6, [r1, #0]
 8009462:	bf08      	it	eq
 8009464:	694b      	ldreq	r3, [r1, #20]
 8009466:	600f      	str	r7, [r1, #0]
 8009468:	bf18      	it	ne
 800946a:	2300      	movne	r3, #0
 800946c:	eba6 0807 	sub.w	r8, r6, r7
 8009470:	608b      	str	r3, [r1, #8]
 8009472:	f1b8 0f00 	cmp.w	r8, #0
 8009476:	dd9c      	ble.n	80093b2 <__sflush_r+0x1a>
 8009478:	6a21      	ldr	r1, [r4, #32]
 800947a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800947c:	4643      	mov	r3, r8
 800947e:	463a      	mov	r2, r7
 8009480:	4628      	mov	r0, r5
 8009482:	47b0      	blx	r6
 8009484:	2800      	cmp	r0, #0
 8009486:	dc06      	bgt.n	8009496 <__sflush_r+0xfe>
 8009488:	89a3      	ldrh	r3, [r4, #12]
 800948a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800948e:	81a3      	strh	r3, [r4, #12]
 8009490:	f04f 30ff 	mov.w	r0, #4294967295
 8009494:	e78e      	b.n	80093b4 <__sflush_r+0x1c>
 8009496:	4407      	add	r7, r0
 8009498:	eba8 0800 	sub.w	r8, r8, r0
 800949c:	e7e9      	b.n	8009472 <__sflush_r+0xda>
 800949e:	bf00      	nop
 80094a0:	20400001 	.word	0x20400001

080094a4 <_fflush_r>:
 80094a4:	b538      	push	{r3, r4, r5, lr}
 80094a6:	690b      	ldr	r3, [r1, #16]
 80094a8:	4605      	mov	r5, r0
 80094aa:	460c      	mov	r4, r1
 80094ac:	b913      	cbnz	r3, 80094b4 <_fflush_r+0x10>
 80094ae:	2500      	movs	r5, #0
 80094b0:	4628      	mov	r0, r5
 80094b2:	bd38      	pop	{r3, r4, r5, pc}
 80094b4:	b118      	cbz	r0, 80094be <_fflush_r+0x1a>
 80094b6:	6983      	ldr	r3, [r0, #24]
 80094b8:	b90b      	cbnz	r3, 80094be <_fflush_r+0x1a>
 80094ba:	f000 f887 	bl	80095cc <__sinit>
 80094be:	4b14      	ldr	r3, [pc, #80]	; (8009510 <_fflush_r+0x6c>)
 80094c0:	429c      	cmp	r4, r3
 80094c2:	d11b      	bne.n	80094fc <_fflush_r+0x58>
 80094c4:	686c      	ldr	r4, [r5, #4]
 80094c6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80094ca:	2b00      	cmp	r3, #0
 80094cc:	d0ef      	beq.n	80094ae <_fflush_r+0xa>
 80094ce:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80094d0:	07d0      	lsls	r0, r2, #31
 80094d2:	d404      	bmi.n	80094de <_fflush_r+0x3a>
 80094d4:	0599      	lsls	r1, r3, #22
 80094d6:	d402      	bmi.n	80094de <_fflush_r+0x3a>
 80094d8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80094da:	f000 f915 	bl	8009708 <__retarget_lock_acquire_recursive>
 80094de:	4628      	mov	r0, r5
 80094e0:	4621      	mov	r1, r4
 80094e2:	f7ff ff59 	bl	8009398 <__sflush_r>
 80094e6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80094e8:	07da      	lsls	r2, r3, #31
 80094ea:	4605      	mov	r5, r0
 80094ec:	d4e0      	bmi.n	80094b0 <_fflush_r+0xc>
 80094ee:	89a3      	ldrh	r3, [r4, #12]
 80094f0:	059b      	lsls	r3, r3, #22
 80094f2:	d4dd      	bmi.n	80094b0 <_fflush_r+0xc>
 80094f4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80094f6:	f000 f908 	bl	800970a <__retarget_lock_release_recursive>
 80094fa:	e7d9      	b.n	80094b0 <_fflush_r+0xc>
 80094fc:	4b05      	ldr	r3, [pc, #20]	; (8009514 <_fflush_r+0x70>)
 80094fe:	429c      	cmp	r4, r3
 8009500:	d101      	bne.n	8009506 <_fflush_r+0x62>
 8009502:	68ac      	ldr	r4, [r5, #8]
 8009504:	e7df      	b.n	80094c6 <_fflush_r+0x22>
 8009506:	4b04      	ldr	r3, [pc, #16]	; (8009518 <_fflush_r+0x74>)
 8009508:	429c      	cmp	r4, r3
 800950a:	bf08      	it	eq
 800950c:	68ec      	ldreq	r4, [r5, #12]
 800950e:	e7da      	b.n	80094c6 <_fflush_r+0x22>
 8009510:	08009e0c 	.word	0x08009e0c
 8009514:	08009e2c 	.word	0x08009e2c
 8009518:	08009dec 	.word	0x08009dec

0800951c <std>:
 800951c:	2300      	movs	r3, #0
 800951e:	b510      	push	{r4, lr}
 8009520:	4604      	mov	r4, r0
 8009522:	e9c0 3300 	strd	r3, r3, [r0]
 8009526:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800952a:	6083      	str	r3, [r0, #8]
 800952c:	8181      	strh	r1, [r0, #12]
 800952e:	6643      	str	r3, [r0, #100]	; 0x64
 8009530:	81c2      	strh	r2, [r0, #14]
 8009532:	6183      	str	r3, [r0, #24]
 8009534:	4619      	mov	r1, r3
 8009536:	2208      	movs	r2, #8
 8009538:	305c      	adds	r0, #92	; 0x5c
 800953a:	f7fd fb19 	bl	8006b70 <memset>
 800953e:	4b05      	ldr	r3, [pc, #20]	; (8009554 <std+0x38>)
 8009540:	6263      	str	r3, [r4, #36]	; 0x24
 8009542:	4b05      	ldr	r3, [pc, #20]	; (8009558 <std+0x3c>)
 8009544:	62a3      	str	r3, [r4, #40]	; 0x28
 8009546:	4b05      	ldr	r3, [pc, #20]	; (800955c <std+0x40>)
 8009548:	62e3      	str	r3, [r4, #44]	; 0x2c
 800954a:	4b05      	ldr	r3, [pc, #20]	; (8009560 <std+0x44>)
 800954c:	6224      	str	r4, [r4, #32]
 800954e:	6323      	str	r3, [r4, #48]	; 0x30
 8009550:	bd10      	pop	{r4, pc}
 8009552:	bf00      	nop
 8009554:	08009871 	.word	0x08009871
 8009558:	08009893 	.word	0x08009893
 800955c:	080098cb 	.word	0x080098cb
 8009560:	080098ef 	.word	0x080098ef

08009564 <_cleanup_r>:
 8009564:	4901      	ldr	r1, [pc, #4]	; (800956c <_cleanup_r+0x8>)
 8009566:	f000 b8af 	b.w	80096c8 <_fwalk_reent>
 800956a:	bf00      	nop
 800956c:	080094a5 	.word	0x080094a5

08009570 <__sfmoreglue>:
 8009570:	b570      	push	{r4, r5, r6, lr}
 8009572:	2268      	movs	r2, #104	; 0x68
 8009574:	1e4d      	subs	r5, r1, #1
 8009576:	4355      	muls	r5, r2
 8009578:	460e      	mov	r6, r1
 800957a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800957e:	f7ff fa65 	bl	8008a4c <_malloc_r>
 8009582:	4604      	mov	r4, r0
 8009584:	b140      	cbz	r0, 8009598 <__sfmoreglue+0x28>
 8009586:	2100      	movs	r1, #0
 8009588:	e9c0 1600 	strd	r1, r6, [r0]
 800958c:	300c      	adds	r0, #12
 800958e:	60a0      	str	r0, [r4, #8]
 8009590:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8009594:	f7fd faec 	bl	8006b70 <memset>
 8009598:	4620      	mov	r0, r4
 800959a:	bd70      	pop	{r4, r5, r6, pc}

0800959c <__sfp_lock_acquire>:
 800959c:	4801      	ldr	r0, [pc, #4]	; (80095a4 <__sfp_lock_acquire+0x8>)
 800959e:	f000 b8b3 	b.w	8009708 <__retarget_lock_acquire_recursive>
 80095a2:	bf00      	nop
 80095a4:	2000a459 	.word	0x2000a459

080095a8 <__sfp_lock_release>:
 80095a8:	4801      	ldr	r0, [pc, #4]	; (80095b0 <__sfp_lock_release+0x8>)
 80095aa:	f000 b8ae 	b.w	800970a <__retarget_lock_release_recursive>
 80095ae:	bf00      	nop
 80095b0:	2000a459 	.word	0x2000a459

080095b4 <__sinit_lock_acquire>:
 80095b4:	4801      	ldr	r0, [pc, #4]	; (80095bc <__sinit_lock_acquire+0x8>)
 80095b6:	f000 b8a7 	b.w	8009708 <__retarget_lock_acquire_recursive>
 80095ba:	bf00      	nop
 80095bc:	2000a45a 	.word	0x2000a45a

080095c0 <__sinit_lock_release>:
 80095c0:	4801      	ldr	r0, [pc, #4]	; (80095c8 <__sinit_lock_release+0x8>)
 80095c2:	f000 b8a2 	b.w	800970a <__retarget_lock_release_recursive>
 80095c6:	bf00      	nop
 80095c8:	2000a45a 	.word	0x2000a45a

080095cc <__sinit>:
 80095cc:	b510      	push	{r4, lr}
 80095ce:	4604      	mov	r4, r0
 80095d0:	f7ff fff0 	bl	80095b4 <__sinit_lock_acquire>
 80095d4:	69a3      	ldr	r3, [r4, #24]
 80095d6:	b11b      	cbz	r3, 80095e0 <__sinit+0x14>
 80095d8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80095dc:	f7ff bff0 	b.w	80095c0 <__sinit_lock_release>
 80095e0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80095e4:	6523      	str	r3, [r4, #80]	; 0x50
 80095e6:	4b13      	ldr	r3, [pc, #76]	; (8009634 <__sinit+0x68>)
 80095e8:	4a13      	ldr	r2, [pc, #76]	; (8009638 <__sinit+0x6c>)
 80095ea:	681b      	ldr	r3, [r3, #0]
 80095ec:	62a2      	str	r2, [r4, #40]	; 0x28
 80095ee:	42a3      	cmp	r3, r4
 80095f0:	bf04      	itt	eq
 80095f2:	2301      	moveq	r3, #1
 80095f4:	61a3      	streq	r3, [r4, #24]
 80095f6:	4620      	mov	r0, r4
 80095f8:	f000 f820 	bl	800963c <__sfp>
 80095fc:	6060      	str	r0, [r4, #4]
 80095fe:	4620      	mov	r0, r4
 8009600:	f000 f81c 	bl	800963c <__sfp>
 8009604:	60a0      	str	r0, [r4, #8]
 8009606:	4620      	mov	r0, r4
 8009608:	f000 f818 	bl	800963c <__sfp>
 800960c:	2200      	movs	r2, #0
 800960e:	60e0      	str	r0, [r4, #12]
 8009610:	2104      	movs	r1, #4
 8009612:	6860      	ldr	r0, [r4, #4]
 8009614:	f7ff ff82 	bl	800951c <std>
 8009618:	68a0      	ldr	r0, [r4, #8]
 800961a:	2201      	movs	r2, #1
 800961c:	2109      	movs	r1, #9
 800961e:	f7ff ff7d 	bl	800951c <std>
 8009622:	68e0      	ldr	r0, [r4, #12]
 8009624:	2202      	movs	r2, #2
 8009626:	2112      	movs	r1, #18
 8009628:	f7ff ff78 	bl	800951c <std>
 800962c:	2301      	movs	r3, #1
 800962e:	61a3      	str	r3, [r4, #24]
 8009630:	e7d2      	b.n	80095d8 <__sinit+0xc>
 8009632:	bf00      	nop
 8009634:	08009a70 	.word	0x08009a70
 8009638:	08009565 	.word	0x08009565

0800963c <__sfp>:
 800963c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800963e:	4607      	mov	r7, r0
 8009640:	f7ff ffac 	bl	800959c <__sfp_lock_acquire>
 8009644:	4b1e      	ldr	r3, [pc, #120]	; (80096c0 <__sfp+0x84>)
 8009646:	681e      	ldr	r6, [r3, #0]
 8009648:	69b3      	ldr	r3, [r6, #24]
 800964a:	b913      	cbnz	r3, 8009652 <__sfp+0x16>
 800964c:	4630      	mov	r0, r6
 800964e:	f7ff ffbd 	bl	80095cc <__sinit>
 8009652:	3648      	adds	r6, #72	; 0x48
 8009654:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8009658:	3b01      	subs	r3, #1
 800965a:	d503      	bpl.n	8009664 <__sfp+0x28>
 800965c:	6833      	ldr	r3, [r6, #0]
 800965e:	b30b      	cbz	r3, 80096a4 <__sfp+0x68>
 8009660:	6836      	ldr	r6, [r6, #0]
 8009662:	e7f7      	b.n	8009654 <__sfp+0x18>
 8009664:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8009668:	b9d5      	cbnz	r5, 80096a0 <__sfp+0x64>
 800966a:	4b16      	ldr	r3, [pc, #88]	; (80096c4 <__sfp+0x88>)
 800966c:	60e3      	str	r3, [r4, #12]
 800966e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8009672:	6665      	str	r5, [r4, #100]	; 0x64
 8009674:	f000 f847 	bl	8009706 <__retarget_lock_init_recursive>
 8009678:	f7ff ff96 	bl	80095a8 <__sfp_lock_release>
 800967c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8009680:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8009684:	6025      	str	r5, [r4, #0]
 8009686:	61a5      	str	r5, [r4, #24]
 8009688:	2208      	movs	r2, #8
 800968a:	4629      	mov	r1, r5
 800968c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8009690:	f7fd fa6e 	bl	8006b70 <memset>
 8009694:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8009698:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800969c:	4620      	mov	r0, r4
 800969e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80096a0:	3468      	adds	r4, #104	; 0x68
 80096a2:	e7d9      	b.n	8009658 <__sfp+0x1c>
 80096a4:	2104      	movs	r1, #4
 80096a6:	4638      	mov	r0, r7
 80096a8:	f7ff ff62 	bl	8009570 <__sfmoreglue>
 80096ac:	4604      	mov	r4, r0
 80096ae:	6030      	str	r0, [r6, #0]
 80096b0:	2800      	cmp	r0, #0
 80096b2:	d1d5      	bne.n	8009660 <__sfp+0x24>
 80096b4:	f7ff ff78 	bl	80095a8 <__sfp_lock_release>
 80096b8:	230c      	movs	r3, #12
 80096ba:	603b      	str	r3, [r7, #0]
 80096bc:	e7ee      	b.n	800969c <__sfp+0x60>
 80096be:	bf00      	nop
 80096c0:	08009a70 	.word	0x08009a70
 80096c4:	ffff0001 	.word	0xffff0001

080096c8 <_fwalk_reent>:
 80096c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80096cc:	4606      	mov	r6, r0
 80096ce:	4688      	mov	r8, r1
 80096d0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80096d4:	2700      	movs	r7, #0
 80096d6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80096da:	f1b9 0901 	subs.w	r9, r9, #1
 80096de:	d505      	bpl.n	80096ec <_fwalk_reent+0x24>
 80096e0:	6824      	ldr	r4, [r4, #0]
 80096e2:	2c00      	cmp	r4, #0
 80096e4:	d1f7      	bne.n	80096d6 <_fwalk_reent+0xe>
 80096e6:	4638      	mov	r0, r7
 80096e8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80096ec:	89ab      	ldrh	r3, [r5, #12]
 80096ee:	2b01      	cmp	r3, #1
 80096f0:	d907      	bls.n	8009702 <_fwalk_reent+0x3a>
 80096f2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80096f6:	3301      	adds	r3, #1
 80096f8:	d003      	beq.n	8009702 <_fwalk_reent+0x3a>
 80096fa:	4629      	mov	r1, r5
 80096fc:	4630      	mov	r0, r6
 80096fe:	47c0      	blx	r8
 8009700:	4307      	orrs	r7, r0
 8009702:	3568      	adds	r5, #104	; 0x68
 8009704:	e7e9      	b.n	80096da <_fwalk_reent+0x12>

08009706 <__retarget_lock_init_recursive>:
 8009706:	4770      	bx	lr

08009708 <__retarget_lock_acquire_recursive>:
 8009708:	4770      	bx	lr

0800970a <__retarget_lock_release_recursive>:
 800970a:	4770      	bx	lr

0800970c <__swhatbuf_r>:
 800970c:	b570      	push	{r4, r5, r6, lr}
 800970e:	460e      	mov	r6, r1
 8009710:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009714:	2900      	cmp	r1, #0
 8009716:	b096      	sub	sp, #88	; 0x58
 8009718:	4614      	mov	r4, r2
 800971a:	461d      	mov	r5, r3
 800971c:	da08      	bge.n	8009730 <__swhatbuf_r+0x24>
 800971e:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8009722:	2200      	movs	r2, #0
 8009724:	602a      	str	r2, [r5, #0]
 8009726:	061a      	lsls	r2, r3, #24
 8009728:	d410      	bmi.n	800974c <__swhatbuf_r+0x40>
 800972a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800972e:	e00e      	b.n	800974e <__swhatbuf_r+0x42>
 8009730:	466a      	mov	r2, sp
 8009732:	f000 f903 	bl	800993c <_fstat_r>
 8009736:	2800      	cmp	r0, #0
 8009738:	dbf1      	blt.n	800971e <__swhatbuf_r+0x12>
 800973a:	9a01      	ldr	r2, [sp, #4]
 800973c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8009740:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8009744:	425a      	negs	r2, r3
 8009746:	415a      	adcs	r2, r3
 8009748:	602a      	str	r2, [r5, #0]
 800974a:	e7ee      	b.n	800972a <__swhatbuf_r+0x1e>
 800974c:	2340      	movs	r3, #64	; 0x40
 800974e:	2000      	movs	r0, #0
 8009750:	6023      	str	r3, [r4, #0]
 8009752:	b016      	add	sp, #88	; 0x58
 8009754:	bd70      	pop	{r4, r5, r6, pc}
	...

08009758 <__smakebuf_r>:
 8009758:	898b      	ldrh	r3, [r1, #12]
 800975a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800975c:	079d      	lsls	r5, r3, #30
 800975e:	4606      	mov	r6, r0
 8009760:	460c      	mov	r4, r1
 8009762:	d507      	bpl.n	8009774 <__smakebuf_r+0x1c>
 8009764:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8009768:	6023      	str	r3, [r4, #0]
 800976a:	6123      	str	r3, [r4, #16]
 800976c:	2301      	movs	r3, #1
 800976e:	6163      	str	r3, [r4, #20]
 8009770:	b002      	add	sp, #8
 8009772:	bd70      	pop	{r4, r5, r6, pc}
 8009774:	ab01      	add	r3, sp, #4
 8009776:	466a      	mov	r2, sp
 8009778:	f7ff ffc8 	bl	800970c <__swhatbuf_r>
 800977c:	9900      	ldr	r1, [sp, #0]
 800977e:	4605      	mov	r5, r0
 8009780:	4630      	mov	r0, r6
 8009782:	f7ff f963 	bl	8008a4c <_malloc_r>
 8009786:	b948      	cbnz	r0, 800979c <__smakebuf_r+0x44>
 8009788:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800978c:	059a      	lsls	r2, r3, #22
 800978e:	d4ef      	bmi.n	8009770 <__smakebuf_r+0x18>
 8009790:	f023 0303 	bic.w	r3, r3, #3
 8009794:	f043 0302 	orr.w	r3, r3, #2
 8009798:	81a3      	strh	r3, [r4, #12]
 800979a:	e7e3      	b.n	8009764 <__smakebuf_r+0xc>
 800979c:	4b0d      	ldr	r3, [pc, #52]	; (80097d4 <__smakebuf_r+0x7c>)
 800979e:	62b3      	str	r3, [r6, #40]	; 0x28
 80097a0:	89a3      	ldrh	r3, [r4, #12]
 80097a2:	6020      	str	r0, [r4, #0]
 80097a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80097a8:	81a3      	strh	r3, [r4, #12]
 80097aa:	9b00      	ldr	r3, [sp, #0]
 80097ac:	6163      	str	r3, [r4, #20]
 80097ae:	9b01      	ldr	r3, [sp, #4]
 80097b0:	6120      	str	r0, [r4, #16]
 80097b2:	b15b      	cbz	r3, 80097cc <__smakebuf_r+0x74>
 80097b4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80097b8:	4630      	mov	r0, r6
 80097ba:	f000 f8d1 	bl	8009960 <_isatty_r>
 80097be:	b128      	cbz	r0, 80097cc <__smakebuf_r+0x74>
 80097c0:	89a3      	ldrh	r3, [r4, #12]
 80097c2:	f023 0303 	bic.w	r3, r3, #3
 80097c6:	f043 0301 	orr.w	r3, r3, #1
 80097ca:	81a3      	strh	r3, [r4, #12]
 80097cc:	89a0      	ldrh	r0, [r4, #12]
 80097ce:	4305      	orrs	r5, r0
 80097d0:	81a5      	strh	r5, [r4, #12]
 80097d2:	e7cd      	b.n	8009770 <__smakebuf_r+0x18>
 80097d4:	08009565 	.word	0x08009565

080097d8 <_malloc_usable_size_r>:
 80097d8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80097dc:	1f18      	subs	r0, r3, #4
 80097de:	2b00      	cmp	r3, #0
 80097e0:	bfbc      	itt	lt
 80097e2:	580b      	ldrlt	r3, [r1, r0]
 80097e4:	18c0      	addlt	r0, r0, r3
 80097e6:	4770      	bx	lr

080097e8 <_raise_r>:
 80097e8:	291f      	cmp	r1, #31
 80097ea:	b538      	push	{r3, r4, r5, lr}
 80097ec:	4604      	mov	r4, r0
 80097ee:	460d      	mov	r5, r1
 80097f0:	d904      	bls.n	80097fc <_raise_r+0x14>
 80097f2:	2316      	movs	r3, #22
 80097f4:	6003      	str	r3, [r0, #0]
 80097f6:	f04f 30ff 	mov.w	r0, #4294967295
 80097fa:	bd38      	pop	{r3, r4, r5, pc}
 80097fc:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80097fe:	b112      	cbz	r2, 8009806 <_raise_r+0x1e>
 8009800:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009804:	b94b      	cbnz	r3, 800981a <_raise_r+0x32>
 8009806:	4620      	mov	r0, r4
 8009808:	f000 f830 	bl	800986c <_getpid_r>
 800980c:	462a      	mov	r2, r5
 800980e:	4601      	mov	r1, r0
 8009810:	4620      	mov	r0, r4
 8009812:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009816:	f000 b817 	b.w	8009848 <_kill_r>
 800981a:	2b01      	cmp	r3, #1
 800981c:	d00a      	beq.n	8009834 <_raise_r+0x4c>
 800981e:	1c59      	adds	r1, r3, #1
 8009820:	d103      	bne.n	800982a <_raise_r+0x42>
 8009822:	2316      	movs	r3, #22
 8009824:	6003      	str	r3, [r0, #0]
 8009826:	2001      	movs	r0, #1
 8009828:	e7e7      	b.n	80097fa <_raise_r+0x12>
 800982a:	2400      	movs	r4, #0
 800982c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8009830:	4628      	mov	r0, r5
 8009832:	4798      	blx	r3
 8009834:	2000      	movs	r0, #0
 8009836:	e7e0      	b.n	80097fa <_raise_r+0x12>

08009838 <raise>:
 8009838:	4b02      	ldr	r3, [pc, #8]	; (8009844 <raise+0xc>)
 800983a:	4601      	mov	r1, r0
 800983c:	6818      	ldr	r0, [r3, #0]
 800983e:	f7ff bfd3 	b.w	80097e8 <_raise_r>
 8009842:	bf00      	nop
 8009844:	20000010 	.word	0x20000010

08009848 <_kill_r>:
 8009848:	b538      	push	{r3, r4, r5, lr}
 800984a:	4d07      	ldr	r5, [pc, #28]	; (8009868 <_kill_r+0x20>)
 800984c:	2300      	movs	r3, #0
 800984e:	4604      	mov	r4, r0
 8009850:	4608      	mov	r0, r1
 8009852:	4611      	mov	r1, r2
 8009854:	602b      	str	r3, [r5, #0]
 8009856:	f7f8 fd0f 	bl	8002278 <_kill>
 800985a:	1c43      	adds	r3, r0, #1
 800985c:	d102      	bne.n	8009864 <_kill_r+0x1c>
 800985e:	682b      	ldr	r3, [r5, #0]
 8009860:	b103      	cbz	r3, 8009864 <_kill_r+0x1c>
 8009862:	6023      	str	r3, [r4, #0]
 8009864:	bd38      	pop	{r3, r4, r5, pc}
 8009866:	bf00      	nop
 8009868:	2000a454 	.word	0x2000a454

0800986c <_getpid_r>:
 800986c:	f7f8 bcfc 	b.w	8002268 <_getpid>

08009870 <__sread>:
 8009870:	b510      	push	{r4, lr}
 8009872:	460c      	mov	r4, r1
 8009874:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009878:	f000 f894 	bl	80099a4 <_read_r>
 800987c:	2800      	cmp	r0, #0
 800987e:	bfab      	itete	ge
 8009880:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8009882:	89a3      	ldrhlt	r3, [r4, #12]
 8009884:	181b      	addge	r3, r3, r0
 8009886:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800988a:	bfac      	ite	ge
 800988c:	6563      	strge	r3, [r4, #84]	; 0x54
 800988e:	81a3      	strhlt	r3, [r4, #12]
 8009890:	bd10      	pop	{r4, pc}

08009892 <__swrite>:
 8009892:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009896:	461f      	mov	r7, r3
 8009898:	898b      	ldrh	r3, [r1, #12]
 800989a:	05db      	lsls	r3, r3, #23
 800989c:	4605      	mov	r5, r0
 800989e:	460c      	mov	r4, r1
 80098a0:	4616      	mov	r6, r2
 80098a2:	d505      	bpl.n	80098b0 <__swrite+0x1e>
 80098a4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80098a8:	2302      	movs	r3, #2
 80098aa:	2200      	movs	r2, #0
 80098ac:	f000 f868 	bl	8009980 <_lseek_r>
 80098b0:	89a3      	ldrh	r3, [r4, #12]
 80098b2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80098b6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80098ba:	81a3      	strh	r3, [r4, #12]
 80098bc:	4632      	mov	r2, r6
 80098be:	463b      	mov	r3, r7
 80098c0:	4628      	mov	r0, r5
 80098c2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80098c6:	f000 b817 	b.w	80098f8 <_write_r>

080098ca <__sseek>:
 80098ca:	b510      	push	{r4, lr}
 80098cc:	460c      	mov	r4, r1
 80098ce:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80098d2:	f000 f855 	bl	8009980 <_lseek_r>
 80098d6:	1c43      	adds	r3, r0, #1
 80098d8:	89a3      	ldrh	r3, [r4, #12]
 80098da:	bf15      	itete	ne
 80098dc:	6560      	strne	r0, [r4, #84]	; 0x54
 80098de:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80098e2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80098e6:	81a3      	strheq	r3, [r4, #12]
 80098e8:	bf18      	it	ne
 80098ea:	81a3      	strhne	r3, [r4, #12]
 80098ec:	bd10      	pop	{r4, pc}

080098ee <__sclose>:
 80098ee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80098f2:	f000 b813 	b.w	800991c <_close_r>
	...

080098f8 <_write_r>:
 80098f8:	b538      	push	{r3, r4, r5, lr}
 80098fa:	4d07      	ldr	r5, [pc, #28]	; (8009918 <_write_r+0x20>)
 80098fc:	4604      	mov	r4, r0
 80098fe:	4608      	mov	r0, r1
 8009900:	4611      	mov	r1, r2
 8009902:	2200      	movs	r2, #0
 8009904:	602a      	str	r2, [r5, #0]
 8009906:	461a      	mov	r2, r3
 8009908:	f7f8 fced 	bl	80022e6 <_write>
 800990c:	1c43      	adds	r3, r0, #1
 800990e:	d102      	bne.n	8009916 <_write_r+0x1e>
 8009910:	682b      	ldr	r3, [r5, #0]
 8009912:	b103      	cbz	r3, 8009916 <_write_r+0x1e>
 8009914:	6023      	str	r3, [r4, #0]
 8009916:	bd38      	pop	{r3, r4, r5, pc}
 8009918:	2000a454 	.word	0x2000a454

0800991c <_close_r>:
 800991c:	b538      	push	{r3, r4, r5, lr}
 800991e:	4d06      	ldr	r5, [pc, #24]	; (8009938 <_close_r+0x1c>)
 8009920:	2300      	movs	r3, #0
 8009922:	4604      	mov	r4, r0
 8009924:	4608      	mov	r0, r1
 8009926:	602b      	str	r3, [r5, #0]
 8009928:	f7f8 fcf9 	bl	800231e <_close>
 800992c:	1c43      	adds	r3, r0, #1
 800992e:	d102      	bne.n	8009936 <_close_r+0x1a>
 8009930:	682b      	ldr	r3, [r5, #0]
 8009932:	b103      	cbz	r3, 8009936 <_close_r+0x1a>
 8009934:	6023      	str	r3, [r4, #0]
 8009936:	bd38      	pop	{r3, r4, r5, pc}
 8009938:	2000a454 	.word	0x2000a454

0800993c <_fstat_r>:
 800993c:	b538      	push	{r3, r4, r5, lr}
 800993e:	4d07      	ldr	r5, [pc, #28]	; (800995c <_fstat_r+0x20>)
 8009940:	2300      	movs	r3, #0
 8009942:	4604      	mov	r4, r0
 8009944:	4608      	mov	r0, r1
 8009946:	4611      	mov	r1, r2
 8009948:	602b      	str	r3, [r5, #0]
 800994a:	f7f8 fcf4 	bl	8002336 <_fstat>
 800994e:	1c43      	adds	r3, r0, #1
 8009950:	d102      	bne.n	8009958 <_fstat_r+0x1c>
 8009952:	682b      	ldr	r3, [r5, #0]
 8009954:	b103      	cbz	r3, 8009958 <_fstat_r+0x1c>
 8009956:	6023      	str	r3, [r4, #0]
 8009958:	bd38      	pop	{r3, r4, r5, pc}
 800995a:	bf00      	nop
 800995c:	2000a454 	.word	0x2000a454

08009960 <_isatty_r>:
 8009960:	b538      	push	{r3, r4, r5, lr}
 8009962:	4d06      	ldr	r5, [pc, #24]	; (800997c <_isatty_r+0x1c>)
 8009964:	2300      	movs	r3, #0
 8009966:	4604      	mov	r4, r0
 8009968:	4608      	mov	r0, r1
 800996a:	602b      	str	r3, [r5, #0]
 800996c:	f7f8 fcf3 	bl	8002356 <_isatty>
 8009970:	1c43      	adds	r3, r0, #1
 8009972:	d102      	bne.n	800997a <_isatty_r+0x1a>
 8009974:	682b      	ldr	r3, [r5, #0]
 8009976:	b103      	cbz	r3, 800997a <_isatty_r+0x1a>
 8009978:	6023      	str	r3, [r4, #0]
 800997a:	bd38      	pop	{r3, r4, r5, pc}
 800997c:	2000a454 	.word	0x2000a454

08009980 <_lseek_r>:
 8009980:	b538      	push	{r3, r4, r5, lr}
 8009982:	4d07      	ldr	r5, [pc, #28]	; (80099a0 <_lseek_r+0x20>)
 8009984:	4604      	mov	r4, r0
 8009986:	4608      	mov	r0, r1
 8009988:	4611      	mov	r1, r2
 800998a:	2200      	movs	r2, #0
 800998c:	602a      	str	r2, [r5, #0]
 800998e:	461a      	mov	r2, r3
 8009990:	f7f8 fcec 	bl	800236c <_lseek>
 8009994:	1c43      	adds	r3, r0, #1
 8009996:	d102      	bne.n	800999e <_lseek_r+0x1e>
 8009998:	682b      	ldr	r3, [r5, #0]
 800999a:	b103      	cbz	r3, 800999e <_lseek_r+0x1e>
 800999c:	6023      	str	r3, [r4, #0]
 800999e:	bd38      	pop	{r3, r4, r5, pc}
 80099a0:	2000a454 	.word	0x2000a454

080099a4 <_read_r>:
 80099a4:	b538      	push	{r3, r4, r5, lr}
 80099a6:	4d07      	ldr	r5, [pc, #28]	; (80099c4 <_read_r+0x20>)
 80099a8:	4604      	mov	r4, r0
 80099aa:	4608      	mov	r0, r1
 80099ac:	4611      	mov	r1, r2
 80099ae:	2200      	movs	r2, #0
 80099b0:	602a      	str	r2, [r5, #0]
 80099b2:	461a      	mov	r2, r3
 80099b4:	f7f8 fc7a 	bl	80022ac <_read>
 80099b8:	1c43      	adds	r3, r0, #1
 80099ba:	d102      	bne.n	80099c2 <_read_r+0x1e>
 80099bc:	682b      	ldr	r3, [r5, #0]
 80099be:	b103      	cbz	r3, 80099c2 <_read_r+0x1e>
 80099c0:	6023      	str	r3, [r4, #0]
 80099c2:	bd38      	pop	{r3, r4, r5, pc}
 80099c4:	2000a454 	.word	0x2000a454

080099c8 <sqrtf>:
 80099c8:	b508      	push	{r3, lr}
 80099ca:	ed2d 8b02 	vpush	{d8}
 80099ce:	eeb0 8a40 	vmov.f32	s16, s0
 80099d2:	f000 f817 	bl	8009a04 <__ieee754_sqrtf>
 80099d6:	eeb4 8a48 	vcmp.f32	s16, s16
 80099da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80099de:	d60c      	bvs.n	80099fa <sqrtf+0x32>
 80099e0:	eddf 8a07 	vldr	s17, [pc, #28]	; 8009a00 <sqrtf+0x38>
 80099e4:	eeb4 8ae8 	vcmpe.f32	s16, s17
 80099e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80099ec:	d505      	bpl.n	80099fa <sqrtf+0x32>
 80099ee:	f7fd f895 	bl	8006b1c <__errno>
 80099f2:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 80099f6:	2321      	movs	r3, #33	; 0x21
 80099f8:	6003      	str	r3, [r0, #0]
 80099fa:	ecbd 8b02 	vpop	{d8}
 80099fe:	bd08      	pop	{r3, pc}
 8009a00:	00000000 	.word	0x00000000

08009a04 <__ieee754_sqrtf>:
 8009a04:	eeb1 0ac0 	vsqrt.f32	s0, s0
 8009a08:	4770      	bx	lr
	...

08009a0c <_init>:
 8009a0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009a0e:	bf00      	nop
 8009a10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009a12:	bc08      	pop	{r3}
 8009a14:	469e      	mov	lr, r3
 8009a16:	4770      	bx	lr

08009a18 <_fini>:
 8009a18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009a1a:	bf00      	nop
 8009a1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009a1e:	bc08      	pop	{r3}
 8009a20:	469e      	mov	lr, r3
 8009a22:	4770      	bx	lr
